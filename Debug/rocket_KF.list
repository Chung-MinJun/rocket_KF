
rocket_KF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015920  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb4  08015a30  08015a30  00025a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080166e4  080166e4  00030208  2**0
                  CONTENTS
  4 .ARM          00000000  080166e4  080166e4  00030208  2**0
                  CONTENTS
  5 .preinit_array 00000000  080166e4  080166e4  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080166e4  080166e4  000266e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080166e8  080166e8  000266e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080166ec  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002718  20000208  080168f4  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002920  080168f4  00032920  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030231  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f80  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035dd  00000000  00000000  000481f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  0004b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000120b  00000000  00000000  0004ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aee9  00000000  00000000  0004e0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d65e  00000000  00000000  00068fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093472  00000000  00000000  0008660a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b04  00000000  00000000  00119a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00121580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	08015a18 	.word	0x08015a18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	08015a18 	.word	0x08015a18

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <initialBMP180>:
//True Data
float T;
float P;

// start with
void initialBMP180(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	readCalibrationBMP180();
 8001140:	f000 fbf8 	bl	8001934 <readCalibrationBMP180>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <readTrueTemp>:

// read temperature
float readTrueTemp(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	calculateTemp();
 800114c:	f000 f9a0 	bl	8001490 <calculateTemp>
	return T/10.0;
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <readTrueTemp+0x1c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4904      	ldr	r1, [pc, #16]	; (8001168 <readTrueTemp+0x20>)
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fec8 	bl	8000eec <__aeabi_fdiv>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000264 	.word	0x20000264
 8001168:	41200000 	.word	0x41200000

0800116c <readTruePress>:

// read press
float readTruePress(uint8_t oss){
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	calculatePress(oss);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fa09 	bl	8001590 <calculatePress>
	return P;
 800117e:	4b03      	ldr	r3, [pc, #12]	; (800118c <readTruePress+0x20>)
 8001180:	681b      	ldr	r3, [r3, #0]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000268 	.word	0x20000268

08001190 <readTrueAltitude>:

// read altitude
float readTrueAltitude(uint8_t oss){
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	readTruePress(oss);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffe5 	bl	800116c <readTruePress>
	return 44330*(1-(pow((P/(float)Po), 1/5.255)));
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <readTrueAltitude+0x78>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4919      	ldr	r1, [pc, #100]	; (800120c <readTrueAltitude+0x7c>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fe9f 	bl	8000eec <__aeabi_fdiv>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f939 	bl	8000428 <__aeabi_f2d>
 80011b6:	a310      	add	r3, pc, #64	; (adr r3, 80011f8 <readTrueAltitude+0x68>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f00e fe46 	bl	800fe4c <pow>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	f04f 0000 	mov.w	r0, #0
 80011c8:	4911      	ldr	r1, [pc, #68]	; (8001210 <readTrueAltitude+0x80>)
 80011ca:	f7fe ffcd 	bl	8000168 <__aeabi_dsub>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	a30a      	add	r3, pc, #40	; (adr r3, 8001200 <readTrueAltitude+0x70>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff f97c 	bl	80004d8 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fc6e 	bl	8000ac8 <__aeabi_d2f>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	ccd9456c 	.word	0xccd9456c
 80011fc:	3fc85b95 	.word	0x3fc85b95
 8001200:	00000000 	.word	0x00000000
 8001204:	40e5a540 	.word	0x40e5a540
 8001208:	20000268 	.word	0x20000268
 800120c:	47c5e680 	.word	0x47c5e680
 8001210:	3ff00000 	.word	0x3ff00000

08001214 <readTempBPM180>:

uint16_t readTempBPM180(void){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
	uint8_t data = 0x2E;
 800121a:	232e      	movs	r3, #46	; 0x2e
 800121c:	71fb      	strb	r3, [r7, #7]
	uint8_t tempRAW[2] = {0};
 800121e:	2300      	movs	r3, #0
 8001220:	80bb      	strh	r3, [r7, #4]

	writeAndRead(
 8001222:	79f9      	ldrb	r1, [r7, #7]
 8001224:	1d38      	adds	r0, r7, #4
 8001226:	2304      	movs	r3, #4
 8001228:	2254      	movs	r2, #84	; 0x54
 800122a:	f000 f8df 	bl	80013ec <writeAndRead>
			data,
			'T',
			4 // it should be higher then 3
			);

	return ((tempRAW[0] << 8) | tempRAW[1]);
 800122e:	793b      	ldrb	r3, [r7, #4]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b21a      	sxth	r2, r3
 8001234:	797b      	ldrb	r3, [r7, #5]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21b      	sxth	r3, r3
 800123c:	b29b      	uxth	r3, r3
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <readPressureBPM180>:
uint16_t readPressureBPM180(uint8_t oss){
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0x34 + (oss << 6);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	019b      	lsls	r3, r3, #6
 8001254:	b2db      	uxtb	r3, r3
 8001256:	3334      	adds	r3, #52	; 0x34
 8001258:	73fb      	strb	r3, [r7, #15]
	uint8_t pressRaw[3];

	writeAndRead(
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	7bf9      	ldrb	r1, [r7, #15]
 800125e:	f107 000c 	add.w	r0, r7, #12
 8001262:	2250      	movs	r2, #80	; 0x50
 8001264:	f000 f8c2 	bl	80013ec <writeAndRead>
				data,
				'P',
				oss
				);

	return (((pressRaw[0] << 16) + (pressRaw[1] << 8) + pressRaw[2]) >> (8-oss));
 8001268:	7b3b      	ldrb	r3, [r7, #12]
 800126a:	041a      	lsls	r2, r3, #16
 800126c:	7b7b      	ldrb	r3, [r7, #13]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	4413      	add	r3, r2
 8001272:	7bba      	ldrb	r2, [r7, #14]
 8001274:	441a      	add	r2, r3
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f1c3 0308 	rsb	r3, r3, #8
 800127c:	fa42 f303 	asr.w	r3, r2, r3
 8001280:	b29b      	uxth	r3, r3
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <fillData>:
void fillData(uint8_t* calibDatas){
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	AC1 = (( calibDatas[0] << 8) | calibDatas[1]);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3301      	adds	r3, #1
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <fillData+0x134>)
 80012aa:	801a      	strh	r2, [r3, #0]
	AC2 = (( calibDatas[2] << 8) | calibDatas[3]);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3302      	adds	r3, #2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3303      	adds	r3, #3
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <fillData+0x138>)
 80012c4:	801a      	strh	r2, [r3, #0]
	AC3 = (( calibDatas[4] << 8) | calibDatas[5]);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3304      	adds	r3, #4
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3305      	adds	r3, #5
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <fillData+0x13c>)
 80012de:	801a      	strh	r2, [r3, #0]
	AC4 = (( calibDatas[6] << 8) | calibDatas[7]);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3306      	adds	r3, #6
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3307      	adds	r3, #7
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <fillData+0x140>)
 80012fa:	801a      	strh	r2, [r3, #0]
	AC5 = (( calibDatas[8] << 8) | calibDatas[9]);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3308      	adds	r3, #8
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3309      	adds	r3, #9
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b21b      	sxth	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b21b      	sxth	r3, r3
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <fillData+0x144>)
 8001316:	801a      	strh	r2, [r3, #0]
	AC6 = ((calibDatas[10] << 8) | calibDatas[11]);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	330a      	adds	r3, #10
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	b21a      	sxth	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	330b      	adds	r3, #11
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21b      	sxth	r3, r3
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <fillData+0x148>)
 8001332:	801a      	strh	r2, [r3, #0]
	B1 =  ((calibDatas[12] << 8) | calibDatas[13]);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	330c      	adds	r3, #12
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b21a      	sxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	330d      	adds	r3, #13
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21a      	sxth	r2, r3
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <fillData+0x14c>)
 800134c:	801a      	strh	r2, [r3, #0]
	B2 =  ((calibDatas[14] << 8) | calibDatas[15]);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	330e      	adds	r3, #14
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b21a      	sxth	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	330f      	adds	r3, #15
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21a      	sxth	r2, r3
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <fillData+0x150>)
 8001366:	801a      	strh	r2, [r3, #0]
	MB =  ((calibDatas[16] << 8) | calibDatas[17]);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3310      	adds	r3, #16
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3311      	adds	r3, #17
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21a      	sxth	r2, r3
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <fillData+0x154>)
 8001380:	801a      	strh	r2, [r3, #0]
	MC =  ((calibDatas[18] << 8) | calibDatas[19]);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3312      	adds	r3, #18
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b21a      	sxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3313      	adds	r3, #19
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21a      	sxth	r2, r3
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <fillData+0x158>)
 800139a:	801a      	strh	r2, [r3, #0]
	MD =  ((calibDatas[20] << 8) | calibDatas[21]);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3314      	adds	r3, #20
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3315      	adds	r3, #21
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <fillData+0x15c>)
 80013b4:	801a      	strh	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	20000224 	.word	0x20000224
 80013c4:	20000226 	.word	0x20000226
 80013c8:	20000228 	.word	0x20000228
 80013cc:	2000022a 	.word	0x2000022a
 80013d0:	2000022c 	.word	0x2000022c
 80013d4:	2000022e 	.word	0x2000022e
 80013d8:	20000230 	.word	0x20000230
 80013dc:	20000232 	.word	0x20000232
 80013e0:	20000234 	.word	0x20000234
 80013e4:	20000236 	.word	0x20000236
 80013e8:	20000238 	.word	0x20000238

080013ec <writeAndRead>:
void writeAndRead(uint8_t* raw, uint8_t data, char sens, uint8_t oss){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af04      	add	r7, sp, #16
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4603      	mov	r3, r0
 80013fc:	70fb      	strb	r3, [r7, #3]
 80013fe:	460b      	mov	r3, r1
 8001400:	70bb      	strb	r3, [r7, #2]
 8001402:	4613      	mov	r3, r2
 8001404:	707b      	strb	r3, [r7, #1]
	uint8_t size;
	HAL_I2C_Mem_Write(
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	2301      	movs	r3, #1
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	1cfb      	adds	r3, r7, #3
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	22f4      	movs	r2, #244	; 0xf4
 8001418:	21ee      	movs	r1, #238	; 0xee
 800141a:	481c      	ldr	r0, [pc, #112]	; (800148c <writeAndRead+0xa0>)
 800141c:	f005 fc14 	bl	8006c48 <HAL_I2C_Mem_Write>
				1,
				&data,
				1,
				1000
				);
	if(sens == 'P'){
 8001420:	78bb      	ldrb	r3, [r7, #2]
 8001422:	2b50      	cmp	r3, #80	; 0x50
 8001424:	d11a      	bne.n	800145c <writeAndRead+0x70>
		size = 3;
 8001426:	2303      	movs	r3, #3
 8001428:	73fb      	strb	r3, [r7, #15]
		if(oss == 0) HAL_Delay(5);
 800142a:	787b      	ldrb	r3, [r7, #1]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <writeAndRead+0x4a>
 8001430:	2005      	movs	r0, #5
 8001432:	f004 fb97 	bl	8005b64 <HAL_Delay>
		if(oss == 1) HAL_Delay(8);
 8001436:	787b      	ldrb	r3, [r7, #1]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d102      	bne.n	8001442 <writeAndRead+0x56>
 800143c:	2008      	movs	r0, #8
 800143e:	f004 fb91 	bl	8005b64 <HAL_Delay>
		if(oss == 2) HAL_Delay(14);
 8001442:	787b      	ldrb	r3, [r7, #1]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d102      	bne.n	800144e <writeAndRead+0x62>
 8001448:	200e      	movs	r0, #14
 800144a:	f004 fb8b 	bl	8005b64 <HAL_Delay>
		if(oss == 3) HAL_Delay(26);
 800144e:	787b      	ldrb	r3, [r7, #1]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d108      	bne.n	8001466 <writeAndRead+0x7a>
 8001454:	201a      	movs	r0, #26
 8001456:	f004 fb85 	bl	8005b64 <HAL_Delay>
 800145a:	e004      	b.n	8001466 <writeAndRead+0x7a>
	}
	else{
		size = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(5);
 8001460:	2005      	movs	r0, #5
 8001462:	f004 fb7f 	bl	8005b64 <HAL_Delay>
	}

		HAL_I2C_Mem_Read(
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	b29b      	uxth	r3, r3
 800146a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800146e:	9202      	str	r2, [sp, #8]
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	22f6      	movs	r2, #246	; 0xf6
 800147a:	21ee      	movs	r1, #238	; 0xee
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <writeAndRead+0xa0>)
 800147e:	f005 fcdd 	bl	8006e3c <HAL_I2C_Mem_Read>
				1,
				raw,
				size,
				1000
				);
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200002c4 	.word	0x200002c4

08001490 <calculateTemp>:
void calculateTemp(void){
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	af00      	add	r7, sp, #0
	UT = readTempBPM180();
 8001494:	f7ff febe 	bl	8001214 <readTempBPM180>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <calculateTemp+0xd0>)
 800149e:	601a      	str	r2, [r3, #0]
	X1 = (UT - AC6)*AC5/(pow(2, 15));
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <calculateTemp+0xd0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <calculateTemp+0xd4>)
 80014a6:	8812      	ldrh	r2, [r2, #0]
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <calculateTemp+0xd8>)
 80014ac:	8812      	ldrh	r2, [r2, #0]
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ffa6 	bl	8000404 <__aeabi_i2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <calculateTemp+0xdc>)
 80014be:	f7ff f935 	bl	800072c <__aeabi_ddiv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fab5 	bl	8000a38 <__aeabi_d2iz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a27      	ldr	r2, [pc, #156]	; (8001570 <calculateTemp+0xe0>)
 80014d2:	6013      	str	r3, [r2, #0]
	X2 = (MC*pow(2, 11))/(X1 + MD);
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <calculateTemp+0xe4>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe ff92 	bl	8000404 <__aeabi_i2d>
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <calculateTemp+0xe8>)
 80014e6:	f7fe fff7 	bl	80004d8 <__aeabi_dmul>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4614      	mov	r4, r2
 80014f0:	461d      	mov	r5, r3
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <calculateTemp+0xec>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <calculateTemp+0xe0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe ff7f 	bl	8000404 <__aeabi_i2d>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4620      	mov	r0, r4
 800150c:	4629      	mov	r1, r5
 800150e:	f7ff f90d 	bl	800072c <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fa8d 	bl	8000a38 <__aeabi_d2iz>
 800151e:	4603      	mov	r3, r0
 8001520:	4a17      	ldr	r2, [pc, #92]	; (8001580 <calculateTemp+0xf0>)
 8001522:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <calculateTemp+0xe0>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <calculateTemp+0xf0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4413      	add	r3, r2
 800152e:	4a15      	ldr	r2, [pc, #84]	; (8001584 <calculateTemp+0xf4>)
 8001530:	6013      	str	r3, [r2, #0]
	T = (B5 + 8)/pow(2,4);
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <calculateTemp+0xf4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3308      	adds	r3, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ff63 	bl	8000404 <__aeabi_i2d>
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <calculateTemp+0xf8>)
 8001544:	f7ff f8f2 	bl	800072c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff faba 	bl	8000ac8 <__aeabi_d2f>
 8001554:	4603      	mov	r3, r0
 8001556:	4a0d      	ldr	r2, [pc, #52]	; (800158c <calculateTemp+0xfc>)
 8001558:	6013      	str	r3, [r2, #0]
}
 800155a:	bf00      	nop
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	bf00      	nop
 8001560:	2000023c 	.word	0x2000023c
 8001564:	2000022e 	.word	0x2000022e
 8001568:	2000022c 	.word	0x2000022c
 800156c:	40e00000 	.word	0x40e00000
 8001570:	20000244 	.word	0x20000244
 8001574:	20000236 	.word	0x20000236
 8001578:	40a00000 	.word	0x40a00000
 800157c:	20000238 	.word	0x20000238
 8001580:	20000248 	.word	0x20000248
 8001584:	20000254 	.word	0x20000254
 8001588:	40300000 	.word	0x40300000
 800158c:	20000264 	.word	0x20000264

08001590 <calculatePress>:
void calculatePress(uint8_t oss){
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
	UP = readPressureBPM180(oss);
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fe52 	bl	8001246 <readPressureBPM180>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b7f      	ldr	r3, [pc, #508]	; (80017a4 <calculatePress+0x214>)
 80015a8:	601a      	str	r2, [r3, #0]
	B6 = B5-4000;
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <calculatePress+0x218>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80015b2:	4a7e      	ldr	r2, [pc, #504]	; (80017ac <calculatePress+0x21c>)
 80015b4:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80015b6:	4b7e      	ldr	r3, [pc, #504]	; (80017b0 <calculatePress+0x220>)
 80015b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff21 	bl	8000404 <__aeabi_i2d>
 80015c2:	4604      	mov	r4, r0
 80015c4:	460d      	mov	r5, r1
 80015c6:	4b79      	ldr	r3, [pc, #484]	; (80017ac <calculatePress+0x21c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a78      	ldr	r2, [pc, #480]	; (80017ac <calculatePress+0x21c>)
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ff16 	bl	8000404 <__aeabi_i2d>
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <calculatePress+0x224>)
 80015de:	f7ff f8a5 	bl	800072c <__aeabi_ddiv>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7fe ff75 	bl	80004d8 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b6f      	ldr	r3, [pc, #444]	; (80017b8 <calculatePress+0x228>)
 80015fc:	f7ff f896 	bl	800072c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff fa16 	bl	8000a38 <__aeabi_d2iz>
 800160c:	4603      	mov	r3, r0
 800160e:	4a6b      	ldr	r2, [pc, #428]	; (80017bc <calculatePress+0x22c>)
 8001610:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 8001612:	4b6b      	ldr	r3, [pc, #428]	; (80017c0 <calculatePress+0x230>)
 8001614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001618:	461a      	mov	r2, r3
 800161a:	4b64      	ldr	r3, [pc, #400]	; (80017ac <calculatePress+0x21c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe feee 	bl	8000404 <__aeabi_i2d>
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4b62      	ldr	r3, [pc, #392]	; (80017b8 <calculatePress+0x228>)
 800162e:	f7ff f87d 	bl	800072c <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff f9fd 	bl	8000a38 <__aeabi_d2iz>
 800163e:	4603      	mov	r3, r0
 8001640:	4a60      	ldr	r2, [pc, #384]	; (80017c4 <calculatePress+0x234>)
 8001642:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 8001644:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <calculatePress+0x22c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <calculatePress+0x234>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4413      	add	r3, r2
 800164e:	4a5e      	ldr	r2, [pc, #376]	; (80017c8 <calculatePress+0x238>)
 8001650:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001652:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <calculatePress+0x23c>)
 8001654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001658:	009a      	lsls	r2, r3, #2
 800165a:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <calculatePress+0x238>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	441a      	add	r2, r3
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	3302      	adds	r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	da00      	bge.n	800166e <calculatePress+0xde>
 800166c:	3303      	adds	r3, #3
 800166e:	109b      	asrs	r3, r3, #2
 8001670:	461a      	mov	r2, r3
 8001672:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <calculatePress+0x240>)
 8001674:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001676:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <calculatePress+0x244>)
 8001678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167c:	461a      	mov	r2, r3
 800167e:	4b4b      	ldr	r3, [pc, #300]	; (80017ac <calculatePress+0x21c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe febc 	bl	8000404 <__aeabi_i2d>
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <calculatePress+0x248>)
 8001692:	f7ff f84b 	bl	800072c <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff f9cb 	bl	8000a38 <__aeabi_d2iz>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a45      	ldr	r2, [pc, #276]	; (80017bc <calculatePress+0x22c>)
 80016a6:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80016a8:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <calculatePress+0x24c>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fea8 	bl	8000404 <__aeabi_i2d>
 80016b4:	4604      	mov	r4, r0
 80016b6:	460d      	mov	r5, r1
 80016b8:	4b3c      	ldr	r3, [pc, #240]	; (80017ac <calculatePress+0x21c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <calculatePress+0x21c>)
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe fe9d 	bl	8000404 <__aeabi_i2d>
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <calculatePress+0x224>)
 80016d0:	f7ff f82c 	bl	800072c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4620      	mov	r0, r4
 80016da:	4629      	mov	r1, r5
 80016dc:	f7fe fefc 	bl	80004d8 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <calculatePress+0x250>)
 80016ee:	f7ff f81d 	bl	800072c <__aeabi_ddiv>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff f99d 	bl	8000a38 <__aeabi_d2iz>
 80016fe:	4603      	mov	r3, r0
 8001700:	4a30      	ldr	r2, [pc, #192]	; (80017c4 <calculatePress+0x234>)
 8001702:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <calculatePress+0x22c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <calculatePress+0x234>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4413      	add	r3, r2
 800170e:	3302      	adds	r3, #2
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fe77 	bl	8000404 <__aeabi_i2d>
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <calculatePress+0x254>)
 800171c:	f7ff f806 	bl	800072c <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff f986 	bl	8000a38 <__aeabi_d2iz>
 800172c:	4603      	mov	r3, r0
 800172e:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <calculatePress+0x238>)
 8001730:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001732:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <calculatePress+0x258>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <calculatePress+0x238>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fe4d 	bl	80003e4 <__aeabi_ui2d>
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <calculatePress+0x25c>)
 8001750:	f7fe ffec 	bl	800072c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f994 	bl	8000a88 <__aeabi_d2uiz>
 8001760:	4603      	mov	r3, r0
 8001762:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <calculatePress+0x260>)
 8001764:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <calculatePress+0x214>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <calculatePress+0x240>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	79fa      	ldrb	r2, [r7, #7]
 8001774:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001778:	fa41 f202 	asr.w	r2, r1, r2
 800177c:	fb02 f303 	mul.w	r3, r2, r3
 8001780:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <calculatePress+0x264>)
 8001782:	6013      	str	r3, [r2, #0]
	P = (B7<0x80000000) ? (B7*2)/B4 : (B7/B4)*2;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <calculatePress+0x264>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db35      	blt.n	80017f8 <calculatePress+0x268>
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <calculatePress+0x264>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	005a      	lsls	r2, r3, #1
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <calculatePress+0x260>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fa9a 	bl	8000cd4 <__aeabi_ui2f>
 80017a0:	4603      	mov	r3, r0
 80017a2:	e034      	b.n	800180e <calculatePress+0x27e>
 80017a4:	20000240 	.word	0x20000240
 80017a8:	20000254 	.word	0x20000254
 80017ac:	2000025c 	.word	0x2000025c
 80017b0:	20000232 	.word	0x20000232
 80017b4:	40b00000 	.word	0x40b00000
 80017b8:	40a00000 	.word	0x40a00000
 80017bc:	20000244 	.word	0x20000244
 80017c0:	20000226 	.word	0x20000226
 80017c4:	20000248 	.word	0x20000248
 80017c8:	2000024c 	.word	0x2000024c
 80017cc:	20000224 	.word	0x20000224
 80017d0:	20000250 	.word	0x20000250
 80017d4:	20000228 	.word	0x20000228
 80017d8:	40c00000 	.word	0x40c00000
 80017dc:	20000230 	.word	0x20000230
 80017e0:	40f00000 	.word	0x40f00000
 80017e4:	40100000 	.word	0x40100000
 80017e8:	2000022a 	.word	0x2000022a
 80017ec:	40e00000 	.word	0x40e00000
 80017f0:	20000258 	.word	0x20000258
 80017f4:	20000260 	.word	0x20000260
 80017f8:	4b45      	ldr	r3, [pc, #276]	; (8001910 <calculatePress+0x380>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b45      	ldr	r3, [pc, #276]	; (8001914 <calculatePress+0x384>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fa64 	bl	8000cd4 <__aeabi_ui2f>
 800180c:	4603      	mov	r3, r0
 800180e:	4a42      	ldr	r2, [pc, #264]	; (8001918 <calculatePress+0x388>)
 8001810:	6013      	str	r3, [r2, #0]
	X1 = (P/(pow(2,8)))*(P/(pow(2,8)));
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <calculatePress+0x388>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe06 	bl	8000428 <__aeabi_f2d>
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	4b3e      	ldr	r3, [pc, #248]	; (800191c <calculatePress+0x38c>)
 8001822:	f7fe ff83 	bl	800072c <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4614      	mov	r4, r2
 800182c:	461d      	mov	r5, r3
 800182e:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <calculatePress+0x388>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fdf8 	bl	8000428 <__aeabi_f2d>
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b37      	ldr	r3, [pc, #220]	; (800191c <calculatePress+0x38c>)
 800183e:	f7fe ff75 	bl	800072c <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4620      	mov	r0, r4
 8001848:	4629      	mov	r1, r5
 800184a:	f7fe fe45 	bl	80004d8 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f7ff f8ef 	bl	8000a38 <__aeabi_d2iz>
 800185a:	4603      	mov	r3, r0
 800185c:	4a30      	ldr	r2, [pc, #192]	; (8001920 <calculatePress+0x390>)
 800185e:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <calculatePress+0x390>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f640 32de 	movw	r2, #3038	; 0xbde
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fdc9 	bl	8000404 <__aeabi_i2d>
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <calculatePress+0x394>)
 8001878:	f7fe ff58 	bl	800072c <__aeabi_ddiv>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f7ff f8d8 	bl	8000a38 <__aeabi_d2iz>
 8001888:	4603      	mov	r3, r0
 800188a:	4a25      	ldr	r2, [pc, #148]	; (8001920 <calculatePress+0x390>)
 800188c:	6013      	str	r3, [r2, #0]
	X2 = (-7357*P)/(pow(2,16));
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <calculatePress+0x388>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4925      	ldr	r1, [pc, #148]	; (8001928 <calculatePress+0x398>)
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fa75 	bl	8000d84 <__aeabi_fmul>
 800189a:	4603      	mov	r3, r0
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fdc3 	bl	8000428 <__aeabi_f2d>
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <calculatePress+0x394>)
 80018a8:	f7fe ff40 	bl	800072c <__aeabi_ddiv>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f8c0 	bl	8000a38 <__aeabi_d2iz>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a1c      	ldr	r2, [pc, #112]	; (800192c <calculatePress+0x39c>)
 80018bc:	6013      	str	r3, [r2, #0]
	P = P + (X1+X2+3791)/(pow(2,4));
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <calculatePress+0x388>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fdb0 	bl	8000428 <__aeabi_f2d>
 80018c8:	4604      	mov	r4, r0
 80018ca:	460d      	mov	r5, r1
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <calculatePress+0x390>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <calculatePress+0x39c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fd92 	bl	8000404 <__aeabi_i2d>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <calculatePress+0x3a0>)
 80018e6:	f7fe ff21 	bl	800072c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7fe fc3b 	bl	800016c <__adddf3>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f8e3 	bl	8000ac8 <__aeabi_d2f>
 8001902:	4603      	mov	r3, r0
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <calculatePress+0x388>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bdb0      	pop	{r4, r5, r7, pc}
 8001910:	20000260 	.word	0x20000260
 8001914:	20000258 	.word	0x20000258
 8001918:	20000268 	.word	0x20000268
 800191c:	40700000 	.word	0x40700000
 8001920:	20000244 	.word	0x20000244
 8001924:	40f00000 	.word	0x40f00000
 8001928:	c5e5e800 	.word	0xc5e5e800
 800192c:	20000248 	.word	0x20000248
 8001930:	40300000 	.word	0x40300000

08001934 <readCalibrationBMP180>:
void readCalibrationBMP180(void){
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af04      	add	r7, sp, #16
	uint8_t calibDatas[22] = {0};
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	821a      	strh	r2, [r3, #16]
	HAL_I2C_Mem_Read(
 800194c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	2316      	movs	r3, #22
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	463b      	mov	r3, r7
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	22aa      	movs	r2, #170	; 0xaa
 800195e:	21ee      	movs	r1, #238	; 0xee
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <readCalibrationBMP180+0x44>)
 8001962:	f005 fa6b 	bl	8006e3c <HAL_I2C_Mem_Read>
			calibDatas,
			22,
			1000 // If an error occur, change this with HAL_MAX_DELAY
			);

	fillData(calibDatas);
 8001966:	463b      	mov	r3, r7
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fc8f 	bl	800128c <fillData>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200002c4 	.word	0x200002c4

0800197c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	2101      	movs	r1, #1
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <SELECT+0x18>)
 8001986:	f004 fc63 	bl	8006250 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800198a:	2001      	movs	r0, #1
 800198c:	f004 f8ea 	bl	8005b64 <HAL_Delay>
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40010c00 	.word	0x40010c00

08001998 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800199c:	2201      	movs	r2, #1
 800199e:	2101      	movs	r1, #1
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <DESELECT+0x18>)
 80019a2:	f004 fc55 	bl	8006250 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f004 f8dc 	bl	8005b64 <HAL_Delay>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40010c00 	.word	0x40010c00

080019b4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019be:	bf00      	nop
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <SPI_TxByte+0x30>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d1f8      	bne.n	80019c0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80019ce:	1df9      	adds	r1, r7, #7
 80019d0:	2364      	movs	r3, #100	; 0x64
 80019d2:	2201      	movs	r2, #1
 80019d4:	4803      	ldr	r0, [pc, #12]	; (80019e4 <SPI_TxByte+0x30>)
 80019d6:	f008 faef 	bl	8009fb8 <HAL_SPI_Transmit>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000318 	.word	0x20000318

080019e8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019f4:	bf00      	nop
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <SPI_TxBuffer+0x30>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d1f8      	bne.n	80019f6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001a04:	887a      	ldrh	r2, [r7, #2]
 8001a06:	2364      	movs	r3, #100	; 0x64
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <SPI_TxBuffer+0x30>)
 8001a0c:	f008 fad4 	bl	8009fb8 <HAL_SPI_Transmit>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000318 	.word	0x20000318

08001a1c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001a22:	23ff      	movs	r3, #255	; 0xff
 8001a24:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a26:	bf00      	nop
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <SPI_RxByte+0x34>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d1f8      	bne.n	8001a28 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a36:	1dba      	adds	r2, r7, #6
 8001a38:	1df9      	adds	r1, r7, #7
 8001a3a:	2364      	movs	r3, #100	; 0x64
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	4803      	ldr	r0, [pc, #12]	; (8001a50 <SPI_RxByte+0x34>)
 8001a42:	f008 fbfc 	bl	800a23e <HAL_SPI_TransmitReceive>

	return data;
 8001a46:	79bb      	ldrb	r3, [r7, #6]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000318 	.word	0x20000318

08001a54 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001a5c:	f7ff ffde 	bl	8001a1c <SPI_RxByte>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	701a      	strb	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <SD_ReadyWait+0x30>)
 8001a78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a7c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001a7e:	f7ff ffcd 	bl	8001a1c <SPI_RxByte>
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2bff      	cmp	r3, #255	; 0xff
 8001a8a:	d004      	beq.n	8001a96 <SD_ReadyWait+0x26>
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SD_ReadyWait+0x30>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f3      	bne.n	8001a7e <SD_ReadyWait+0xe>

	return res;
 8001a96:	79fb      	ldrb	r3, [r7, #7]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20002594 	.word	0x20002594

08001aa4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001aaa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001aae:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001ab0:	f7ff ff72 	bl	8001998 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	e005      	b.n	8001ac6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001aba:	20ff      	movs	r0, #255	; 0xff
 8001abc:	f7ff ff7a 	bl	80019b4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	ddf6      	ble.n	8001aba <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001acc:	f7ff ff56 	bl	800197c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001ad0:	2340      	movs	r3, #64	; 0x40
 8001ad2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001ae4:	2395      	movs	r3, #149	; 0x95
 8001ae6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2106      	movs	r1, #6
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff7b 	bl	80019e8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001af2:	e002      	b.n	8001afa <SD_PowerOn+0x56>
	{
		cnt--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001afa:	f7ff ff8f 	bl	8001a1c <SPI_RxByte>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d002      	beq.n	8001b0a <SD_PowerOn+0x66>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f4      	bne.n	8001af4 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001b0a:	f7ff ff45 	bl	8001998 <DESELECT>
	SPI_TxByte(0XFF);
 8001b0e:	20ff      	movs	r0, #255	; 0xff
 8001b10:	f7ff ff50 	bl	80019b4 <SPI_TxByte>

	PowerFlag = 1;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <SD_PowerOn+0x80>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000026d 	.word	0x2000026d

08001b28 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <SD_PowerOff+0x14>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	2000026d 	.word	0x2000026d

08001b40 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <SD_CheckPower+0x10>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	2000026d 	.word	0x2000026d

08001b54 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <SD_RxDataBlock+0x5c>)
 8001b60:	22c8      	movs	r2, #200	; 0xc8
 8001b62:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001b64:	f7ff ff5a 	bl	8001a1c <SPI_RxByte>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2bff      	cmp	r3, #255	; 0xff
 8001b70:	d104      	bne.n	8001b7c <SD_RxDataBlock+0x28>
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <SD_RxDataBlock+0x5c>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f3      	bne.n	8001b64 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	2bfe      	cmp	r3, #254	; 0xfe
 8001b80:	d001      	beq.n	8001b86 <SD_RxDataBlock+0x32>
 8001b82:	2300      	movs	r3, #0
 8001b84:	e00f      	b.n	8001ba6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff61 	bl	8001a54 <SPI_RxBytePtr>
	} while(len--);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	1e5a      	subs	r2, r3, #1
 8001b96:	603a      	str	r2, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f4      	bne.n	8001b86 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001b9c:	f7ff ff3e 	bl	8001a1c <SPI_RxByte>
	SPI_RxByte();
 8001ba0:	f7ff ff3c 	bl	8001a1c <SPI_RxByte>

	return TRUE;
 8001ba4:	2301      	movs	r3, #1
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20002593 	.word	0x20002593

08001bb4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001bc4:	f7ff ff54 	bl	8001a70 <SD_ReadyWait>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2bff      	cmp	r3, #255	; 0xff
 8001bcc:	d001      	beq.n	8001bd2 <SD_TxDataBlock+0x1e>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e02f      	b.n	8001c32 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff feed 	bl	80019b4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	2bfd      	cmp	r3, #253	; 0xfd
 8001bde:	d020      	beq.n	8001c22 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001be0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff feff 	bl	80019e8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001bea:	f7ff ff17 	bl	8001a1c <SPI_RxByte>
		SPI_RxByte();
 8001bee:	f7ff ff15 	bl	8001a1c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001bf2:	e00b      	b.n	8001c0c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001bf4:	f7ff ff12 	bl	8001a1c <SPI_RxByte>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	f003 031f 	and.w	r3, r3, #31
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d006      	beq.n	8001c14 <SD_TxDataBlock+0x60>
			i++;
 8001c06:	7bbb      	ldrb	r3, [r7, #14]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001c0c:	7bbb      	ldrb	r3, [r7, #14]
 8001c0e:	2b40      	cmp	r3, #64	; 0x40
 8001c10:	d9f0      	bls.n	8001bf4 <SD_TxDataBlock+0x40>
 8001c12:	e000      	b.n	8001c16 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001c14:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001c16:	bf00      	nop
 8001c18:	f7ff ff00 	bl	8001a1c <SPI_RxByte>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0fa      	beq.n	8001c18 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d101      	bne.n	8001c30 <SD_TxDataBlock+0x7c>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	6039      	str	r1, [r7, #0]
 8001c44:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001c46:	f7ff ff13 	bl	8001a70 <SD_ReadyWait>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2bff      	cmp	r3, #255	; 0xff
 8001c4e:	d001      	beq.n	8001c54 <SD_SendCmd+0x1a>
 8001c50:	23ff      	movs	r3, #255	; 0xff
 8001c52:	e042      	b.n	8001cda <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff feac 	bl	80019b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	0e1b      	lsrs	r3, r3, #24
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fea6 	bl	80019b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	0c1b      	lsrs	r3, r3, #16
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fea0 	bl	80019b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fe9a 	bl	80019b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fe95 	bl	80019b4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b40      	cmp	r3, #64	; 0x40
 8001c8e:	d102      	bne.n	8001c96 <SD_SendCmd+0x5c>
 8001c90:	2395      	movs	r3, #149	; 0x95
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e007      	b.n	8001ca6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b48      	cmp	r3, #72	; 0x48
 8001c9a:	d102      	bne.n	8001ca2 <SD_SendCmd+0x68>
 8001c9c:	2387      	movs	r3, #135	; 0x87
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e001      	b.n	8001ca6 <SD_SendCmd+0x6c>
	else crc = 1;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fe83 	bl	80019b4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	2b4c      	cmp	r3, #76	; 0x4c
 8001cb2:	d101      	bne.n	8001cb8 <SD_SendCmd+0x7e>
 8001cb4:	f7ff feb2 	bl	8001a1c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001cb8:	230a      	movs	r3, #10
 8001cba:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001cbc:	f7ff feae 	bl	8001a1c <SPI_RxByte>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001cc4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	da05      	bge.n	8001cd8 <SD_SendCmd+0x9e>
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	73bb      	strb	r3, [r7, #14]
 8001cd2:	7bbb      	ldrb	r3, [r7, #14]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f1      	bne.n	8001cbc <SD_SendCmd+0x82>

	return res;
 8001cd8:	7b7b      	ldrb	r3, [r7, #13]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SD_disk_initialize+0x14>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0d6      	b.n	8001ea6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001cf8:	4b6d      	ldr	r3, [pc, #436]	; (8001eb0 <SD_disk_initialize+0x1cc>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <SD_disk_initialize+0x2a>
 8001d06:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <SD_disk_initialize+0x1cc>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	e0cb      	b.n	8001ea6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8001d0e:	f7ff fec9 	bl	8001aa4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001d12:	f7ff fe33 	bl	800197c <SELECT>

	/* check disk type */
	type = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2040      	movs	r0, #64	; 0x40
 8001d1e:	f7ff ff8c 	bl	8001c3a <SD_SendCmd>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	f040 80a6 	bne.w	8001e76 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001d2a:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <SD_disk_initialize+0x1d0>)
 8001d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d30:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001d32:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001d36:	2048      	movs	r0, #72	; 0x48
 8001d38:	f7ff ff7f 	bl	8001c3a <SD_SendCmd>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d158      	bne.n	8001df4 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	73fb      	strb	r3, [r7, #15]
 8001d46:	e00c      	b.n	8001d62 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001d48:	7bfc      	ldrb	r4, [r7, #15]
 8001d4a:	f7ff fe67 	bl	8001a1c <SPI_RxByte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	461a      	mov	r2, r3
 8001d52:	f104 0310 	add.w	r3, r4, #16
 8001d56:	443b      	add	r3, r7
 8001d58:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d9ef      	bls.n	8001d48 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001d68:	7abb      	ldrb	r3, [r7, #10]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	f040 8083 	bne.w	8001e76 <SD_disk_initialize+0x192>
 8001d70:	7afb      	ldrb	r3, [r7, #11]
 8001d72:	2baa      	cmp	r3, #170	; 0xaa
 8001d74:	d17f      	bne.n	8001e76 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001d76:	2100      	movs	r1, #0
 8001d78:	2077      	movs	r0, #119	; 0x77
 8001d7a:	f7ff ff5e 	bl	8001c3a <SD_SendCmd>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d807      	bhi.n	8001d94 <SD_disk_initialize+0xb0>
 8001d84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d88:	2069      	movs	r0, #105	; 0x69
 8001d8a:	f7ff ff56 	bl	8001c3a <SD_SendCmd>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001d94:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <SD_disk_initialize+0x1d0>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1eb      	bne.n	8001d76 <SD_disk_initialize+0x92>
 8001d9e:	e000      	b.n	8001da2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001da0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001da2:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <SD_disk_initialize+0x1d0>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d064      	beq.n	8001e76 <SD_disk_initialize+0x192>
 8001dac:	2100      	movs	r1, #0
 8001dae:	207a      	movs	r0, #122	; 0x7a
 8001db0:	f7ff ff43 	bl	8001c3a <SD_SendCmd>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d15d      	bne.n	8001e76 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	e00c      	b.n	8001dda <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001dc0:	7bfc      	ldrb	r4, [r7, #15]
 8001dc2:	f7ff fe2b 	bl	8001a1c <SPI_RxByte>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f104 0310 	add.w	r3, r4, #16
 8001dce:	443b      	add	r3, r7
 8001dd0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d9ef      	bls.n	8001dc0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001de0:	7a3b      	ldrb	r3, [r7, #8]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <SD_disk_initialize+0x10a>
 8001dea:	230c      	movs	r3, #12
 8001dec:	e000      	b.n	8001df0 <SD_disk_initialize+0x10c>
 8001dee:	2304      	movs	r3, #4
 8001df0:	73bb      	strb	r3, [r7, #14]
 8001df2:	e040      	b.n	8001e76 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001df4:	2100      	movs	r1, #0
 8001df6:	2077      	movs	r0, #119	; 0x77
 8001df8:	f7ff ff1f 	bl	8001c3a <SD_SendCmd>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d808      	bhi.n	8001e14 <SD_disk_initialize+0x130>
 8001e02:	2100      	movs	r1, #0
 8001e04:	2069      	movs	r0, #105	; 0x69
 8001e06:	f7ff ff18 	bl	8001c3a <SD_SendCmd>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d801      	bhi.n	8001e14 <SD_disk_initialize+0x130>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e000      	b.n	8001e16 <SD_disk_initialize+0x132>
 8001e14:	2301      	movs	r3, #1
 8001e16:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001e18:	7bbb      	ldrb	r3, [r7, #14]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d10e      	bne.n	8001e3c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2077      	movs	r0, #119	; 0x77
 8001e22:	f7ff ff0a 	bl	8001c3a <SD_SendCmd>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d80e      	bhi.n	8001e4a <SD_disk_initialize+0x166>
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2069      	movs	r0, #105	; 0x69
 8001e30:	f7ff ff03 	bl	8001c3a <SD_SendCmd>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d107      	bne.n	8001e4a <SD_disk_initialize+0x166>
 8001e3a:	e00d      	b.n	8001e58 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2041      	movs	r0, #65	; 0x41
 8001e40:	f7ff fefb 	bl	8001c3a <SD_SendCmd>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <SD_disk_initialize+0x1d0>)
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e1      	bne.n	8001e18 <SD_disk_initialize+0x134>
 8001e54:	e000      	b.n	8001e58 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001e56:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <SD_disk_initialize+0x1d0>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <SD_disk_initialize+0x18e>
 8001e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e66:	2050      	movs	r0, #80	; 0x50
 8001e68:	f7ff fee7 	bl	8001c3a <SD_SendCmd>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <SD_disk_initialize+0x192>
 8001e72:	2300      	movs	r3, #0
 8001e74:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001e76:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <SD_disk_initialize+0x1d4>)
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001e7c:	f7ff fd8c 	bl	8001998 <DESELECT>
	SPI_RxByte();
 8001e80:	f7ff fdcc 	bl	8001a1c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001e84:	7bbb      	ldrb	r3, [r7, #14]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d008      	beq.n	8001e9c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <SD_disk_initialize+0x1cc>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <SD_disk_initialize+0x1cc>)
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	e001      	b.n	8001ea0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001e9c:	f7ff fe44 	bl	8001b28 <SD_PowerOff>
	}

	return Stat;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <SD_disk_initialize+0x1cc>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b2db      	uxtb	r3, r3
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20002593 	.word	0x20002593
 8001eb8:	2000026c 	.word	0x2000026c

08001ebc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <SD_disk_status+0x14>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e002      	b.n	8001ed6 <SD_disk_status+0x1a>
	return Stat;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <SD_disk_status+0x24>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	20000000 	.word	0x20000000

08001ee4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <SD_disk_read+0x1c>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <SD_disk_read+0x20>
 8001f00:	2304      	movs	r3, #4
 8001f02:	e051      	b.n	8001fa8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f04:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <SD_disk_read+0xcc>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <SD_disk_read+0x32>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e048      	b.n	8001fa8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001f16:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <SD_disk_read+0xd0>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d102      	bne.n	8001f28 <SD_disk_read+0x44>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	025b      	lsls	r3, r3, #9
 8001f26:	607b      	str	r3, [r7, #4]

	SELECT();
 8001f28:	f7ff fd28 	bl	800197c <SELECT>

	if (count == 1)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d111      	bne.n	8001f56 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	2051      	movs	r0, #81	; 0x51
 8001f36:	f7ff fe80 	bl	8001c3a <SD_SendCmd>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d129      	bne.n	8001f94 <SD_disk_read+0xb0>
 8001f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f44:	68b8      	ldr	r0, [r7, #8]
 8001f46:	f7ff fe05 	bl	8001b54 <SD_RxDataBlock>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d021      	beq.n	8001f94 <SD_disk_read+0xb0>
 8001f50:	2300      	movs	r3, #0
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	e01e      	b.n	8001f94 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	2052      	movs	r0, #82	; 0x52
 8001f5a:	f7ff fe6e 	bl	8001c3a <SD_SendCmd>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d117      	bne.n	8001f94 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001f64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f68:	68b8      	ldr	r0, [r7, #8]
 8001f6a:	f7ff fdf3 	bl	8001b54 <SD_RxDataBlock>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <SD_disk_read+0xa6>
				buff += 512;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f7a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ed      	bne.n	8001f64 <SD_disk_read+0x80>
 8001f88:	e000      	b.n	8001f8c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001f8a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	204c      	movs	r0, #76	; 0x4c
 8001f90:	f7ff fe53 	bl	8001c3a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001f94:	f7ff fd00 	bl	8001998 <DESELECT>
	SPI_RxByte();
 8001f98:	f7ff fd40 	bl	8001a1c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	bf14      	ite	ne
 8001fa2:	2301      	movne	r3, #1
 8001fa4:	2300      	moveq	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	2000026c 	.word	0x2000026c

08001fb8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <SD_disk_write+0x1c>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <SD_disk_write+0x20>
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	e06b      	b.n	80020b0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001fd8:	4b37      	ldr	r3, [pc, #220]	; (80020b8 <SD_disk_write+0x100>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <SD_disk_write+0x32>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e062      	b.n	80020b0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001fea:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <SD_disk_write+0x100>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <SD_disk_write+0x44>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e059      	b.n	80020b0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001ffc:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <SD_disk_write+0x104>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <SD_disk_write+0x56>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	025b      	lsls	r3, r3, #9
 800200c:	607b      	str	r3, [r7, #4]

	SELECT();
 800200e:	f7ff fcb5 	bl	800197c <SELECT>

	if (count == 1)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d110      	bne.n	800203a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	2058      	movs	r0, #88	; 0x58
 800201c:	f7ff fe0d 	bl	8001c3a <SD_SendCmd>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d13a      	bne.n	800209c <SD_disk_write+0xe4>
 8002026:	21fe      	movs	r1, #254	; 0xfe
 8002028:	68b8      	ldr	r0, [r7, #8]
 800202a:	f7ff fdc3 	bl	8001bb4 <SD_TxDataBlock>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d033      	beq.n	800209c <SD_disk_write+0xe4>
			count = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	e030      	b.n	800209c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <SD_disk_write+0x104>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002046:	2100      	movs	r1, #0
 8002048:	2077      	movs	r0, #119	; 0x77
 800204a:	f7ff fdf6 	bl	8001c3a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800204e:	6839      	ldr	r1, [r7, #0]
 8002050:	2057      	movs	r0, #87	; 0x57
 8002052:	f7ff fdf2 	bl	8001c3a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	2059      	movs	r0, #89	; 0x59
 800205a:	f7ff fdee 	bl	8001c3a <SD_SendCmd>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d11b      	bne.n	800209c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002064:	21fc      	movs	r1, #252	; 0xfc
 8002066:	68b8      	ldr	r0, [r7, #8]
 8002068:	f7ff fda4 	bl	8001bb4 <SD_TxDataBlock>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <SD_disk_write+0xd0>
				buff += 512;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002078:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	3b01      	subs	r3, #1
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ee      	bne.n	8002064 <SD_disk_write+0xac>
 8002086:	e000      	b.n	800208a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002088:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800208a:	21fd      	movs	r1, #253	; 0xfd
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff fd91 	bl	8001bb4 <SD_TxDataBlock>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <SD_disk_write+0xe4>
			{
				count = 1;
 8002098:	2301      	movs	r3, #1
 800209a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800209c:	f7ff fc7c 	bl	8001998 <DESELECT>
	SPI_RxByte();
 80020a0:	f7ff fcbc 	bl	8001a1c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000000 	.word	0x20000000
 80020bc:	2000026c 	.word	0x2000026c

080020c0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b08b      	sub	sp, #44	; 0x2c
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	603a      	str	r2, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	460b      	mov	r3, r1
 80020ce:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <SD_disk_ioctl+0x1e>
 80020da:	2304      	movs	r3, #4
 80020dc:	e115      	b.n	800230a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80020e4:	79bb      	ldrb	r3, [r7, #6]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d124      	bne.n	8002134 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d012      	beq.n	8002118 <SD_disk_ioctl+0x58>
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	dc1a      	bgt.n	800212c <SD_disk_ioctl+0x6c>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <SD_disk_ioctl+0x40>
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d006      	beq.n	800210c <SD_disk_ioctl+0x4c>
 80020fe:	e015      	b.n	800212c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002100:	f7ff fd12 	bl	8001b28 <SD_PowerOff>
			res = RES_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800210a:	e0fc      	b.n	8002306 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800210c:	f7ff fcca 	bl	8001aa4 <SD_PowerOn>
			res = RES_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002116:	e0f6      	b.n	8002306 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	1c5c      	adds	r4, r3, #1
 800211c:	f7ff fd10 	bl	8001b40 <SD_CheckPower>
 8002120:	4603      	mov	r3, r0
 8002122:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002124:	2300      	movs	r3, #0
 8002126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800212a:	e0ec      	b.n	8002306 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800212c:	2304      	movs	r3, #4
 800212e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002132:	e0e8      	b.n	8002306 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002134:	4b77      	ldr	r3, [pc, #476]	; (8002314 <SD_disk_ioctl+0x254>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <SD_disk_ioctl+0x86>
 8002142:	2303      	movs	r3, #3
 8002144:	e0e1      	b.n	800230a <SD_disk_ioctl+0x24a>

		SELECT();
 8002146:	f7ff fc19 	bl	800197c <SELECT>

		switch (ctrl)
 800214a:	79bb      	ldrb	r3, [r7, #6]
 800214c:	2b0d      	cmp	r3, #13
 800214e:	f200 80cb 	bhi.w	80022e8 <SD_disk_ioctl+0x228>
 8002152:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <SD_disk_ioctl+0x98>)
 8002154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002158:	08002253 	.word	0x08002253
 800215c:	08002191 	.word	0x08002191
 8002160:	08002243 	.word	0x08002243
 8002164:	080022e9 	.word	0x080022e9
 8002168:	080022e9 	.word	0x080022e9
 800216c:	080022e9 	.word	0x080022e9
 8002170:	080022e9 	.word	0x080022e9
 8002174:	080022e9 	.word	0x080022e9
 8002178:	080022e9 	.word	0x080022e9
 800217c:	080022e9 	.word	0x080022e9
 8002180:	080022e9 	.word	0x080022e9
 8002184:	08002265 	.word	0x08002265
 8002188:	08002289 	.word	0x08002289
 800218c:	080022ad 	.word	0x080022ad
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002190:	2100      	movs	r1, #0
 8002192:	2049      	movs	r0, #73	; 0x49
 8002194:	f7ff fd51 	bl	8001c3a <SD_SendCmd>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 80a8 	bne.w	80022f0 <SD_disk_ioctl+0x230>
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	2110      	movs	r1, #16
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fcd4 	bl	8001b54 <SD_RxDataBlock>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 809e 	beq.w	80022f0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80021b4:	7b3b      	ldrb	r3, [r7, #12]
 80021b6:	099b      	lsrs	r3, r3, #6
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d10e      	bne.n	80021dc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80021be:	7d7b      	ldrb	r3, [r7, #21]
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	7d3b      	ldrb	r3, [r7, #20]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80021d2:	8bfb      	ldrh	r3, [r7, #30]
 80021d4:	029a      	lsls	r2, r3, #10
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e02e      	b.n	800223a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80021dc:	7c7b      	ldrb	r3, [r7, #17]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	7dbb      	ldrb	r3, [r7, #22]
 80021e6:	09db      	lsrs	r3, r3, #7
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	7d7b      	ldrb	r3, [r7, #21]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f003 0306 	and.w	r3, r3, #6
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	3302      	adds	r3, #2
 8002200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002204:	7d3b      	ldrb	r3, [r7, #20]
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	b2db      	uxtb	r3, r3
 800220a:	b29a      	uxth	r2, r3
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	b29b      	uxth	r3, r3
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	b29b      	uxth	r3, r3
 8002214:	4413      	add	r3, r2
 8002216:	b29a      	uxth	r2, r3
 8002218:	7cbb      	ldrb	r3, [r7, #18]
 800221a:	029b      	lsls	r3, r3, #10
 800221c:	b29b      	uxth	r3, r3
 800221e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002222:	b29b      	uxth	r3, r3
 8002224:	4413      	add	r3, r2
 8002226:	b29b      	uxth	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800222c:	8bfa      	ldrh	r2, [r7, #30]
 800222e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002232:	3b09      	subs	r3, #9
 8002234:	409a      	lsls	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002240:	e056      	b.n	80022f0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002248:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002250:	e055      	b.n	80022fe <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002252:	f7ff fc0d 	bl	8001a70 <SD_ReadyWait>
 8002256:	4603      	mov	r3, r0
 8002258:	2bff      	cmp	r3, #255	; 0xff
 800225a:	d14b      	bne.n	80022f4 <SD_disk_ioctl+0x234>
 800225c:	2300      	movs	r3, #0
 800225e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002262:	e047      	b.n	80022f4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002264:	2100      	movs	r1, #0
 8002266:	2049      	movs	r0, #73	; 0x49
 8002268:	f7ff fce7 	bl	8001c3a <SD_SendCmd>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d142      	bne.n	80022f8 <SD_disk_ioctl+0x238>
 8002272:	2110      	movs	r1, #16
 8002274:	6a38      	ldr	r0, [r7, #32]
 8002276:	f7ff fc6d 	bl	8001b54 <SD_RxDataBlock>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d03b      	beq.n	80022f8 <SD_disk_ioctl+0x238>
 8002280:	2300      	movs	r3, #0
 8002282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002286:	e037      	b.n	80022f8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002288:	2100      	movs	r1, #0
 800228a:	204a      	movs	r0, #74	; 0x4a
 800228c:	f7ff fcd5 	bl	8001c3a <SD_SendCmd>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d132      	bne.n	80022fc <SD_disk_ioctl+0x23c>
 8002296:	2110      	movs	r1, #16
 8002298:	6a38      	ldr	r0, [r7, #32]
 800229a:	f7ff fc5b 	bl	8001b54 <SD_RxDataBlock>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d02b      	beq.n	80022fc <SD_disk_ioctl+0x23c>
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80022aa:	e027      	b.n	80022fc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80022ac:	2100      	movs	r1, #0
 80022ae:	207a      	movs	r0, #122	; 0x7a
 80022b0:	f7ff fcc3 	bl	8001c3a <SD_SendCmd>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d116      	bne.n	80022e8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80022c0:	e00b      	b.n	80022da <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80022c2:	6a3c      	ldr	r4, [r7, #32]
 80022c4:	1c63      	adds	r3, r4, #1
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	f7ff fba8 	bl	8001a1c <SPI_RxByte>
 80022cc:	4603      	mov	r3, r0
 80022ce:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80022d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022d4:	3301      	adds	r3, #1
 80022d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80022da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d9ef      	bls.n	80022c2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80022e8:	2304      	movs	r3, #4
 80022ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022ee:	e006      	b.n	80022fe <SD_disk_ioctl+0x23e>
			break;
 80022f0:	bf00      	nop
 80022f2:	e004      	b.n	80022fe <SD_disk_ioctl+0x23e>
			break;
 80022f4:	bf00      	nop
 80022f6:	e002      	b.n	80022fe <SD_disk_ioctl+0x23e>
			break;
 80022f8:	bf00      	nop
 80022fa:	e000      	b.n	80022fe <SD_disk_ioctl+0x23e>
			break;
 80022fc:	bf00      	nop
		}

		DESELECT();
 80022fe:	f7ff fb4b 	bl	8001998 <DESELECT>
		SPI_RxByte();
 8002302:	f7ff fb8b 	bl	8001a1c <SPI_RxByte>
	}

	return res;
 8002306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800230a:	4618      	mov	r0, r3
 800230c:	372c      	adds	r7, #44	; 0x2c
 800230e:	46bd      	mov	sp, r7
 8002310:	bd90      	pop	{r4, r7, pc}
 8002312:	bf00      	nop
 8002314:	20000000 	.word	0x20000000

08002318 <SysTick_Init>:
float** Matrix_multiplicator(float** matrix_1, float** matrix_2, int r1, int c1, int r2, int c2);
KF_return KF_alg(float**F, float** H, float** R, float** esti_state_prev, float** esti_cov_prev, float** measu_state, float sigma, float del_t);
scalar_KF_return scalar_KF_alg(float F_scalar, float H_scalar, float R_scalar, float esti_state_prev, float esti_cov_prev, float measu_state, float sigma_w, float del_t);

void SysTick_Init(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
    SysTick->LOAD = 0xFFFFFF; // 최 ?값으 ? ?  ?
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <SysTick_Init+0x20>)
 800231e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8002322:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;         // ?  ?   카운?   값을 0?   ? 초기?
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <SysTick_Init+0x20>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b03      	ldr	r3, [pc, #12]	; (8002338 <SysTick_Init+0x20>)
 800232c:	2205      	movs	r2, #5
 800232e:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_ENABLE_Msk; // CPU ?  ?  ?   그 ? ? ?  ?  ?   ? ???   ? ?  ?
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	e000e010 	.word	0xe000e010

0800233c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002344:	1d39      	adds	r1, r7, #4
 8002346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234a:	2201      	movs	r2, #1
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <__io_putchar+0x20>)
 800234e:	f009 fa81 	bl	800b854 <HAL_UART_Transmit>
  return ch;
 8002352:	687b      	ldr	r3, [r7, #4]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000448 	.word	0x20000448

08002360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002364:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8002368:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800236a:	f003 fb99 	bl	8005aa0 <HAL_Init>

  /* USER CODE BEGIN Init */
  SysTick_Init();
 800236e:	f7ff ffd3 	bl	8002318 <SysTick_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002372:	f001 fe55 	bl	8004020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002376:	f002 f869 	bl	800444c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800237a:	f002 f83d 	bl	80043f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800237e:	f001 fe91 	bl	80040a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002382:	f001 febd 	bl	8004100 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002386:	f001 fee9 	bl	800415c <MX_SPI1_Init>
  MX_TIM2_Init();
 800238a:	f001 ff1d 	bl	80041c8 <MX_TIM2_Init>
  MX_FATFS_Init();
 800238e:	f00a f835 	bl	800c3fc <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8002392:	f002 f807 	bl	80043a4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002396:	f001 ff8d 	bl	80042b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  initialBMP180();
 800239a:	f7fe fecf 	bl	800113c <initialBMP180>
  MPU6050_Init(&hi2c1);
 800239e:	48d8      	ldr	r0, [pc, #864]	; (8002700 <main+0x3a0>)
 80023a0:	f002 fd7a 	bl	8004e98 <MPU6050_Init>
  myMpuConfig.Accel_Full_Scale = AFS_SEL_16g;
 80023a4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80023a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023ac:	2203      	movs	r2, #3
 80023ae:	709a      	strb	r2, [r3, #2]
  myMpuConfig.ClockSource = Internal_8MHz;
 80023b0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80023b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
  myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 80023bc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80023c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023c4:	2201      	movs	r2, #1
 80023c6:	70da      	strb	r2, [r3, #3]
  myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 80023c8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80023cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023d0:	2201      	movs	r2, #1
 80023d2:	705a      	strb	r2, [r3, #1]
  myMpuConfig.Sleep_Mode_Bit = 0;
 80023d4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80023d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023dc:	2200      	movs	r2, #0
 80023de:	711a      	strb	r2, [r3, #4]
  MPU6050_Config(&myMpuConfig);
 80023e0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 fdab 	bl	8004f40 <MPU6050_Config>
  HAL_TIM_Base_Start(&htim2);
 80023ea:	48c6      	ldr	r0, [pc, #792]	; (8002704 <main+0x3a4>)
 80023ec:	f008 f9ce 	bl	800a78c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80023f0:	2100      	movs	r1, #0
 80023f2:	48c4      	ldr	r0, [pc, #784]	; (8002704 <main+0x3a4>)
 80023f4:	f008 fb16 	bl	800aa24 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80023f8:	48c3      	ldr	r0, [pc, #780]	; (8002708 <main+0x3a8>)
 80023fa:	f008 fa11 	bl	800a820 <HAL_TIM_Base_Start_IT>

  int Parachute = 0; // parachute deployment state
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  int start = 0;     // state of time out count
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  float accZ_raw, accY_raw, accZ_rot;
  float Z_velocity = 0.0f, Z_velgap = 0.0f, Z_stack = 0.0f, Z_velmean = 0.0f;
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
  // ?   ??? ?  ?   ?  ?   (LPF?? HPF ?  ?  )
  float alpha = 0.004f, beta = 0.996f;            // HPF ?  ?    LPF ?  ?   https://blog.naver.com/intheglass14/222777512235
 800242a:	4bb8      	ldr	r3, [pc, #736]	; (800270c <main+0x3ac>)
 800242c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8002430:	4bb7      	ldr	r3, [pc, #732]	; (8002710 <main+0x3b0>)
 8002432:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  float gyroAngleX = 0.0f, gyroAngleY = 0.0f;   // ?  ?   ??? ?  ?   ??? 추정?   각도
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  float accelAngleX = 0.0f, accelAngleY = 0.0f; //  ????  ?   ?  ?   ??? 추정?   각도
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  float compAngleX = 0.0f, compAngleY = 0.0f;   // ?   ??? ?  ?   ??? ?  ?   추정?   각도
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
  float AngleX = 0.0f, AngleY = 0.0f;           // Radian angle
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
  float Rocket_vector[3] = {0.0f};              // rocket vector
 8002476:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800247a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800247e:	461a      	mov	r2, r3
 8002480:	2300      	movs	r3, #0
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	6053      	str	r3, [r2, #4]
 8002486:	6093      	str	r3, [r2, #8]
  float Rocket_Angle = 0.0f;                    // with Z axis
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  float Z_unitvector[3] = {0.0f, 0.0f, 1.0f};
 8002490:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002494:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80024a2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80024b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80024b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024b8:	609a      	str	r2, [r3, #8]
  float a, b, c = 0.0f; // for acos variables
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
  float KF_z_pos = 0.0f;
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  float KF_z_acc_vel = 0.0f;
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
  uint32_t startTick, endTick, elapsedTicks, costTime_us;

  //eliminate gravity comp.
  float gravity_x = 0.0f;
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  float gravity_y = 0.0f;
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  float gravity_z = 0.0f;
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  //define lambda
  float lambda = 0.0f;
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

  //del_t should be changed into dt later
  //by simulation, we should get optimal del_t
  float del_t = 0.1;  //it means 100ms in operation, but in HW, we use ms scale
 80024f2:	4b88      	ldr	r3, [pc, #544]	; (8002714 <main+0x3b4>)
 80024f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                      //additionally, it should be revised into accurate del_t

  //iter counter
  int iter_temp = 1;  //begin num 1, because, we should use previous values
 80024f8:	2301      	movs	r3, #1
 80024fa:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

  //Gyro KF to eliminate gravity component in our MPU acc datas.
  float** R_mat_gyro = Matrix_gen_2dim(row_1, col_1);
 80024fe:	2101      	movs	r1, #1
 8002500:	2001      	movs	r0, #1
 8002502:	f002 f906 	bl	8004712 <Matrix_gen_2dim>
 8002506:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
  float** H_vec_gyro = Matrix_gen_2dim(row_1, col_2);
 800250a:	2102      	movs	r1, #2
 800250c:	2001      	movs	r0, #1
 800250e:	f002 f900 	bl	8004712 <Matrix_gen_2dim>
 8002512:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
  float** F_vec_gyro = Matrix_gen_2dim(row_2, col_2);
 8002516:	2102      	movs	r1, #2
 8002518:	2002      	movs	r0, #2
 800251a:	f002 f8fa 	bl	8004712 <Matrix_gen_2dim>
 800251e:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc

  R_mat_gyro[0][0] = 0.124;                                       //?  ?   ? ?  ?
 8002522:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a7b      	ldr	r2, [pc, #492]	; (8002718 <main+0x3b8>)
 800252a:	601a      	str	r2, [r3, #0]
  H_vec_gyro[0][0] = 1; H_vec_gyro[0][1] = 0;
 800252c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3304      	adds	r3, #4
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
  F_vec_gyro[0][0] = 1; F_vec_gyro[0][1] = 0; F_vec_gyro[1][0] = del_t; F_vec_gyro[1][1] = 1;
 8002546:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3304      	adds	r3, #4
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002564:	3304      	adds	r3, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002572:	3304      	adds	r3, #4
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3304      	adds	r3, #4
 8002578:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800257c:	601a      	str	r2, [r3, #0]

  float*** measu_Ang_acc_x = Matrix_gen(row_1, col_1, iter_mem);
 800257e:	220a      	movs	r2, #10
 8002580:	2101      	movs	r1, #1
 8002582:	2001      	movs	r0, #1
 8002584:	f001 ffee 	bl	8004564 <Matrix_gen>
 8002588:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
  float*** est_state_rho_x = Matrix_gen(row_2, col_1, iter_mem);
 800258c:	220a      	movs	r2, #10
 800258e:	2101      	movs	r1, #1
 8002590:	2002      	movs	r0, #2
 8002592:	f001 ffe7 	bl	8004564 <Matrix_gen>
 8002596:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
  float*** est_cov_rho_x = Matrix_gen(row_2, col_2, iter_mem);
 800259a:	220a      	movs	r2, #10
 800259c:	2102      	movs	r1, #2
 800259e:	2002      	movs	r0, #2
 80025a0:	f001 ffe0 	bl	8004564 <Matrix_gen>
 80025a4:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0

  float*** measu_Ang_acc_y = Matrix_gen(row_1, col_1, iter_mem);
 80025a8:	220a      	movs	r2, #10
 80025aa:	2101      	movs	r1, #1
 80025ac:	2001      	movs	r0, #1
 80025ae:	f001 ffd9 	bl	8004564 <Matrix_gen>
 80025b2:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
  float*** est_state_pi_y = Matrix_gen(row_2, col_1, iter_mem);
 80025b6:	220a      	movs	r2, #10
 80025b8:	2101      	movs	r1, #1
 80025ba:	2002      	movs	r0, #2
 80025bc:	f001 ffd2 	bl	8004564 <Matrix_gen>
 80025c0:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
  float*** est_cov_pi_y = Matrix_gen(row_2, col_2, iter_mem);
 80025c4:	220a      	movs	r2, #10
 80025c6:	2102      	movs	r1, #2
 80025c8:	2002      	movs	r0, #2
 80025ca:	f001 ffcb 	bl	8004564 <Matrix_gen>
 80025ce:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4

  float*** measu_Ang_acc_z = Matrix_gen(row_1, col_1, iter_mem);
 80025d2:	220a      	movs	r2, #10
 80025d4:	2101      	movs	r1, #1
 80025d6:	2001      	movs	r0, #1
 80025d8:	f001 ffc4 	bl	8004564 <Matrix_gen>
 80025dc:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
  float*** est_state_thea_z = Matrix_gen(row_2, col_1, iter_mem);
 80025e0:	220a      	movs	r2, #10
 80025e2:	2101      	movs	r1, #1
 80025e4:	2002      	movs	r0, #2
 80025e6:	f001 ffbd 	bl	8004564 <Matrix_gen>
 80025ea:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
  float*** est_cov_thea_z = Matrix_gen(row_2, col_2, iter_mem);
 80025ee:	220a      	movs	r2, #10
 80025f0:	2102      	movs	r1, #2
 80025f2:	2002      	movs	r0, #2
 80025f4:	f001 ffb6 	bl	8004564 <Matrix_gen>
 80025f8:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198

  //initializing
  est_state_rho_x[0][0][0] = myGyroScaled.x;      //changed Gyro data
 80025fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a45      	ldr	r2, [pc, #276]	; (800271c <main+0x3bc>)
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	601a      	str	r2, [r3, #0]
  est_cov_rho_x[0][0][0] = R_mat_gyro[0][0];
 800260a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	601a      	str	r2, [r3, #0]
  est_state_pi_y[0][0][0] = myGyroScaled.y;
 800261c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3d      	ldr	r2, [pc, #244]	; (800271c <main+0x3bc>)
 8002626:	6852      	ldr	r2, [r2, #4]
 8002628:	601a      	str	r2, [r3, #0]
  est_cov_pi_y[0][0][0] = R_mat_gyro[0][0];
 800262a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	601a      	str	r2, [r3, #0]
  est_state_thea_z[0][0][0] = myGyroScaled.z;
 800263c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a35      	ldr	r2, [pc, #212]	; (800271c <main+0x3bc>)
 8002646:	6892      	ldr	r2, [r2, #8]
 8002648:	601a      	str	r2, [r3, #0]
  est_cov_thea_z[0][0][0] = R_mat_gyro[0][0];
 800264a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	601a      	str	r2, [r3, #0]

  //=========need Kalman Gain and COV of estimation       R, F, H / Q : made in KF algorithm

  float** R_mat = Matrix_gen_2dim(row_1, col_1);
 800265c:	2101      	movs	r1, #1
 800265e:	2001      	movs	r0, #1
 8002660:	f002 f857 	bl	8004712 <Matrix_gen_2dim>
 8002664:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
  float** H_vec = Matrix_gen_2dim(row_1, col_2);
 8002668:	2102      	movs	r1, #2
 800266a:	2001      	movs	r0, #1
 800266c:	f002 f851 	bl	8004712 <Matrix_gen_2dim>
 8002670:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
  float** F_vec = Matrix_gen_2dim(row_2, col_2);
 8002674:	2102      	movs	r1, #2
 8002676:	2002      	movs	r0, #2
 8002678:	f002 f84b 	bl	8004712 <Matrix_gen_2dim>
 800267c:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
  R_mat[0][0] = 0.0144;
 8002680:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a26      	ldr	r2, [pc, #152]	; (8002720 <main+0x3c0>)
 8002688:	601a      	str	r2, [r3, #0]
  H_vec[0][0] = 1;H_vec[0][1] = 0;
 800268a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3304      	adds	r3, #4
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
  F_vec[0][0] = 1; F_vec[0][1] = 0; F_vec[1][0] = del_t; F_vec[1][1] = 1;
 80026a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3304      	adds	r3, #4
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80026c2:	3304      	adds	r3, #4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80026d0:	3304      	adds	r3, #4
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3304      	adds	r3, #4
 80026d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026da:	601a      	str	r2, [r3, #0]

  //for altitude, scalar KF
  float R_scalar = 0.025;  //by Average filter, var of R decrease into 1/10    //  in low power mode, its error var is 50cm
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <main+0x3c4>)
 80026de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  float H_scalar = 1, F_scalar = 1;
 80026e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  //sigma_w is defined by differentation between 2-steps


  //for X,Y
  //KF to estimate vel, acc. this cause linear approximation of postion of x,y
  float*** measu_acc_x = Matrix_gen(row_1, col_1, iter_mem);
 80026f2:	220a      	movs	r2, #10
 80026f4:	2101      	movs	r1, #1
 80026f6:	2001      	movs	r0, #1
 80026f8:	f001 ff34 	bl	8004564 <Matrix_gen>
 80026fc:	e014      	b.n	8002728 <main+0x3c8>
 80026fe:	bf00      	nop
 8002700:	20000270 	.word	0x20000270
 8002704:	20000370 	.word	0x20000370
 8002708:	200003b8 	.word	0x200003b8
 800270c:	3b83126f 	.word	0x3b83126f
 8002710:	3f7ef9db 	.word	0x3f7ef9db
 8002714:	3dcccccd 	.word	0x3dcccccd
 8002718:	3dfdf3b6 	.word	0x3dfdf3b6
 800271c:	20002524 	.word	0x20002524
 8002720:	3c6bedfa 	.word	0x3c6bedfa
 8002724:	3ccccccd 	.word	0x3ccccccd
 8002728:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
  float*** est_state_x = Matrix_gen(row_3, col_1, iter_mem);  //in est_x;
 800272c:	220a      	movs	r2, #10
 800272e:	2101      	movs	r1, #1
 8002730:	2003      	movs	r0, #3
 8002732:	f001 ff17 	bl	8004564 <Matrix_gen>
 8002736:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
  float*** est_cov_x = Matrix_gen(row_2, col_2, iter_mem);
 800273a:	220a      	movs	r2, #10
 800273c:	2102      	movs	r1, #2
 800273e:	2002      	movs	r0, #2
 8002740:	f001 ff10 	bl	8004564 <Matrix_gen>
 8002744:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174

  float*** measu_acc_y = Matrix_gen(row_1, col_1, iter_mem);
 8002748:	220a      	movs	r2, #10
 800274a:	2101      	movs	r1, #1
 800274c:	2001      	movs	r0, #1
 800274e:	f001 ff09 	bl	8004564 <Matrix_gen>
 8002752:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
  float*** est_state_y = Matrix_gen(row_3, col_1, iter_mem);
 8002756:	220a      	movs	r2, #10
 8002758:	2101      	movs	r1, #1
 800275a:	2003      	movs	r0, #3
 800275c:	f001 ff02 	bl	8004564 <Matrix_gen>
 8002760:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
  float*** est_cov_y = Matrix_gen(row_2, col_2, iter_mem);
 8002764:	220a      	movs	r2, #10
 8002766:	2102      	movs	r1, #2
 8002768:	2002      	movs	r0, #2
 800276a:	f001 fefb 	bl	8004564 <Matrix_gen>
 800276e:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

  //for Z
  //KF to estimate vel, acc. to store
  //scalar KF to estimate location based on BMP180 measurement data
  float*** measu_acc_z = Matrix_gen(row_1, col_1, iter_mem);
 8002772:	220a      	movs	r2, #10
 8002774:	2101      	movs	r1, #1
 8002776:	2001      	movs	r0, #1
 8002778:	f001 fef4 	bl	8004564 <Matrix_gen>
 800277c:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164

  float standard_alt;
  float*** average_pos_z = Matrix_gen(row_1, col_1, iter_mem);     //for barometer, we should apply Average filter
 8002780:	220a      	movs	r2, #10
 8002782:	2101      	movs	r1, #1
 8002784:	2001      	movs	r0, #1
 8002786:	f001 feed 	bl	8004564 <Matrix_gen>
 800278a:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

  float*** est_state_z = Matrix_gen(row_3, col_1, iter_mem);
 800278e:	220a      	movs	r2, #10
 8002790:	2101      	movs	r1, #1
 8002792:	2003      	movs	r0, #3
 8002794:	f001 fee6 	bl	8004564 <Matrix_gen>
 8002798:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
  float*** est_cov_z = Matrix_gen(row_2, col_2, iter_mem);     //for detecting location(scalar KF)
 800279c:	220a      	movs	r2, #10
 800279e:	2102      	movs	r1, #2
 80027a0:	2002      	movs	r0, #2
 80027a2:	f001 fedf 	bl	8004564 <Matrix_gen>
 80027a6:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
  float* est_cov_z_for_pos = (float*)malloc(iter_mem*sizeof(float));      //cov for scalar KF
 80027aa:	2028      	movs	r0, #40	; 0x28
 80027ac:	f010 fa78 	bl	8012ca0 <malloc>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  memset(est_cov_z_for_pos, 0, iter_mem * sizeof(float)); // before use malloc, init value!
 80027b6:	2228      	movs	r2, #40	; 0x28
 80027b8:	2100      	movs	r1, #0
 80027ba:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80027be:	f011 f99f 	bl	8013b00 <memset>
  //init call sensing values

  // mpu6050 part
  MPU6050_Get_Accel_Scale(&myAccelScaled);
 80027c2:	488d      	ldr	r0, [pc, #564]	; (80029f8 <main+0x698>)
 80027c4:	f002 fcd6 	bl	8005174 <MPU6050_Get_Accel_Scale>
  MPU6050_Get_Gyro_Scale(&myGyroScaled);
 80027c8:	488c      	ldr	r0, [pc, #560]	; (80029fc <main+0x69c>)
 80027ca:	f002 fd3d 	bl	8005248 <MPU6050_Get_Gyro_Scale>

  float tmp_values[10] = {0};
 80027ce:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80027d2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027d6:	4618      	mov	r0, r3
 80027d8:	2328      	movs	r3, #40	; 0x28
 80027da:	461a      	mov	r2, r3
 80027dc:	2100      	movs	r1, #0
 80027de:	f011 f98f 	bl	8013b00 <memset>
  for (int i = 0; i < 10; i++) {
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80027e8:	e01f      	b.n	800282a <main+0x4ca>

     //measure position 10 times
     //measu_pos_z[i][1][iter_temp] = ?   ? 측정 값코?  ;
     // bmp180 part
     temp = readTrueTemp();
 80027ea:	f7fe fcad 	bl	8001148 <readTrueTemp>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4a83      	ldr	r2, [pc, #524]	; (8002a00 <main+0x6a0>)
 80027f2:	6013      	str	r3, [r2, #0]
     press = readTruePress(0);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe fcb9 	bl	800116c <readTruePress>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a81      	ldr	r2, [pc, #516]	; (8002a04 <main+0x6a4>)
 80027fe:	6013      	str	r3, [r2, #0]
     altitude = readTrueAltitude(0);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe fcc5 	bl	8001190 <readTrueAltitude>
 8002806:	4603      	mov	r3, r0
 8002808:	4a7f      	ldr	r2, [pc, #508]	; (8002a08 <main+0x6a8>)
 800280a:	6013      	str	r3, [r2, #0]

     tmp_values[i] = altitude;
 800280c:	4b7e      	ldr	r3, [pc, #504]	; (8002a08 <main+0x6a8>)
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002814:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002818:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800281c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < 10; i++) {
 8002820:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002824:	3301      	adds	r3, #1
 8002826:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800282a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800282e:	2b09      	cmp	r3, #9
 8002830:	dddb      	ble.n	80027ea <main+0x48a>
  }
  standard_alt = average_filter(tmp_values);
 8002832:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002836:	4618      	mov	r0, r3
 8002838:	f001 ffd2 	bl	80047e0 <average_filter>
 800283c:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
  average_pos_z[0][0][0] = 0;     //relative altitude from lift off
 8002840:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	601a      	str	r2, [r3, #0]


  //initializing
  est_state_x[0][0][0] = myAccelScaled.x;
 800284e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a68      	ldr	r2, [pc, #416]	; (80029f8 <main+0x698>)
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	601a      	str	r2, [r3, #0]
  est_cov_x[0][0][0] = R_mat[0][0];
 800285c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	601a      	str	r2, [r3, #0]
  est_state_y[0][0][0] = myAccelScaled.y;
 800286e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a60      	ldr	r2, [pc, #384]	; (80029f8 <main+0x698>)
 8002878:	6852      	ldr	r2, [r2, #4]
 800287a:	601a      	str	r2, [r3, #0]
  est_cov_y[0][0][0] = R_mat[0][0];
 800287c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	601a      	str	r2, [r3, #0]
  est_state_z[0][0][0] = myAccelScaled.z - gravity_const;
 800288e:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <main+0x698>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fdc8 	bl	8000428 <__aeabi_f2d>
 8002898:	a355      	add	r3, pc, #340	; (adr r3, 80029f0 <main+0x690>)
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	f7fd fc63 	bl	8000168 <__aeabi_dsub>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681c      	ldr	r4, [r3, #0]
 80028b2:	f7fe f909 	bl	8000ac8 <__aeabi_d2f>
 80028b6:	4603      	mov	r3, r0
 80028b8:	6023      	str	r3, [r4, #0]
  est_cov_z[0][0][0] = R_mat[0][0];
 80028ba:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	601a      	str	r2, [r3, #0]
  //position initializing     for linear KF
  est_state_z[0][2][0] = average_pos_z[0][0][0];
 80028cc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3308      	adds	r3, #8
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	601a      	str	r2, [r3, #0]
  est_cov_z_for_pos[0] = R_scalar;
 80028e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80028e6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80028ea:	601a      	str	r2, [r3, #0]


  fresult = f_mount(&fs, "/", 1);
 80028ec:	2201      	movs	r2, #1
 80028ee:	4947      	ldr	r1, [pc, #284]	; (8002a0c <main+0x6ac>)
 80028f0:	4847      	ldr	r0, [pc, #284]	; (8002a10 <main+0x6b0>)
 80028f2:	f00c fa53 	bl	800ed9c <f_mount>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <main+0x6b4>)
 80028fc:	701a      	strb	r2, [r3, #0]

  /* Check free space */
  f_getfree("", &fre_clust, &pfs);
 80028fe:	4a46      	ldr	r2, [pc, #280]	; (8002a18 <main+0x6b8>)
 8002900:	4946      	ldr	r1, [pc, #280]	; (8002a1c <main+0x6bc>)
 8002902:	4847      	ldr	r0, [pc, #284]	; (8002a20 <main+0x6c0>)
 8002904:	f00d f8de 	bl	800fac4 <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002908:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <main+0x6b8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	3b02      	subs	r3, #2
 8002914:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <main+0x6b8>)
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800291c:	7892      	ldrb	r2, [r2, #2]
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fd5e 	bl	80003e4 <__aeabi_ui2d>
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <main+0x6c4>)
 800292e:	f7fd fdd3 	bl	80004d8 <__aeabi_dmul>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	f7fe f8a5 	bl	8000a88 <__aeabi_d2uiz>
 800293e:	4603      	mov	r3, r0
 8002940:	4a39      	ldr	r2, [pc, #228]	; (8002a28 <main+0x6c8>)
 8002942:	6013      	str	r3, [r2, #0]

  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002944:	4b34      	ldr	r3, [pc, #208]	; (8002a18 <main+0x6b8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294c:	789b      	ldrb	r3, [r3, #2]
 800294e:	461a      	mov	r2, r3
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <main+0x6bc>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fd43 	bl	80003e4 <__aeabi_ui2d>
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <main+0x6c4>)
 8002964:	f7fd fdb8 	bl	80004d8 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f7fe f88a 	bl	8000a88 <__aeabi_d2uiz>
 8002974:	4603      	mov	r3, r0
 8002976:	4a2d      	ldr	r2, [pc, #180]	; (8002a2c <main+0x6cc>)
 8002978:	6013      	str	r3, [r2, #0]

  /* Open file to write/ create a file if it doesn't exist */
  fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800297a:	2213      	movs	r2, #19
 800297c:	492c      	ldr	r1, [pc, #176]	; (8002a30 <main+0x6d0>)
 800297e:	482d      	ldr	r0, [pc, #180]	; (8002a34 <main+0x6d4>)
 8002980:	f00c fa56 	bl	800ee30 <f_open>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <main+0x6b4>)
 800298a:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
     startTick = SysTick->VAL; // ?  ?   ?   ? ???
 800298c:	4b2a      	ldr	r3, [pc, #168]	; (8002a38 <main+0x6d8>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    // mpu6050 part
     MPU6050_Get_Accel_Scale(&myAccelScaled);
 8002994:	4818      	ldr	r0, [pc, #96]	; (80029f8 <main+0x698>)
 8002996:	f002 fbed 	bl	8005174 <MPU6050_Get_Accel_Scale>
     MPU6050_Get_Gyro_Scale(&myGyroScaled);
 800299a:	4818      	ldr	r0, [pc, #96]	; (80029fc <main+0x69c>)
 800299c:	f002 fc54 	bl	8005248 <MPU6050_Get_Gyro_Scale>

   //store angular acc to matrix
   //
   // should elimnate off_set value of Gyro. vel.
   //
   measu_Ang_acc_x[iter_temp][0][0] = myGyroScaled.x;
 80029a0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029aa:	4413      	add	r3, r2
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a12      	ldr	r2, [pc, #72]	; (80029fc <main+0x69c>)
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	601a      	str	r2, [r3, #0]
   measu_Ang_acc_y[iter_temp][0][0] = myGyroScaled.y;
 80029b6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80029c0:	4413      	add	r3, r2
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <main+0x69c>)
 80029c8:	6852      	ldr	r2, [r2, #4]
 80029ca:	601a      	str	r2, [r3, #0]
   measu_Ang_acc_z[iter_temp][0][0] = myGyroScaled.z;
 80029cc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80029d6:	4413      	add	r3, r2
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a07      	ldr	r2, [pc, #28]	; (80029fc <main+0x69c>)
 80029de:	6892      	ldr	r2, [r2, #8]
 80029e0:	601a      	str	r2, [r3, #0]

    //Average Filter to optimize noise      to get positon of z
    for (int i = 0; i < 10;i++) {
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80029e8:	e050      	b.n	8002a8c <main+0x72c>
 80029ea:	bf00      	nop
 80029ec:	f3af 8000 	nop.w
 80029f0:	51eb851f 	.word	0x51eb851f
 80029f4:	40239eb8 	.word	0x40239eb8
 80029f8:	20002518 	.word	0x20002518
 80029fc:	20002524 	.word	0x20002524
 8002a00:	20000490 	.word	0x20000490
 8002a04:	20000494 	.word	0x20000494
 8002a08:	20000498 	.word	0x20000498
 8002a0c:	08015a30 	.word	0x08015a30
 8002a10:	200004a4 	.word	0x200004a4
 8002a14:	20002500 	.word	0x20002500
 8002a18:	20002508 	.word	0x20002508
 8002a1c:	2000250c 	.word	0x2000250c
 8002a20:	08015a34 	.word	0x08015a34
 8002a24:	3fe00000 	.word	0x3fe00000
 8002a28:	20002510 	.word	0x20002510
 8002a2c:	20002514 	.word	0x20002514
 8002a30:	08015a38 	.word	0x08015a38
 8002a34:	200014d4 	.word	0x200014d4
 8002a38:	e000e010 	.word	0xe000e010

        // bmp180 part
       temp = readTrueTemp();
 8002a3c:	f7fe fb84 	bl	8001148 <readTrueTemp>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a0f      	ldr	r2, [pc, #60]	; (8002a80 <main+0x720>)
 8002a44:	6013      	str	r3, [r2, #0]
       press = readTruePress(0);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fe fb90 	bl	800116c <readTruePress>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <main+0x724>)
 8002a50:	6013      	str	r3, [r2, #0]
       altitude = readTrueAltitude(0);
 8002a52:	2000      	movs	r0, #0
 8002a54:	f7fe fb9c 	bl	8001190 <readTrueAltitude>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <main+0x728>)
 8002a5c:	6013      	str	r3, [r2, #0]
        //measure position 10 times
        //measu_pos_z[i][1][iter_temp] = 위치 측정 값코드;

        tmp_values[i] = altitude;
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <main+0x728>)
 8002a60:	6819      	ldr	r1, [r3, #0]
 8002a62:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002a66:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a6a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 10;i++) {
 8002a72:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002a76:	3301      	adds	r3, #1
 8002a78:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002a7c:	e006      	b.n	8002a8c <main+0x72c>
 8002a7e:	bf00      	nop
 8002a80:	20000490 	.word	0x20000490
 8002a84:	20000494 	.word	0x20000494
 8002a88:	20000498 	.word	0x20000498
 8002a8c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002a90:	2b09      	cmp	r3, #9
 8002a92:	ddd3      	ble.n	8002a3c <main+0x6dc>
    }
    average_pos_z[iter_temp][0][0] = average_filter(tmp_values)-standard_alt;
 8002a94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 fea1 	bl	80047e0 <average_filter>
 8002a9e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002aa8:	4413      	add	r3, r2
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681c      	ldr	r4, [r3, #0]
 8002aae:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8002ab2:	f7fe f85d 	bl	8000b70 <__aeabi_fsub>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	6023      	str	r3, [r4, #0]



   //for x pitch ; rho
   KF_return KF_rho_x_vel_ang;
   float sigma_w_rho_x = measu_Ang_acc_x[iter_temp][0][0] - measu_Ang_acc_x[iter_temp - 1][0][0];
 8002aba:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ac4:	4413      	add	r3, r2
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002ad0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002adc:	4413      	add	r3, r2
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7fe f843 	bl	8000b70 <__aeabi_fsub>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
   KF_rho_x_vel_ang = KF_alg(F_vec_gyro, H_vec_gyro, R_mat_gyro, est_state_rho_x[iter_temp - 1], est_cov_rho_x[iter_temp - 1], measu_Ang_acc_x[iter_temp], sigma_w_rho_x, del_t);
 8002af0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002af4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002af8:	3b01      	subs	r3, #1
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b00:	4413      	add	r3, r2
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002b08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8002b14:	440b      	add	r3, r1
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8002b1c:	0089      	lsls	r1, r1, #2
 8002b1e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8002b22:	4401      	add	r1, r0
 8002b24:	6809      	ldr	r1, [r1, #0]
 8002b26:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8002b2a:	f5a0 74b8 	sub.w	r4, r0, #368	; 0x170
 8002b2e:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002b32:	9004      	str	r0, [sp, #16]
 8002b34:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8002b38:	9003      	str	r0, [sp, #12]
 8002b3a:	9102      	str	r1, [sp, #8]
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	9200      	str	r2, [sp, #0]
 8002b40:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002b44:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002b48:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f001 ffab 	bl	8004aa8 <KF_alg>

   est_state_rho_x[iter_temp][0][0] = KF_rho_x_vel_ang.estimate_state[0][0];
 8002b52:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002b56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8002b68:	440b      	add	r3, r1
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	601a      	str	r2, [r3, #0]
   est_state_rho_x[iter_temp][1][0] = KF_rho_x_vel_ang.estimate_state[1][0];
 8002b72:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002b76:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8002b8a:	440b      	add	r3, r1
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	601a      	str	r2, [r3, #0]

   //for y yaw ; pi
   KF_return KF_pi_y_vel_ang;
   float sigma_w_pi_y = measu_Ang_acc_y[iter_temp][0][0] - measu_Ang_acc_y[iter_temp - 1][0][0];
 8002b96:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002ba0:	4413      	add	r3, r2
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002bac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002bb8:	4413      	add	r3, r2
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f7fd ffd5 	bl	8000b70 <__aeabi_fsub>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   KF_pi_y_vel_ang = KF_alg(F_vec_gyro, H_vec_gyro, R_mat_gyro, est_state_pi_y[iter_temp - 1], est_cov_pi_y[iter_temp - 1], measu_Ang_acc_y[iter_temp], sigma_w_pi_y, del_t);
 8002bcc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002bd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002bdc:	4413      	add	r3, r2
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002be4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002be8:	3b01      	subs	r3, #1
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8002bf0:	440b      	add	r3, r1
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8002bf8:	0089      	lsls	r1, r1, #2
 8002bfa:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8002bfe:	4401      	add	r1, r0
 8002c00:	6809      	ldr	r1, [r1, #0]
 8002c02:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8002c06:	f5a0 74be 	sub.w	r4, r0, #380	; 0x17c
 8002c0a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002c0e:	9004      	str	r0, [sp, #16]
 8002c10:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8002c14:	9003      	str	r0, [sp, #12]
 8002c16:	9102      	str	r1, [sp, #8]
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	9200      	str	r2, [sp, #0]
 8002c1c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002c20:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002c24:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f001 ff3d 	bl	8004aa8 <KF_alg>
   est_state_pi_y[iter_temp][0][0] = KF_pi_y_vel_ang.estimate_state[0][0];
 8002c2e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002c32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8002c44:	440b      	add	r3, r1
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	601a      	str	r2, [r3, #0]
   est_state_pi_y[iter_temp][1][0] = KF_pi_y_vel_ang.estimate_state[1][0];
 8002c4e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002c52:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8002c66:	440b      	add	r3, r1
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	601a      	str	r2, [r3, #0]

   //for z roll ; thea (theata)
   KF_return KF_thea_z_vel_ang;
   float sigma_w_thea_z = measu_Ang_acc_z[iter_temp][0][0] - measu_Ang_acc_z[iter_temp - 1][0][0];
 8002c72:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002c7c:	4413      	add	r3, r2
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002c88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002c94:	4413      	add	r3, r2
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f7fd ff67 	bl	8000b70 <__aeabi_fsub>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   KF_thea_z_vel_ang = KF_alg(F_vec_gyro, H_vec_gyro, R_mat_gyro, est_state_thea_z[iter_temp - 1], est_cov_thea_z[iter_temp - 1], measu_Ang_acc_z[iter_temp], sigma_w_thea_z, del_t);
 8002ca8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002cac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002cb8:	4413      	add	r3, r2
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002cc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8002ccc:	440b      	add	r3, r1
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8002cd4:	0089      	lsls	r1, r1, #2
 8002cd6:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8002cda:	4401      	add	r1, r0
 8002cdc:	6809      	ldr	r1, [r1, #0]
 8002cde:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8002ce2:	f5a0 74c4 	sub.w	r4, r0, #392	; 0x188
 8002ce6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002cea:	9004      	str	r0, [sp, #16]
 8002cec:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8002cf0:	9003      	str	r0, [sp, #12]
 8002cf2:	9102      	str	r1, [sp, #8]
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	9200      	str	r2, [sp, #0]
 8002cf8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002cfc:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002d00:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8002d04:	4620      	mov	r0, r4
 8002d06:	f001 fecf 	bl	8004aa8 <KF_alg>
   est_state_thea_z[iter_temp][0][0] = KF_thea_z_vel_ang.estimate_state[0][0];
 8002d0a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002d0e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8002d20:	440b      	add	r3, r1
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	601a      	str	r2, [r3, #0]
   est_state_thea_z[iter_temp][1][0] = KF_thea_z_vel_ang.estimate_state[1][0];
 8002d2a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002d2e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	3304      	adds	r3, #4
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8002d42:	440b      	add	r3, r1
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3304      	adds	r3, #4
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	601a      	str	r2, [r3, #0]
   //we should generate solution of this problem.
   //230930
   // if we do not minimize error rates, we could not estimate our rocket's state

   //calculate acc comp by gravity
   if (est_state_thea_z[iter_temp][1][0]>(math_pi / 4)) {
 8002d4e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002d58:	4413      	add	r3, r2
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fb60 	bl	8000428 <__aeabi_f2d>
 8002d68:	a323      	add	r3, pc, #140	; (adr r3, 8002df8 <main+0xa98>)
 8002d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6e:	f7fd fe43 	bl	80009f8 <__aeabi_dcmpgt>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d043      	beq.n	8002e00 <main+0xaa0>
      //calc with sine    /use rho and thea
      lambda = (float)atan(tan((double)est_state_rho_x[iter_temp][1][0]) / sin((double)est_state_thea_z[iter_temp][1][0]));
 8002d78:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d82:	4413      	add	r3, r2
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3304      	adds	r3, #4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fb4b 	bl	8000428 <__aeabi_f2d>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f00d faff 	bl	801039c <tan>
 8002d9e:	4604      	mov	r4, r0
 8002da0:	460d      	mov	r5, r1
 8002da2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002dac:	4413      	add	r3, r2
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3304      	adds	r3, #4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fb36 	bl	8000428 <__aeabi_f2d>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f00d faa4 	bl	8010310 <sin>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4620      	mov	r0, r4
 8002dce:	4629      	mov	r1, r5
 8002dd0:	f7fd fcac 	bl	800072c <__aeabi_ddiv>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f00d f8c4 	bl	800ff68 <atan>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	f7fd fe6e 	bl	8000ac8 <__aeabi_d2f>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002df2:	e042      	b.n	8002e7a <main+0xb1a>
 8002df4:	f3af 8000 	nop.w
 8002df8:	54411744 	.word	0x54411744
 8002dfc:	3fe921fb 	.word	0x3fe921fb
   }
   else {
      //calc with cosine  /use pi and thea
      lambda = (float)atan(tan((double)est_state_pi_y[iter_temp][1][0]) / cos((double)est_state_thea_z[iter_temp][1][0]));
 8002e00:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002e0a:	4413      	add	r3, r2
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd fb07 	bl	8000428 <__aeabi_f2d>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	f00d fabb 	bl	801039c <tan>
 8002e26:	4604      	mov	r4, r0
 8002e28:	460d      	mov	r5, r1
 8002e2a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002e34:	4413      	add	r3, r2
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd faf2 	bl	8000428 <__aeabi_f2d>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f00d fa16 	bl	801027c <cos>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4620      	mov	r0, r4
 8002e56:	4629      	mov	r1, r5
 8002e58:	f7fd fc68 	bl	800072c <__aeabi_ddiv>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	f00d f880 	bl	800ff68 <atan>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f7fd fe2a 	bl	8000ac8 <__aeabi_d2f>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
   }

   //with lambda, we should calculate gravity comp of each axis.
   //gravity = 9.81m/s^2
   gravity_x = gravity_const * sin((double)lambda) * cos((double)est_state_thea_z[iter_temp][1][0]);
 8002e7a:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8002e7e:	f7fd fad3 	bl	8000428 <__aeabi_f2d>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f00d fa41 	bl	8010310 <sin>
 8002e8e:	a3cc      	add	r3, pc, #816	; (adr r3, 80031c0 <main+0xe60>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd fb20 	bl	80004d8 <__aeabi_dmul>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	461d      	mov	r5, r3
 8002ea0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002eaa:	4413      	add	r3, r2
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fab7 	bl	8000428 <__aeabi_f2d>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f00d f9db 	bl	801027c <cos>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4620      	mov	r0, r4
 8002ecc:	4629      	mov	r1, r5
 8002ece:	f7fd fb03 	bl	80004d8 <__aeabi_dmul>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7fd fdf5 	bl	8000ac8 <__aeabi_d2f>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   gravity_y = gravity_const * sin((double)lambda) * sin((double)est_state_thea_z[iter_temp][1][0]);
 8002ee4:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8002ee8:	f7fd fa9e 	bl	8000428 <__aeabi_f2d>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f00d fa0c 	bl	8010310 <sin>
 8002ef8:	a3b1      	add	r3, pc, #708	; (adr r3, 80031c0 <main+0xe60>)
 8002efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efe:	f7fd faeb 	bl	80004d8 <__aeabi_dmul>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4614      	mov	r4, r2
 8002f08:	461d      	mov	r5, r3
 8002f0a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002f14:	4413      	add	r3, r2
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fa82 	bl	8000428 <__aeabi_f2d>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f00d f9f0 	bl	8010310 <sin>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4620      	mov	r0, r4
 8002f36:	4629      	mov	r1, r5
 8002f38:	f7fd face 	bl	80004d8 <__aeabi_dmul>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7fd fdc0 	bl	8000ac8 <__aeabi_d2f>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   gravity_z = gravity_const * cos((double)lambda);
 8002f4e:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8002f52:	f7fd fa69 	bl	8000428 <__aeabi_f2d>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f00d f98d 	bl	801027c <cos>
 8002f62:	a397      	add	r3, pc, #604	; (adr r3, 80031c0 <main+0xe60>)
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	f7fd fab6 	bl	80004d8 <__aeabi_dmul>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f7fd fda8 	bl	8000ac8 <__aeabi_d2f>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc


   //store acc to matrix
   measu_acc_x[iter_temp][0][0] = myAccelScaled.x-gravity_x;
 8002f7e:	4b92      	ldr	r3, [pc, #584]	; (80031c8 <main+0xe68>)
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002f8c:	4413      	add	r3, r2
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681c      	ldr	r4, [r3, #0]
 8002f92:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8002f96:	f7fd fdeb 	bl	8000b70 <__aeabi_fsub>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6023      	str	r3, [r4, #0]
   measu_acc_y[iter_temp][0][0] = myAccelScaled.y-gravity_y;
 8002f9e:	4b8a      	ldr	r3, [pc, #552]	; (80031c8 <main+0xe68>)
 8002fa0:	6858      	ldr	r0, [r3, #4]
 8002fa2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8002fac:	4413      	add	r3, r2
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681c      	ldr	r4, [r3, #0]
 8002fb2:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8002fb6:	f7fd fddb 	bl	8000b70 <__aeabi_fsub>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	6023      	str	r3, [r4, #0]
   measu_acc_z[iter_temp][0][0] = myAccelScaled.z-gravity_z;
 8002fbe:	4b82      	ldr	r3, [pc, #520]	; (80031c8 <main+0xe68>)
 8002fc0:	6898      	ldr	r0, [r3, #8]
 8002fc2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8002fcc:	4413      	add	r3, r2
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681c      	ldr	r4, [r3, #0]
 8002fd2:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8002fd6:	f7fd fdcb 	bl	8000b70 <__aeabi_fsub>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	6023      	str	r3, [r4, #0]


   //for x
   KF_return KF_x_acc_vel;
   float sigma_w_x = measu_acc_x[iter_temp][0][0] - measu_acc_x[iter_temp - 1][0][0];
 8002fde:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002fe8:	4413      	add	r3, r2
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002ff4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003000:	4413      	add	r3, r2
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	f7fd fdb1 	bl	8000b70 <__aeabi_fsub>
 800300e:	4603      	mov	r3, r0
 8003010:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   KF_x_acc_vel = KF_alg(F_vec, H_vec, R_mat, est_state_x[iter_temp-1],est_cov_x[iter_temp-1],measu_acc_x[iter_temp], sigma_w_x, del_t);
 8003014:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003018:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800301c:	3b01      	subs	r3, #1
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003024:	4413      	add	r3, r2
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800302c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003030:	3b01      	subs	r3, #1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003038:	440b      	add	r3, r1
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8003040:	0089      	lsls	r1, r1, #2
 8003042:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8003046:	4401      	add	r1, r0
 8003048:	6809      	ldr	r1, [r1, #0]
 800304a:	f507 700e 	add.w	r0, r7, #568	; 0x238
 800304e:	f5a0 74ca 	sub.w	r4, r0, #404	; 0x194
 8003052:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8003056:	9004      	str	r0, [sp, #16]
 8003058:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800305c:	9003      	str	r0, [sp, #12]
 800305e:	9102      	str	r1, [sp, #8]
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	9200      	str	r2, [sp, #0]
 8003064:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003068:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800306c:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8003070:	4620      	mov	r0, r4
 8003072:	f001 fd19 	bl	8004aa8 <KF_alg>

   est_cov_x[iter_temp] = KF_x_acc_vel.estimate_cov;
 8003076:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003080:	4413      	add	r3, r2
 8003082:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8003086:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	601a      	str	r2, [r3, #0]
   //we can get KalmanGain but, I think that could be needed more computational efforts
   //x linear approximation with storage
   est_state_x[iter_temp][0][0] = KF_x_acc_vel.estimate_state[0][0];        //acc
 800308e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003092:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 80030a4:	440b      	add	r3, r1
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	601a      	str	r2, [r3, #0]
   est_state_x[iter_temp][1][0] = KF_x_acc_vel.estimate_state[1][0];        //vel
 80030ae:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80030b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 80030c6:	440b      	add	r3, r1
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3304      	adds	r3, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	601a      	str	r2, [r3, #0]
   est_state_x[iter_temp][2][0] = est_state_x[iter_temp - 1][2][0] + est_state_x[iter_temp - 1][1][0] * del_t + est_state_x[iter_temp - 1][0][0] * del_t * del_t / 2;
 80030d2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80030d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030da:	3b01      	subs	r3, #1
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80030e2:	4413      	add	r3, r2
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3308      	adds	r3, #8
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681c      	ldr	r4, [r3, #0]
 80030ec:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80030f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030f4:	3b01      	subs	r3, #1
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80030fc:	4413      	add	r3, r2
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3304      	adds	r3, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd fe3a 	bl	8000d84 <__aeabi_fmul>
 8003110:	4603      	mov	r3, r0
 8003112:	4619      	mov	r1, r3
 8003114:	4620      	mov	r0, r4
 8003116:	f7fd fd2d 	bl	8000b74 <__addsf3>
 800311a:	4603      	mov	r3, r0
 800311c:	461d      	mov	r5, r3
 800311e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003122:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003126:	3b01      	subs	r3, #1
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800312e:	4413      	add	r3, r2
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fe22 	bl	8000d84 <__aeabi_fmul>
 8003140:	4603      	mov	r3, r0
 8003142:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fe1c 	bl	8000d84 <__aeabi_fmul>
 800314c:	4603      	mov	r3, r0
 800314e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd feca 	bl	8000eec <__aeabi_fdiv>
 8003158:	4603      	mov	r3, r0
 800315a:	4619      	mov	r1, r3
 800315c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003166:	4413      	add	r3, r2
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3308      	adds	r3, #8
 800316c:	681c      	ldr	r4, [r3, #0]
 800316e:	4628      	mov	r0, r5
 8003170:	f7fd fd00 	bl	8000b74 <__addsf3>
 8003174:	4603      	mov	r3, r0
 8003176:	6023      	str	r3, [r4, #0]


   //for y
   KF_return KF_y_acc_vel;
   float sigma_w_y = measu_acc_y[iter_temp][0][0] - measu_acc_y[iter_temp - 1][0][0];
 8003178:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8003182:	4413      	add	r3, r2
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800318e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003192:	3b01      	subs	r3, #1
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800319a:	4413      	add	r3, r2
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80031a6:	f5a2 7480 	sub.w	r4, r2, #256	; 0x100
 80031aa:	4619      	mov	r1, r3
 80031ac:	f7fd fce0 	bl	8000b70 <__aeabi_fsub>
 80031b0:	4603      	mov	r3, r0
 80031b2:	6023      	str	r3, [r4, #0]
   KF_y_acc_vel = KF_alg(F_vec, H_vec, R_mat, est_state_y[iter_temp - 1], est_cov_y[iter_temp - 1], measu_acc_y[iter_temp], sigma_w_y, del_t);
 80031b4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80031b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031bc:	3b01      	subs	r3, #1
 80031be:	e005      	b.n	80031cc <main+0xe6c>
 80031c0:	51eb851f 	.word	0x51eb851f
 80031c4:	40239eb8 	.word	0x40239eb8
 80031c8:	20002518 	.word	0x20002518
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80031d2:	4413      	add	r3, r2
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80031da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031de:	3b01      	subs	r3, #1
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80031e6:	440b      	add	r3, r1
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 80031ee:	0089      	lsls	r1, r1, #2
 80031f0:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 80031f4:	4401      	add	r1, r0
 80031f6:	6809      	ldr	r1, [r1, #0]
 80031f8:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80031fc:	f5a0 74d0 	sub.w	r4, r0, #416	; 0x1a0
 8003200:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8003204:	9004      	str	r0, [sp, #16]
 8003206:	f507 700e 	add.w	r0, r7, #568	; 0x238
 800320a:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800320e:	6800      	ldr	r0, [r0, #0]
 8003210:	9003      	str	r0, [sp, #12]
 8003212:	9102      	str	r1, [sp, #8]
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	9200      	str	r2, [sp, #0]
 8003218:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800321c:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8003220:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8003224:	4620      	mov	r0, r4
 8003226:	f001 fc3f 	bl	8004aa8 <KF_alg>

   est_cov_y[iter_temp] = KF_y_acc_vel.estimate_cov;
 800322a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8003234:	4413      	add	r3, r2
 8003236:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800323a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	601a      	str	r2, [r3, #0]
   //we can get KalmanGain but, I think that could be needed more computational efforts
   //y linear approximation with storage
   est_state_y[iter_temp][0][0] = KF_y_acc_vel.estimate_state[0][0];        //acc
 8003242:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003246:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003258:	440b      	add	r3, r1
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	601a      	str	r2, [r3, #0]
   est_state_y[iter_temp][1][0] = KF_y_acc_vel.estimate_state[1][0];        //vel
 8003262:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003266:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800327a:	440b      	add	r3, r1
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3304      	adds	r3, #4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	601a      	str	r2, [r3, #0]
   est_state_y[iter_temp][2][0] = est_state_y[iter_temp - 1][2][0] + est_state_y[iter_temp - 1][1][0] * del_t + est_state_y[iter_temp - 1][0][0] * del_t * del_t / 2;
 8003286:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800328a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800328e:	3b01      	subs	r3, #1
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8003296:	4413      	add	r3, r2
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3308      	adds	r3, #8
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681c      	ldr	r4, [r3, #0]
 80032a0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80032a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032a8:	3b01      	subs	r3, #1
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80032b0:	4413      	add	r3, r2
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3304      	adds	r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd fd60 	bl	8000d84 <__aeabi_fmul>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4619      	mov	r1, r3
 80032c8:	4620      	mov	r0, r4
 80032ca:	f7fd fc53 	bl	8000b74 <__addsf3>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461d      	mov	r5, r3
 80032d2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80032d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032da:	3b01      	subs	r3, #1
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80032e2:	4413      	add	r3, r2
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd fd48 	bl	8000d84 <__aeabi_fmul>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd fd42 	bl	8000d84 <__aeabi_fmul>
 8003300:	4603      	mov	r3, r0
 8003302:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fdf0 	bl	8000eec <__aeabi_fdiv>
 800330c:	4603      	mov	r3, r0
 800330e:	4619      	mov	r1, r3
 8003310:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800331a:	4413      	add	r3, r2
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3308      	adds	r3, #8
 8003320:	681c      	ldr	r4, [r3, #0]
 8003322:	4628      	mov	r0, r5
 8003324:	f7fd fc26 	bl	8000b74 <__addsf3>
 8003328:	4603      	mov	r3, r0
 800332a:	6023      	str	r3, [r4, #0]
   //for z
   KF_return KF_z_acc_vel;
   scalar_KF_return KF_z_pos;

   //여기서 동적할당이 필요하려나??!
   float sigma_w_z_acc = measu_acc_z[iter_temp][0][0] - measu_acc_z[iter_temp - 1][0][0];
 800332c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003336:	4413      	add	r3, r2
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003346:	3b01      	subs	r3, #1
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800334e:	4413      	add	r3, r2
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800335a:	f5a2 7482 	sub.w	r4, r2, #260	; 0x104
 800335e:	4619      	mov	r1, r3
 8003360:	f7fd fc06 	bl	8000b70 <__aeabi_fsub>
 8003364:	4603      	mov	r3, r0
 8003366:	6023      	str	r3, [r4, #0]
   KF_z_acc_vel = KF_alg(F_vec, H_vec, R_mat, est_state_z[iter_temp - 1], est_cov_z[iter_temp - 1], measu_acc_z[iter_temp], sigma_w_z_acc, del_t);
 8003368:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800336c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003370:	3b01      	subs	r3, #1
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003378:	4413      	add	r3, r2
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003384:	3b01      	subs	r3, #1
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800338c:	440b      	add	r3, r1
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8003394:	0089      	lsls	r1, r1, #2
 8003396:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 800339a:	4401      	add	r1, r0
 800339c:	6809      	ldr	r1, [r1, #0]
 800339e:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80033a2:	f5a0 74d6 	sub.w	r4, r0, #428	; 0x1ac
 80033a6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80033aa:	9004      	str	r0, [sp, #16]
 80033ac:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80033b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80033b4:	6800      	ldr	r0, [r0, #0]
 80033b6:	9003      	str	r0, [sp, #12]
 80033b8:	9102      	str	r1, [sp, #8]
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	9200      	str	r2, [sp, #0]
 80033be:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80033c2:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80033c6:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 80033ca:	4620      	mov	r0, r4
 80033cc:	f001 fb6c 	bl	8004aa8 <KF_alg>

   est_cov_z[iter_temp] = KF_z_acc_vel.estimate_cov;
 80033d0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80033da:	4413      	add	r3, r2
 80033dc:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80033e0:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	601a      	str	r2, [r3, #0]
   //we can get KalmanGain but, I think that could be needed more computational efforts
   //y linear approximation with storage
   est_state_z[iter_temp][0][0] = KF_z_acc_vel.estimate_state[0][0];        //acc
 80033e8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80033ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80033fe:	440b      	add	r3, r1
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	601a      	str	r2, [r3, #0]
   est_state_z[iter_temp][1][0] = KF_z_acc_vel.estimate_state[1][0];
 8003408:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800340c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8003420:	440b      	add	r3, r1
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3304      	adds	r3, #4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	601a      	str	r2, [r3, #0]
   //vel
   //est_state_y[iter_temp][2][0] = est_state_y[iter_temp - 1][2][0] + est_state_y[iter_temp - 1][1][0] * del_t + est_state_y[iter_temp - 1][0][0] * del_t * del_t / 2;

   //scalar KF for position
   //scalar_KF_return scalar_KF_alg(float F_scalar, float H_scalar, float R_scalar, float esti_state_prev, float esti_cov_prev, float measu_state, float sigma_w, float del_t);
   float sigam_w_pos = average_pos_z[iter_temp][0][0] - average_pos_z[iter_temp-1][0][0];
 800342c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8003436:	4413      	add	r3, r2
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003442:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003446:	3b01      	subs	r3, #1
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800344e:	4413      	add	r3, r2
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800345a:	f5a2 7484 	sub.w	r4, r2, #264	; 0x108
 800345e:	4619      	mov	r1, r3
 8003460:	f7fd fb86 	bl	8000b70 <__aeabi_fsub>
 8003464:	4603      	mov	r3, r0
 8003466:	6023      	str	r3, [r4, #0]
   KF_z_pos = scalar_KF_alg(F_scalar, H_scalar, R_scalar, est_state_z[iter_temp-1][2][0], est_cov_z_for_pos[iter_temp-1], average_pos_z[iter_temp][0][0], sigam_w_pos, del_t);
 8003468:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800346c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003470:	3b01      	subs	r3, #1
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003478:	4413      	add	r3, r2
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3308      	adds	r3, #8
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003486:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800348a:	3b01      	subs	r3, #1
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8003492:	440b      	add	r3, r1
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800349a:	0089      	lsls	r1, r1, #2
 800349c:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 80034a0:	4401      	add	r1, r0
 80034a2:	6809      	ldr	r1, [r1, #0]
 80034a4:	6809      	ldr	r1, [r1, #0]
 80034a6:	6809      	ldr	r1, [r1, #0]
 80034a8:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80034ac:	f5a0 74dc 	sub.w	r4, r0, #440	; 0x1b8
 80034b0:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80034b4:	9004      	str	r0, [sp, #16]
 80034b6:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80034ba:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80034be:	6800      	ldr	r0, [r0, #0]
 80034c0:	9003      	str	r0, [sp, #12]
 80034c2:	9102      	str	r1, [sp, #8]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	9200      	str	r2, [sp, #0]
 80034c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80034cc:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80034d0:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 80034d4:	4620      	mov	r0, r4
 80034d6:	f001 fc61 	bl	8004d9c <scalar_KF_alg>
   est_state_z[iter_temp][2][0] = KF_z_pos.estimate_state;
 80034da:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80034e4:	4413      	add	r3, r2
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3308      	adds	r3, #8
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80034f0:	f5a2 72dc 	sub.w	r2, r2, #440	; 0x1b8
 80034f4:	6852      	ldr	r2, [r2, #4]
 80034f6:	601a      	str	r2, [r3, #0]
   est_cov_z_for_pos[iter_temp] = KF_z_pos.estimate_cov;
 80034f8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003502:	4413      	add	r3, r2
 8003504:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8003508:	f5a2 72dc 	sub.w	r2, r2, #440	; 0x1b8
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	601a      	str	r2, [r3, #0]



   //this code display values of position
   printf("[ Pos_X : %.2f ]\n[ Pos_Y : %.2f ]\n[ Pos_Z : %.2f ]\n\n",est_state_x[iter_temp][2][0],est_state_y[iter_temp][2][0],est_state_z[iter_temp][2][0]);
 8003510:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800351a:	4413      	add	r3, r2
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3308      	adds	r3, #8
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fc ff7f 	bl	8000428 <__aeabi_f2d>
 800352a:	4680      	mov	r8, r0
 800352c:	4689      	mov	r9, r1
 800352e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8003538:	4413      	add	r3, r2
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3308      	adds	r3, #8
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fc ff70 	bl	8000428 <__aeabi_f2d>
 8003548:	4604      	mov	r4, r0
 800354a:	460d      	mov	r5, r1
 800354c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003556:	4413      	add	r3, r2
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3308      	adds	r3, #8
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7fc ff61 	bl	8000428 <__aeabi_f2d>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800356e:	e9cd 4500 	strd	r4, r5, [sp]
 8003572:	4642      	mov	r2, r8
 8003574:	464b      	mov	r3, r9
 8003576:	48c4      	ldr	r0, [pc, #784]	; (8003888 <main+0x1528>)
 8003578:	f010 f95c 	bl	8013834 <iprintf>
   printf("[ Ang_X : %.2f ]\n[ Ang_Y : %.2f ]\n[ Ang_Z : %.2f ]\n\n",est_state_rho_x[iter_temp][1][0],est_state_pi_y[iter_temp][1][0],est_state_thea_z[iter_temp][1][0]);
 800357c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003586:	4413      	add	r3, r2
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3304      	adds	r3, #4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc ff49 	bl	8000428 <__aeabi_f2d>
 8003596:	4680      	mov	r8, r0
 8003598:	4689      	mov	r9, r1
 800359a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80035a4:	4413      	add	r3, r2
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3304      	adds	r3, #4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fc ff3a 	bl	8000428 <__aeabi_f2d>
 80035b4:	4604      	mov	r4, r0
 80035b6:	460d      	mov	r5, r1
 80035b8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80035c2:	4413      	add	r3, r2
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3304      	adds	r3, #4
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fc ff2b 	bl	8000428 <__aeabi_f2d>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035da:	e9cd 4500 	strd	r4, r5, [sp]
 80035de:	4642      	mov	r2, r8
 80035e0:	464b      	mov	r3, r9
 80035e2:	48aa      	ldr	r0, [pc, #680]	; (800388c <main+0x152c>)
 80035e4:	f010 f926 	bl	8013834 <iprintf>
      start = 1;

      printf("Start deploying parachute system\r\n");
    }
*/
    if (Parachute == 0)  // set 1
 80035e8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f040 836c 	bne.w	8003cca <main+0x196a>
    {
      // deploy Parachute part^^7 https://yjhtpi.tistory.com/352 //https://blog.naver.com/intheglass14/222777512235 MPU6050 ?  보필?    ????   블로 ???  ???
      accelAngleX = atan2f(myAccelScaled.y, sqrtf(myAccelScaled.x * myAccelScaled.x + myAccelScaled.z * myAccelScaled.z)); //RAD
 80035f2:	4ba7      	ldr	r3, [pc, #668]	; (8003890 <main+0x1530>)
 80035f4:	685c      	ldr	r4, [r3, #4]
 80035f6:	4ba6      	ldr	r3, [pc, #664]	; (8003890 <main+0x1530>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4aa5      	ldr	r2, [pc, #660]	; (8003890 <main+0x1530>)
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7fd fbbf 	bl	8000d84 <__aeabi_fmul>
 8003606:	4603      	mov	r3, r0
 8003608:	461d      	mov	r5, r3
 800360a:	4ba1      	ldr	r3, [pc, #644]	; (8003890 <main+0x1530>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	4aa0      	ldr	r2, [pc, #640]	; (8003890 <main+0x1530>)
 8003610:	6892      	ldr	r2, [r2, #8]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f7fd fbb5 	bl	8000d84 <__aeabi_fmul>
 800361a:	4603      	mov	r3, r0
 800361c:	4619      	mov	r1, r3
 800361e:	4628      	mov	r0, r5
 8003620:	f7fd faa8 	bl	8000b74 <__addsf3>
 8003624:	4603      	mov	r3, r0
 8003626:	4618      	mov	r0, r3
 8003628:	f00c fee4 	bl	80103f4 <sqrtf>
 800362c:	4603      	mov	r3, r0
 800362e:	4619      	mov	r1, r3
 8003630:	4620      	mov	r0, r4
 8003632:	f00c fedd 	bl	80103f0 <atan2f>
 8003636:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
      accelAngleY = atan2f(-myAccelScaled.x, sqrtf(myAccelScaled.y * myAccelScaled.y + myAccelScaled.z * myAccelScaled.z));
 800363a:	4b95      	ldr	r3, [pc, #596]	; (8003890 <main+0x1530>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8003642:	4b93      	ldr	r3, [pc, #588]	; (8003890 <main+0x1530>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4a92      	ldr	r2, [pc, #584]	; (8003890 <main+0x1530>)
 8003648:	6852      	ldr	r2, [r2, #4]
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f7fd fb99 	bl	8000d84 <__aeabi_fmul>
 8003652:	4603      	mov	r3, r0
 8003654:	461d      	mov	r5, r3
 8003656:	4b8e      	ldr	r3, [pc, #568]	; (8003890 <main+0x1530>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	4a8d      	ldr	r2, [pc, #564]	; (8003890 <main+0x1530>)
 800365c:	6892      	ldr	r2, [r2, #8]
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd fb8f 	bl	8000d84 <__aeabi_fmul>
 8003666:	4603      	mov	r3, r0
 8003668:	4619      	mov	r1, r3
 800366a:	4628      	mov	r0, r5
 800366c:	f7fd fa82 	bl	8000b74 <__addsf3>
 8003670:	4603      	mov	r3, r0
 8003672:	4618      	mov	r0, r3
 8003674:	f00c febe 	bl	80103f4 <sqrtf>
 8003678:	4603      	mov	r3, r0
 800367a:	4619      	mov	r1, r3
 800367c:	4620      	mov	r0, r4
 800367e:	f00c feb7 	bl	80103f0 <atan2f>
 8003682:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0

      gyroAngleX += myGyroScaled.x * dt; //RAD
 8003686:	4b83      	ldr	r3, [pc, #524]	; (8003894 <main+0x1534>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a83      	ldr	r2, [pc, #524]	; (8003898 <main+0x1538>)
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd fb77 	bl	8000d84 <__aeabi_fmul>
 8003696:	4603      	mov	r3, r0
 8003698:	4619      	mov	r1, r3
 800369a:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 800369e:	f7fd fa69 	bl	8000b74 <__addsf3>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
      gyroAngleY += myGyroScaled.y * dt;
 80036a8:	4b7a      	ldr	r3, [pc, #488]	; (8003894 <main+0x1534>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4a7a      	ldr	r2, [pc, #488]	; (8003898 <main+0x1538>)
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd fb66 	bl	8000d84 <__aeabi_fmul>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4619      	mov	r1, r3
 80036bc:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 80036c0:	f7fd fa58 	bl	8000b74 <__addsf3>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
      //printf("accAngleX: %.2f accAngleY: %.2f\n",accelAngleX*RAD_TO_DEG, accelAngleY*RAD_TO_DEG);
//      HAL_Delay(50);
      printf("gyroAngleX: %.2f gyroAngleY: %.2f\n",gyroAngleX*RAD_TO_DEG, gyroAngleY*RAD_TO_DEG);
 80036ca:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 80036ce:	f7fc feab 	bl	8000428 <__aeabi_f2d>
 80036d2:	a36b      	add	r3, pc, #428	; (adr r3, 8003880 <main+0x1520>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f7fc fefe 	bl	80004d8 <__aeabi_dmul>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4614      	mov	r4, r2
 80036e2:	461d      	mov	r5, r3
 80036e4:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 80036e8:	f7fc fe9e 	bl	8000428 <__aeabi_f2d>
 80036ec:	a364      	add	r3, pc, #400	; (adr r3, 8003880 <main+0x1520>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f7fc fef1 	bl	80004d8 <__aeabi_dmul>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	e9cd 2300 	strd	r2, r3, [sp]
 80036fe:	4622      	mov	r2, r4
 8003700:	462b      	mov	r3, r5
 8003702:	4866      	ldr	r0, [pc, #408]	; (800389c <main+0x153c>)
 8003704:	f010 f896 	bl	8013834 <iprintf>
      //HAL_Delay(50);

      //HAL_Delay(50);
      compAngleX = beta * (compAngleX + gyroAngleX) + alpha * accelAngleX;
 8003708:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 800370c:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8003710:	f7fd fa30 	bl	8000b74 <__addsf3>
 8003714:	4603      	mov	r3, r0
 8003716:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd fb32 	bl	8000d84 <__aeabi_fmul>
 8003720:	4603      	mov	r3, r0
 8003722:	461c      	mov	r4, r3
 8003724:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8003728:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 800372c:	f7fd fb2a 	bl	8000d84 <__aeabi_fmul>
 8003730:	4603      	mov	r3, r0
 8003732:	4619      	mov	r1, r3
 8003734:	4620      	mov	r0, r4
 8003736:	f7fd fa1d 	bl	8000b74 <__addsf3>
 800373a:	4603      	mov	r3, r0
 800373c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
      compAngleY = beta * (compAngleY + gyroAngleY) + alpha * accelAngleY;
 8003740:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8003744:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8003748:	f7fd fa14 	bl	8000b74 <__addsf3>
 800374c:	4603      	mov	r3, r0
 800374e:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd fb16 	bl	8000d84 <__aeabi_fmul>
 8003758:	4603      	mov	r3, r0
 800375a:	461c      	mov	r4, r3
 800375c:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 8003760:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 8003764:	f7fd fb0e 	bl	8000d84 <__aeabi_fmul>
 8003768:	4603      	mov	r3, r0
 800376a:	4619      	mov	r1, r3
 800376c:	4620      	mov	r0, r4
 800376e:	f7fd fa01 	bl	8000b74 <__addsf3>
 8003772:	4603      	mov	r3, r0
 8003774:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
      AngleX = compAngleX * RAD_TO_DEG;
 8003778:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 800377c:	f7fc fe54 	bl	8000428 <__aeabi_f2d>
 8003780:	a33f      	add	r3, pc, #252	; (adr r3, 8003880 <main+0x1520>)
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f7fc fea7 	bl	80004d8 <__aeabi_dmul>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	f7fd f999 	bl	8000ac8 <__aeabi_d2f>
 8003796:	4603      	mov	r3, r0
 8003798:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      AngleY = compAngleY * RAD_TO_DEG;
 800379c:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80037a0:	f7fc fe42 	bl	8000428 <__aeabi_f2d>
 80037a4:	a336      	add	r3, pc, #216	; (adr r3, 8003880 <main+0x1520>)
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f7fc fe95 	bl	80004d8 <__aeabi_dmul>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	f7fd f987 	bl	8000ac8 <__aeabi_d2f>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
//      printf("AngleX: %.2f AngleY: %.2f\n",AngleX,AngleY);
      // Euler angle to vector https://stackoverflow.com/questions/1568568/how-to-convert-euler-angles-to-directional-vector
      Rocket_vector[0] = cos(AngleX) * cos(AngleY);
 80037c0:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 80037c4:	f7fc fe30 	bl	8000428 <__aeabi_f2d>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4610      	mov	r0, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	f00c fd54 	bl	801027c <cos>
 80037d4:	4604      	mov	r4, r0
 80037d6:	460d      	mov	r5, r1
 80037d8:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 80037dc:	f7fc fe24 	bl	8000428 <__aeabi_f2d>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	f00c fd48 	bl	801027c <cos>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4620      	mov	r0, r4
 80037f2:	4629      	mov	r1, r5
 80037f4:	f7fc fe70 	bl	80004d8 <__aeabi_dmul>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	f7fd f962 	bl	8000ac8 <__aeabi_d2f>
 8003804:	4602      	mov	r2, r0
 8003806:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800380a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800380e:	601a      	str	r2, [r3, #0]
      Rocket_vector[1] = sin(AngleX) * cos(AngleY);
 8003810:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8003814:	f7fc fe08 	bl	8000428 <__aeabi_f2d>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	f00c fd76 	bl	8010310 <sin>
 8003824:	4604      	mov	r4, r0
 8003826:	460d      	mov	r5, r1
 8003828:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800382c:	f7fc fdfc 	bl	8000428 <__aeabi_f2d>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4610      	mov	r0, r2
 8003836:	4619      	mov	r1, r3
 8003838:	f00c fd20 	bl	801027c <cos>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4620      	mov	r0, r4
 8003842:	4629      	mov	r1, r5
 8003844:	f7fc fe48 	bl	80004d8 <__aeabi_dmul>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	f7fd f93a 	bl	8000ac8 <__aeabi_d2f>
 8003854:	4602      	mov	r2, r0
 8003856:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800385a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800385e:	605a      	str	r2, [r3, #4]
      Rocket_vector[2] = sin(AngleY);
 8003860:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8003864:	f7fc fde0 	bl	8000428 <__aeabi_f2d>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	f00c fd4e 	bl	8010310 <sin>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	e010      	b.n	80038a0 <main+0x1540>
 800387e:	bf00      	nop
 8003880:	1e7967cb 	.word	0x1e7967cb
 8003884:	404ca5dc 	.word	0x404ca5dc
 8003888:	08015a44 	.word	0x08015a44
 800388c:	08015a7c 	.word	0x08015a7c
 8003890:	20002518 	.word	0x20002518
 8003894:	20002524 	.word	0x20002524
 8003898:	20000004 	.word	0x20000004
 800389c:	08015ab4 	.word	0x08015ab4
 80038a0:	f7fd f912 	bl	8000ac8 <__aeabi_d2f>
 80038a4:	4602      	mov	r2, r0
 80038a6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038ae:	609a      	str	r2, [r3, #8]
      a = Rocket_vector[0] * Z_unitvector[0] + Rocket_vector[1] * Z_unitvector[1] + Rocket_vector[2] * Z_unitvector[2];
 80038b0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f7fd fa5c 	bl	8000d84 <__aeabi_fmul>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461c      	mov	r4, r3
 80038d0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f7fd fa4c 	bl	8000d84 <__aeabi_fmul>
 80038ec:	4603      	mov	r3, r0
 80038ee:	4619      	mov	r1, r3
 80038f0:	4620      	mov	r0, r4
 80038f2:	f7fd f93f 	bl	8000b74 <__addsf3>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461d      	mov	r5, r3
 80038fa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003908:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f7fd fa37 	bl	8000d84 <__aeabi_fmul>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800391e:	f5a3 7486 	sub.w	r4, r3, #268	; 0x10c
 8003922:	4611      	mov	r1, r2
 8003924:	4628      	mov	r0, r5
 8003926:	f7fd f925 	bl	8000b74 <__addsf3>
 800392a:	4603      	mov	r3, r0
 800392c:	6023      	str	r3, [r4, #0]
      b = sqrt(Rocket_vector[0] * Rocket_vector[0] + Rocket_vector[1] * Rocket_vector[1] + Rocket_vector[2] * Rocket_vector[2]);
 800392e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800393c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f7fd fa1d 	bl	8000d84 <__aeabi_fmul>
 800394a:	4603      	mov	r3, r0
 800394c:	461c      	mov	r4, r3
 800394e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800395c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f7fd fa0d 	bl	8000d84 <__aeabi_fmul>
 800396a:	4603      	mov	r3, r0
 800396c:	4619      	mov	r1, r3
 800396e:	4620      	mov	r0, r4
 8003970:	f7fd f900 	bl	8000b74 <__addsf3>
 8003974:	4603      	mov	r3, r0
 8003976:	461c      	mov	r4, r3
 8003978:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800397c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f7fd f9f8 	bl	8000d84 <__aeabi_fmul>
 8003994:	4603      	mov	r3, r0
 8003996:	4619      	mov	r1, r3
 8003998:	4620      	mov	r0, r4
 800399a:	f7fd f8eb 	bl	8000b74 <__addsf3>
 800399e:	4603      	mov	r3, r0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fc fd41 	bl	8000428 <__aeabi_f2d>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	f00c fab5 	bl	800ff1c <sqrt>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	f507 710e 	add.w	r1, r7, #568	; 0x238
 80039ba:	f5a1 7488 	sub.w	r4, r1, #272	; 0x110
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	f7fd f881 	bl	8000ac8 <__aeabi_d2f>
 80039c6:	4603      	mov	r3, r0
 80039c8:	6023      	str	r3, [r4, #0]
      c = sqrt(Z_unitvector[0] * Z_unitvector[0] + Z_unitvector[1] * Z_unitvector[1] + Z_unitvector[2] * Z_unitvector[2]);
 80039ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80039ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80039d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7fd f9cf 	bl	8000d84 <__aeabi_fmul>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461c      	mov	r4, r3
 80039ea:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80039ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80039f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4619      	mov	r1, r3
 8003a00:	4610      	mov	r0, r2
 8003a02:	f7fd f9bf 	bl	8000d84 <__aeabi_fmul>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f7fd f8b2 	bl	8000b74 <__addsf3>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461c      	mov	r4, r3
 8003a14:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003a18:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003a22:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f7fd f9aa 	bl	8000d84 <__aeabi_fmul>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4619      	mov	r1, r3
 8003a34:	4620      	mov	r0, r4
 8003a36:	f7fd f89d 	bl	8000b74 <__addsf3>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fc fcf3 	bl	8000428 <__aeabi_f2d>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f00c fa67 	bl	800ff1c <sqrt>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	f7fd f837 	bl	8000ac8 <__aeabi_d2f>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      // final Rocket Angle; Z 축에?   ?  마나 벗어?  ?   ??? 계산
      Rocket_Angle = acos(a / (b * c)) * RAD_TO_DEG;
 8003a60:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003a64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003a68:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	f7fd f989 	bl	8000d84 <__aeabi_fmul>
 8003a72:	4603      	mov	r3, r0
 8003a74:	461a      	mov	r2, r3
 8003a76:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003a7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a7e:	4611      	mov	r1, r2
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	f7fd fa33 	bl	8000eec <__aeabi_fdiv>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fc fccd 	bl	8000428 <__aeabi_f2d>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	f00c f9b1 	bl	800fdfc <acos>
 8003a9a:	a3bd      	add	r3, pc, #756	; (adr r3, 8003d90 <main+0x1a30>)
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f7fc fd1a 	bl	80004d8 <__aeabi_dmul>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f7fd f80c 	bl	8000ac8 <__aeabi_d2f>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      /*printf("Rocket Angle: %.2f\r\n", Rocket_Angle); // test code
      HAL_Delay(500);*/
      //  ????  ?   ??? ?  ?  ?   ??? 방향?   ?  ?   ?  ?  ?  켜서 중력  ????  ?   ?   ???
      accZ_raw = myAccelScaled.y * cos(AngleX) - myAccelScaled.z * sin(AngleX); // z y
 8003ab6:	4bb8      	ldr	r3, [pc, #736]	; (8003d98 <main+0x1a38>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fc fcb4 	bl	8000428 <__aeabi_f2d>
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	460d      	mov	r5, r1
 8003ac4:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8003ac8:	f7fc fcae 	bl	8000428 <__aeabi_f2d>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f00c fbd2 	bl	801027c <cos>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4620      	mov	r0, r4
 8003ade:	4629      	mov	r1, r5
 8003ae0:	f7fc fcfa 	bl	80004d8 <__aeabi_dmul>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4690      	mov	r8, r2
 8003aea:	4699      	mov	r9, r3
 8003aec:	4baa      	ldr	r3, [pc, #680]	; (8003d98 <main+0x1a38>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fc fc99 	bl	8000428 <__aeabi_f2d>
 8003af6:	4604      	mov	r4, r0
 8003af8:	460d      	mov	r5, r1
 8003afa:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8003afe:	f7fc fc93 	bl	8000428 <__aeabi_f2d>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f00c fc01 	bl	8010310 <sin>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4620      	mov	r0, r4
 8003b14:	4629      	mov	r1, r5
 8003b16:	f7fc fcdf 	bl	80004d8 <__aeabi_dmul>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4640      	mov	r0, r8
 8003b20:	4649      	mov	r1, r9
 8003b22:	f7fc fb21 	bl	8000168 <__aeabi_dsub>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8003b2e:	f5a1 748a 	sub.w	r4, r1, #276	; 0x114
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	f7fc ffc7 	bl	8000ac8 <__aeabi_d2f>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	6023      	str	r3, [r4, #0]
      accY_raw = myAccelScaled.z * cos(AngleX) + myAccelScaled.y * sin(AngleX); // y z
 8003b3e:	4b96      	ldr	r3, [pc, #600]	; (8003d98 <main+0x1a38>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fc fc70 	bl	8000428 <__aeabi_f2d>
 8003b48:	4604      	mov	r4, r0
 8003b4a:	460d      	mov	r5, r1
 8003b4c:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8003b50:	f7fc fc6a 	bl	8000428 <__aeabi_f2d>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4610      	mov	r0, r2
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f00c fb8e 	bl	801027c <cos>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4620      	mov	r0, r4
 8003b66:	4629      	mov	r1, r5
 8003b68:	f7fc fcb6 	bl	80004d8 <__aeabi_dmul>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4690      	mov	r8, r2
 8003b72:	4699      	mov	r9, r3
 8003b74:	4b88      	ldr	r3, [pc, #544]	; (8003d98 <main+0x1a38>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fc fc55 	bl	8000428 <__aeabi_f2d>
 8003b7e:	4604      	mov	r4, r0
 8003b80:	460d      	mov	r5, r1
 8003b82:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8003b86:	f7fc fc4f 	bl	8000428 <__aeabi_f2d>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4610      	mov	r0, r2
 8003b90:	4619      	mov	r1, r3
 8003b92:	f00c fbbd 	bl	8010310 <sin>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	f7fc fc9b 	bl	80004d8 <__aeabi_dmul>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4640      	mov	r0, r8
 8003ba8:	4649      	mov	r1, r9
 8003baa:	f7fc fadf 	bl	800016c <__adddf3>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8003bb6:	f5a1 748c 	sub.w	r4, r1, #280	; 0x118
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f7fc ff83 	bl	8000ac8 <__aeabi_d2f>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	6023      	str	r3, [r4, #0]
      //  ????  ?   ??? ?  ?  ?   ??? 방향?   ?  ?   ?  ?  ?  켜서 중력  ????  ?   ?   ???
      accZ_rot = -accZ_raw * sin(AngleY) + accY_raw * cos(AngleY);
 8003bc6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003bca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fc fc27 	bl	8000428 <__aeabi_f2d>
 8003bda:	4604      	mov	r4, r0
 8003bdc:	460d      	mov	r5, r1
 8003bde:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8003be2:	f7fc fc21 	bl	8000428 <__aeabi_f2d>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	f00c fb8f 	bl	8010310 <sin>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	f7fc fc6d 	bl	80004d8 <__aeabi_dmul>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4690      	mov	r8, r2
 8003c04:	4699      	mov	r9, r3
 8003c06:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c0a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	f7fc fc0a 	bl	8000428 <__aeabi_f2d>
 8003c14:	4604      	mov	r4, r0
 8003c16:	460d      	mov	r5, r1
 8003c18:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8003c1c:	f7fc fc04 	bl	8000428 <__aeabi_f2d>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	f00c fb28 	bl	801027c <cos>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4620      	mov	r0, r4
 8003c32:	4629      	mov	r1, r5
 8003c34:	f7fc fc50 	bl	80004d8 <__aeabi_dmul>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4640      	mov	r0, r8
 8003c3e:	4649      	mov	r1, r9
 8003c40:	f7fc fa94 	bl	800016c <__adddf3>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8003c4c:	f5a1 748e 	sub.w	r4, r1, #284	; 0x11c
 8003c50:	4610      	mov	r0, r2
 8003c52:	4619      	mov	r1, r3
 8003c54:	f7fc ff38 	bl	8000ac8 <__aeabi_d2f>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	6023      	str	r3, [r4, #0]
      /*printf("pure Z acc : %.2f\r\n", accZ_rot); // test code
      HAL_Delay(500);*/
      // velocity part
      Z_stack -= Z_velocity;             // delete pre-prev vel
 8003c5c:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8003c60:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8003c64:	f7fc ff84 	bl	8000b70 <__aeabi_fsub>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
      Z_velocity += accZ_rot * dt;       // calc Zvelocity
 8003c6e:	4b4b      	ldr	r3, [pc, #300]	; (8003d9c <main+0x1a3c>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c7a:	6819      	ldr	r1, [r3, #0]
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	f7fd f881 	bl	8000d84 <__aeabi_fmul>
 8003c82:	4603      	mov	r3, r0
 8003c84:	4619      	mov	r1, r3
 8003c86:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8003c8a:	f7fc ff73 	bl	8000b74 <__addsf3>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      Z_stack += Z_velocity;             // add updated vel
 8003c94:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8003c98:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8003c9c:	f7fc ff6a 	bl	8000b74 <__addsf3>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
      Z_velmean = Z_stack / 2;           // mean of prev and
 8003ca6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003caa:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8003cae:	f7fd f91d 	bl	8000eec <__aeabi_fdiv>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
      Z_velgap = Z_velocity - Z_velmean; //
 8003cb8:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 8003cbc:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8003cc0:	f7fc ff56 	bl	8000b70 <__aeabi_fsub>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    }
    // deploy Parachute part^^7
    // sdcard part
    char buffer[100]; // Buffer to hold string
    // sdcard part
    sprintf(buffer,
 8003cca:	4b35      	ldr	r3, [pc, #212]	; (8003da0 <main+0x1a40>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc fbaa 	bl	8000428 <__aeabi_f2d>
 8003cd4:	e9c7 0104 	strd	r0, r1, [r7, #16]
            "altitude: %.2f Gyro: X=%.2f Y=%.2f Z=%.2f Accel: X=%.2f Y=%.2f Z=%.2f\r\n",
            altitude,
            myGyroScaled.x,
 8003cd8:	4b32      	ldr	r3, [pc, #200]	; (8003da4 <main+0x1a44>)
 8003cda:	681b      	ldr	r3, [r3, #0]
    sprintf(buffer,
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fc fba3 	bl	8000428 <__aeabi_f2d>
 8003ce2:	4680      	mov	r8, r0
 8003ce4:	4689      	mov	r9, r1
            myGyroScaled.y,
 8003ce6:	4b2f      	ldr	r3, [pc, #188]	; (8003da4 <main+0x1a44>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
    sprintf(buffer,
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fb9c 	bl	8000428 <__aeabi_f2d>
 8003cf0:	4682      	mov	sl, r0
 8003cf2:	468b      	mov	fp, r1
            myGyroScaled.z,
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	; (8003da4 <main+0x1a44>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
    sprintf(buffer,
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fc fb95 	bl	8000428 <__aeabi_f2d>
 8003cfe:	e9c7 0102 	strd	r0, r1, [r7, #8]
            myAccelScaled.x,
 8003d02:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <main+0x1a38>)
 8003d04:	681b      	ldr	r3, [r3, #0]
    sprintf(buffer,
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fc fb8e 	bl	8000428 <__aeabi_f2d>
 8003d0c:	e9c7 0100 	strd	r0, r1, [r7]
            myAccelScaled.y,
 8003d10:	4b21      	ldr	r3, [pc, #132]	; (8003d98 <main+0x1a38>)
 8003d12:	685b      	ldr	r3, [r3, #4]
    sprintf(buffer,
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fb87 	bl	8000428 <__aeabi_f2d>
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	460d      	mov	r5, r1
            myAccelScaled.z);
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <main+0x1a38>)
 8003d20:	689b      	ldr	r3, [r3, #8]
    sprintf(buffer,
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fb80 	bl	8000428 <__aeabi_f2d>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	f107 001c 	add.w	r0, r7, #28
 8003d30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003d34:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003d38:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003d3c:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003d40:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003d44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003d48:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003d4c:	e9cd 8900 	strd	r8, r9, [sp]
 8003d50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d54:	4914      	ldr	r1, [pc, #80]	; (8003da8 <main+0x1a48>)
 8003d56:	f00f fddb 	bl	8013910 <siprintf>
    if (fresult == FR_OK)
 8003d5a:	4b14      	ldr	r3, [pc, #80]	; (8003dac <main+0x1a4c>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d12a      	bne.n	8003db8 <main+0x1a58>
    {
      fresult = f_write(&fil, buffer, strlen(buffer), &bw); // Write the string to file
 8003d62:	f107 031c 	add.w	r3, r7, #28
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc f9f2 	bl	8000150 <strlen>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	f107 011c 	add.w	r1, r7, #28
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <main+0x1a50>)
 8003d74:	480f      	ldr	r0, [pc, #60]	; (8003db4 <main+0x1a54>)
 8003d76:	f00b fb73 	bl	800f460 <f_write>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <main+0x1a4c>)
 8003d80:	701a      	strb	r2, [r3, #0]
      f_sync(&fil);                                         // Ensure data is written and saved
 8003d82:	480c      	ldr	r0, [pc, #48]	; (8003db4 <main+0x1a54>)
 8003d84:	f00b fda5 	bl	800f8d2 <f_sync>
 8003d88:	e016      	b.n	8003db8 <main+0x1a58>
 8003d8a:	bf00      	nop
 8003d8c:	f3af 8000 	nop.w
 8003d90:	1e7967cb 	.word	0x1e7967cb
 8003d94:	404ca5dc 	.word	0x404ca5dc
 8003d98:	20002518 	.word	0x20002518
 8003d9c:	20000004 	.word	0x20000004
 8003da0:	20000498 	.word	0x20000498
 8003da4:	20002524 	.word	0x20002524
 8003da8:	08015ad8 	.word	0x08015ad8
 8003dac:	20002500 	.word	0x20002500
 8003db0:	20002504 	.word	0x20002504
 8003db4:	200014d4 	.word	0x200014d4
    }


    //free dy. memory...
    //memory free in here
   Matrix_free_2dim(KF_z_acc_vel.Kalman_Gain, row_2);
 8003db8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003dbc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fcec 	bl	80047a2 <Matrix_free_2dim>
   Matrix_free_2dim(KF_z_acc_vel.estimate_state, row_2);
 8003dca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003dce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fce3 	bl	80047a2 <Matrix_free_2dim>
   Matrix_free_2dim(KF_z_acc_vel.estimate_cov, row_2);
 8003ddc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003de0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2102      	movs	r1, #2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fcda 	bl	80047a2 <Matrix_free_2dim>

   Matrix_free_2dim(KF_y_acc_vel.Kalman_Gain, row_2);
 8003dee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003df2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2102      	movs	r1, #2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fcd1 	bl	80047a2 <Matrix_free_2dim>
   Matrix_free_2dim(KF_y_acc_vel.estimate_state, row_2);
 8003e00:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e04:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fcc8 	bl	80047a2 <Matrix_free_2dim>
   Matrix_free_2dim(KF_y_acc_vel.estimate_cov, row_2);
 8003e12:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e16:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fcbf 	bl	80047a2 <Matrix_free_2dim>

   Matrix_free_2dim(KF_x_acc_vel.Kalman_Gain, row_2);
 8003e24:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e28:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2102      	movs	r1, #2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fcb6 	bl	80047a2 <Matrix_free_2dim>
   Matrix_free_2dim(KF_x_acc_vel.estimate_state, row_2);
 8003e36:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2102      	movs	r1, #2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fcad 	bl	80047a2 <Matrix_free_2dim>
   Matrix_free_2dim(KF_x_acc_vel.estimate_cov, row_2);
 8003e48:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e4c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2102      	movs	r1, #2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fca4 	bl	80047a2 <Matrix_free_2dim>


   //to escape endless while.

   if (iter_temp*tmp_count == iter) {   //when arrives in 1000, escape while
 8003e5a:	4b6d      	ldr	r3, [pc, #436]	; (8004010 <main+0x1cb0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e6a:	d027      	beq.n	8003ebc <main+0x1b5c>
   break;
   }
   //upper iter 500 and less than 3 m
   if ((average_pos_z[iter_temp][0][0] < 3) && (iter_temp > 500)) {
 8003e6c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8003e76:	4413      	add	r3, r2
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4965      	ldr	r1, [pc, #404]	; (8004014 <main+0x1cb4>)
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fd f91d 	bl	80010c0 <__aeabi_fcmplt>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d004      	beq.n	8003e96 <main+0x1b36>
 8003e8c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003e90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e94:	dc14      	bgt.n	8003ec0 <main+0x1b60>
   ////caution : should store in sd card when iter_temp arrives to value of 10
   ////caution : should store in sd card when iter_temp arrives to value of 10
   ////caution : should store in sd card when iter_temp arrives to value of 10
   ////caution : should store in sd card when iter_temp arrives to value of 10
   ////caution : should store in sd card when iter_temp arrives to value of 10
   if (iter_temp == 10)
 8003e96:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003e9a:	2b0a      	cmp	r3, #10
 8003e9c:	d102      	bne.n	8003ea4 <main+0x1b44>
      iter_temp = 0;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
   iter_temp++;
 8003ea4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
   tmp_count++;
 8003eae:	4b58      	ldr	r3, [pc, #352]	; (8004010 <main+0x1cb0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	4a56      	ldr	r2, [pc, #344]	; (8004010 <main+0x1cb0>)
 8003eb6:	6013      	str	r3, [r2, #0]
  {
 8003eb8:	f7fe bd68 	b.w	800298c <main+0x62c>
   break;
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <main+0x1b62>
   break;
 8003ec0:	bf00      	nop
    // sdcard part
  }

  // sdcard part
  if (fresult == FR_OK)
 8003ec2:	4b55      	ldr	r3, [pc, #340]	; (8004018 <main+0x1cb8>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <main+0x1b78>
  {
   fresult = f_close(&fil);
 8003eca:	4854      	ldr	r0, [pc, #336]	; (800401c <main+0x1cbc>)
 8003ecc:	f00b fdcf 	bl	800fa6e <f_close>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4b50      	ldr	r3, [pc, #320]	; (8004018 <main+0x1cb8>)
 8003ed6:	701a      	strb	r2, [r3, #0]
  }
  // sdcard part


  // free the memory
  free(est_cov_z_for_pos);
 8003ed8:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8003edc:	f00e fee8 	bl	8012cb0 <free>

  Matrix_free(est_cov_z, row_2, iter_mem);
 8003ee0:	220a      	movs	r2, #10
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8003ee8:	f000 fbde 	bl	80046a8 <Matrix_free>
  Matrix_free(est_state_z, row_3, iter_mem);  // Free the allocated memory
 8003eec:	220a      	movs	r2, #10
 8003eee:	2103      	movs	r1, #3
 8003ef0:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8003ef4:	f000 fbd8 	bl	80046a8 <Matrix_free>
  Matrix_free(average_pos_z, row_1, iter_mem);
 8003ef8:	220a      	movs	r2, #10
 8003efa:	2101      	movs	r1, #1
 8003efc:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 8003f00:	f000 fbd2 	bl	80046a8 <Matrix_free>
  Matrix_free(measu_acc_z, row_1, iter_mem);
 8003f04:	220a      	movs	r2, #10
 8003f06:	2101      	movs	r1, #1
 8003f08:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8003f0c:	f000 fbcc 	bl	80046a8 <Matrix_free>

  Matrix_free(est_cov_y, row_2, iter_mem);
 8003f10:	220a      	movs	r2, #10
 8003f12:	2102      	movs	r1, #2
 8003f14:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8003f18:	f000 fbc6 	bl	80046a8 <Matrix_free>
  Matrix_free(est_state_y, row_3, iter_mem);  // Free the allocated memory
 8003f1c:	220a      	movs	r2, #10
 8003f1e:	2103      	movs	r1, #3
 8003f20:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8003f24:	f000 fbc0 	bl	80046a8 <Matrix_free>
  Matrix_free(measu_acc_y, row_1, iter_mem);
 8003f28:	220a      	movs	r2, #10
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8003f30:	f000 fbba 	bl	80046a8 <Matrix_free>

  Matrix_free(est_cov_x, row_2, iter_mem);
 8003f34:	220a      	movs	r2, #10
 8003f36:	2102      	movs	r1, #2
 8003f38:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 8003f3c:	f000 fbb4 	bl	80046a8 <Matrix_free>
  Matrix_free(est_state_x, row_3, iter_mem);  // Free the allocated memory
 8003f40:	220a      	movs	r2, #10
 8003f42:	2103      	movs	r1, #3
 8003f44:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8003f48:	f000 fbae 	bl	80046a8 <Matrix_free>
  Matrix_free(measu_acc_x, row_1, iter_mem);
 8003f4c:	220a      	movs	r2, #10
 8003f4e:	2101      	movs	r1, #1
 8003f50:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8003f54:	f000 fba8 	bl	80046a8 <Matrix_free>

  Matrix_free_2dim(F_vec, row_2);
 8003f58:	2102      	movs	r1, #2
 8003f5a:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8003f5e:	f000 fc20 	bl	80047a2 <Matrix_free_2dim>
  Matrix_free_2dim(H_vec, row_1);
 8003f62:	2101      	movs	r1, #1
 8003f64:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8003f68:	f000 fc1b 	bl	80047a2 <Matrix_free_2dim>
  Matrix_free_2dim(R_mat, row_1);
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8003f72:	f000 fc16 	bl	80047a2 <Matrix_free_2dim>

  Matrix_free(est_cov_thea_z, row_2, iter_mem);
 8003f76:	220a      	movs	r2, #10
 8003f78:	2102      	movs	r1, #2
 8003f7a:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8003f7e:	f000 fb93 	bl	80046a8 <Matrix_free>
  Matrix_free(est_state_thea_z, row_2, iter_mem);
 8003f82:	220a      	movs	r2, #10
 8003f84:	2102      	movs	r1, #2
 8003f86:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8003f8a:	f000 fb8d 	bl	80046a8 <Matrix_free>
  Matrix_free(measu_Ang_acc_z, row_1, iter_mem);
 8003f8e:	220a      	movs	r2, #10
 8003f90:	2101      	movs	r1, #1
 8003f92:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8003f96:	f000 fb87 	bl	80046a8 <Matrix_free>

  Matrix_free(est_cov_pi_y, row_2, iter_mem);
 8003f9a:	220a      	movs	r2, #10
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8003fa2:	f000 fb81 	bl	80046a8 <Matrix_free>
  Matrix_free(est_state_pi_y, row_2, iter_mem);
 8003fa6:	220a      	movs	r2, #10
 8003fa8:	2102      	movs	r1, #2
 8003faa:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 8003fae:	f000 fb7b 	bl	80046a8 <Matrix_free>
  Matrix_free(measu_Ang_acc_y, row_1, iter_mem);
 8003fb2:	220a      	movs	r2, #10
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8003fba:	f000 fb75 	bl	80046a8 <Matrix_free>

  Matrix_free(est_cov_rho_x, row_2, iter_mem);
 8003fbe:	220a      	movs	r2, #10
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8003fc6:	f000 fb6f 	bl	80046a8 <Matrix_free>
  Matrix_free(est_state_rho_x, row_2, iter_mem);
 8003fca:	220a      	movs	r2, #10
 8003fcc:	2102      	movs	r1, #2
 8003fce:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8003fd2:	f000 fb69 	bl	80046a8 <Matrix_free>
  Matrix_free(measu_Ang_acc_x, row_1, iter_mem);
 8003fd6:	220a      	movs	r2, #10
 8003fd8:	2101      	movs	r1, #1
 8003fda:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8003fde:	f000 fb63 	bl	80046a8 <Matrix_free>

  Matrix_free_2dim(F_vec_gyro, row_2);
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8003fe8:	f000 fbdb 	bl	80047a2 <Matrix_free_2dim>
  Matrix_free_2dim(H_vec_gyro, row_1);
 8003fec:	2101      	movs	r1, #1
 8003fee:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8003ff2:	f000 fbd6 	bl	80047a2 <Matrix_free_2dim>
  Matrix_free_2dim(R_mat_gyro, row_1);
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8003ffc:	f000 fbd1 	bl	80047a2 <Matrix_free_2dim>

  return 0;
 8004000:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8004002:	4618      	mov	r0, r3
 8004004:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8004008:	46bd      	mov	sp, r7
 800400a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800400e:	bf00      	nop
 8004010:	200004a0 	.word	0x200004a0
 8004014:	40400000 	.word	0x40400000
 8004018:	20002500 	.word	0x20002500
 800401c:	200014d4 	.word	0x200014d4

08004020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b090      	sub	sp, #64	; 0x40
 8004024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004026:	f107 0318 	add.w	r3, r7, #24
 800402a:	2228      	movs	r2, #40	; 0x28
 800402c:	2100      	movs	r1, #0
 800402e:	4618      	mov	r0, r3
 8004030:	f00f fd66 	bl	8013b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004034:	1d3b      	adds	r3, r7, #4
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	605a      	str	r2, [r3, #4]
 800403c:	609a      	str	r2, [r3, #8]
 800403e:	60da      	str	r2, [r3, #12]
 8004040:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004042:	2302      	movs	r3, #2
 8004044:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004046:	2301      	movs	r3, #1
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800404a:	2310      	movs	r3, #16
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800404e:	2302      	movs	r3, #2
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8004052:	2300      	movs	r3, #0
 8004054:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004056:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800405c:	f107 0318 	add.w	r3, r7, #24
 8004060:	4618      	mov	r0, r3
 8004062:	f005 fb15 	bl	8009690 <HAL_RCC_OscConfig>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800406c:	f000 ff0f 	bl	8004e8e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004070:	230f      	movs	r3, #15
 8004072:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004074:	2302      	movs	r3, #2
 8004076:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800407c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	2102      	movs	r1, #2
 800408a:	4618      	mov	r0, r3
 800408c:	f005 fd82 	bl	8009b94 <HAL_RCC_ClockConfig>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8004096:	f000 fefa 	bl	8004e8e <Error_Handler>
  }
}
 800409a:	bf00      	nop
 800409c:	3740      	adds	r7, #64	; 0x40
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80040a8:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <MX_I2C1_Init+0x50>)
 80040aa:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <MX_I2C1_Init+0x54>)
 80040ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <MX_I2C1_Init+0x50>)
 80040b0:	4a12      	ldr	r2, [pc, #72]	; (80040fc <MX_I2C1_Init+0x58>)
 80040b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <MX_I2C1_Init+0x50>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80040ba:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <MX_I2C1_Init+0x50>)
 80040bc:	2200      	movs	r2, #0
 80040be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <MX_I2C1_Init+0x50>)
 80040c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <MX_I2C1_Init+0x50>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80040ce:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <MX_I2C1_Init+0x50>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040d4:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <MX_I2C1_Init+0x50>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <MX_I2C1_Init+0x50>)
 80040dc:	2200      	movs	r2, #0
 80040de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040e0:	4804      	ldr	r0, [pc, #16]	; (80040f4 <MX_I2C1_Init+0x50>)
 80040e2:	f002 f8ef 	bl	80062c4 <HAL_I2C_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80040ec:	f000 fecf 	bl	8004e8e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000270 	.word	0x20000270
 80040f8:	40005400 	.word	0x40005400
 80040fc:	000186a0 	.word	0x000186a0

08004100 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004104:	4b12      	ldr	r3, [pc, #72]	; (8004150 <MX_I2C2_Init+0x50>)
 8004106:	4a13      	ldr	r2, [pc, #76]	; (8004154 <MX_I2C2_Init+0x54>)
 8004108:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800410a:	4b11      	ldr	r3, [pc, #68]	; (8004150 <MX_I2C2_Init+0x50>)
 800410c:	4a12      	ldr	r2, [pc, #72]	; (8004158 <MX_I2C2_Init+0x58>)
 800410e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <MX_I2C2_Init+0x50>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004116:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <MX_I2C2_Init+0x50>)
 8004118:	2200      	movs	r2, #0
 800411a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800411c:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <MX_I2C2_Init+0x50>)
 800411e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004122:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <MX_I2C2_Init+0x50>)
 8004126:	2200      	movs	r2, #0
 8004128:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <MX_I2C2_Init+0x50>)
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004130:	4b07      	ldr	r3, [pc, #28]	; (8004150 <MX_I2C2_Init+0x50>)
 8004132:	2200      	movs	r2, #0
 8004134:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <MX_I2C2_Init+0x50>)
 8004138:	2200      	movs	r2, #0
 800413a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800413c:	4804      	ldr	r0, [pc, #16]	; (8004150 <MX_I2C2_Init+0x50>)
 800413e:	f002 f8c1 	bl	80062c4 <HAL_I2C_Init>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004148:	f000 fea1 	bl	8004e8e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800414c:	bf00      	nop
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200002c4 	.word	0x200002c4
 8004154:	40005800 	.word	0x40005800
 8004158:	000186a0 	.word	0x000186a0

0800415c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004160:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <MX_SPI1_Init+0x64>)
 8004162:	4a18      	ldr	r2, [pc, #96]	; (80041c4 <MX_SPI1_Init+0x68>)
 8004164:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004166:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <MX_SPI1_Init+0x64>)
 8004168:	f44f 7282 	mov.w	r2, #260	; 0x104
 800416c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800416e:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <MX_SPI1_Init+0x64>)
 8004170:	2200      	movs	r2, #0
 8004172:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004174:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <MX_SPI1_Init+0x64>)
 8004176:	2200      	movs	r2, #0
 8004178:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800417a:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <MX_SPI1_Init+0x64>)
 800417c:	2200      	movs	r2, #0
 800417e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004180:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <MX_SPI1_Init+0x64>)
 8004182:	2200      	movs	r2, #0
 8004184:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004186:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <MX_SPI1_Init+0x64>)
 8004188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800418c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800418e:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <MX_SPI1_Init+0x64>)
 8004190:	2210      	movs	r2, #16
 8004192:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004194:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <MX_SPI1_Init+0x64>)
 8004196:	2200      	movs	r2, #0
 8004198:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800419a:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <MX_SPI1_Init+0x64>)
 800419c:	2200      	movs	r2, #0
 800419e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <MX_SPI1_Init+0x64>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <MX_SPI1_Init+0x64>)
 80041a8:	220a      	movs	r2, #10
 80041aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041ac:	4804      	ldr	r0, [pc, #16]	; (80041c0 <MX_SPI1_Init+0x64>)
 80041ae:	f005 fe7f 	bl	8009eb0 <HAL_SPI_Init>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80041b8:	f000 fe69 	bl	8004e8e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041bc:	bf00      	nop
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000318 	.word	0x20000318
 80041c4:	40013000 	.word	0x40013000

080041c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08e      	sub	sp, #56	; 0x38
 80041cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	605a      	str	r2, [r3, #4]
 80041d8:	609a      	str	r2, [r3, #8]
 80041da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041dc:	f107 0320 	add.w	r3, r7, #32
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	60da      	str	r2, [r3, #12]
 80041f2:	611a      	str	r2, [r3, #16]
 80041f4:	615a      	str	r2, [r3, #20]
 80041f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041f8:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <MX_TIM2_Init+0xe8>)
 80041fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1280 - 1;
 8004200:	4b2b      	ldr	r3, [pc, #172]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004202:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8004206:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004208:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <MX_TIM2_Init+0xe8>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 800420e:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004214:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004216:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800421c:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <MX_TIM2_Init+0xe8>)
 800421e:	2200      	movs	r2, #0
 8004220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004222:	4823      	ldr	r0, [pc, #140]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004224:	f006 fa62 	bl	800a6ec <HAL_TIM_Base_Init>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800422e:	f000 fe2e 	bl	8004e8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800423c:	4619      	mov	r1, r3
 800423e:	481c      	ldr	r0, [pc, #112]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004240:	f006 feb8 	bl	800afb4 <HAL_TIM_ConfigClockSource>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800424a:	f000 fe20 	bl	8004e8e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800424e:	4818      	ldr	r0, [pc, #96]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004250:	f006 fb90 	bl	800a974 <HAL_TIM_PWM_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800425a:	f000 fe18 	bl	8004e8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004266:	f107 0320 	add.w	r3, r7, #32
 800426a:	4619      	mov	r1, r3
 800426c:	4810      	ldr	r0, [pc, #64]	; (80042b0 <MX_TIM2_Init+0xe8>)
 800426e:	f007 fa31 	bl	800b6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004278:	f000 fe09 	bl	8004e8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800427c:	2360      	movs	r3, #96	; 0x60
 800427e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	2200      	movs	r2, #0
 8004290:	4619      	mov	r1, r3
 8004292:	4807      	ldr	r0, [pc, #28]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004294:	f006 fdcc 	bl	800ae30 <HAL_TIM_PWM_ConfigChannel>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800429e:	f000 fdf6 	bl	8004e8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80042a2:	4803      	ldr	r0, [pc, #12]	; (80042b0 <MX_TIM2_Init+0xe8>)
 80042a4:	f001 f96c 	bl	8005580 <HAL_TIM_MspPostInit>

}
 80042a8:	bf00      	nop
 80042aa:	3738      	adds	r7, #56	; 0x38
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000370 	.word	0x20000370

080042b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08e      	sub	sp, #56	; 0x38
 80042b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	605a      	str	r2, [r3, #4]
 80042c4:	609a      	str	r2, [r3, #8]
 80042c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c8:	f107 0320 	add.w	r3, r7, #32
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	611a      	str	r2, [r3, #16]
 80042e0:	615a      	str	r2, [r3, #20]
 80042e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80042e4:	4b2d      	ldr	r3, [pc, #180]	; (800439c <MX_TIM3_Init+0xe8>)
 80042e6:	4a2e      	ldr	r2, [pc, #184]	; (80043a0 <MX_TIM3_Init+0xec>)
 80042e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400 - 1;
 80042ea:	4b2c      	ldr	r3, [pc, #176]	; (800439c <MX_TIM3_Init+0xe8>)
 80042ec:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80042f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f2:	4b2a      	ldr	r3, [pc, #168]	; (800439c <MX_TIM3_Init+0xe8>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000 - 1;
 80042f8:	4b28      	ldr	r3, [pc, #160]	; (800439c <MX_TIM3_Init+0xe8>)
 80042fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80042fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004300:	4b26      	ldr	r3, [pc, #152]	; (800439c <MX_TIM3_Init+0xe8>)
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004306:	4b25      	ldr	r3, [pc, #148]	; (800439c <MX_TIM3_Init+0xe8>)
 8004308:	2200      	movs	r2, #0
 800430a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800430c:	4823      	ldr	r0, [pc, #140]	; (800439c <MX_TIM3_Init+0xe8>)
 800430e:	f006 f9ed 	bl	800a6ec <HAL_TIM_Base_Init>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004318:	f000 fdb9 	bl	8004e8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800431c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004326:	4619      	mov	r1, r3
 8004328:	481c      	ldr	r0, [pc, #112]	; (800439c <MX_TIM3_Init+0xe8>)
 800432a:	f006 fe43 	bl	800afb4 <HAL_TIM_ConfigClockSource>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004334:	f000 fdab 	bl	8004e8e <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8004338:	4818      	ldr	r0, [pc, #96]	; (800439c <MX_TIM3_Init+0xe8>)
 800433a:	f006 fac3 	bl	800a8c4 <HAL_TIM_OC_Init>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004344:	f000 fda3 	bl	8004e8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004348:	2300      	movs	r3, #0
 800434a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800434c:	2300      	movs	r3, #0
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004350:	f107 0320 	add.w	r3, r7, #32
 8004354:	4619      	mov	r1, r3
 8004356:	4811      	ldr	r0, [pc, #68]	; (800439c <MX_TIM3_Init+0xe8>)
 8004358:	f007 f9bc 	bl	800b6d4 <HAL_TIMEx_MasterConfigSynchronization>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004362:	f000 fd94 	bl	8004e8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004376:	1d3b      	adds	r3, r7, #4
 8004378:	2200      	movs	r2, #0
 800437a:	4619      	mov	r1, r3
 800437c:	4807      	ldr	r0, [pc, #28]	; (800439c <MX_TIM3_Init+0xe8>)
 800437e:	f006 fcfb 	bl	800ad78 <HAL_TIM_OC_ConfigChannel>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004388:	f000 fd81 	bl	8004e8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800438c:	4803      	ldr	r0, [pc, #12]	; (800439c <MX_TIM3_Init+0xe8>)
 800438e:	f001 f8f7 	bl	8005580 <HAL_TIM_MspPostInit>

}
 8004392:	bf00      	nop
 8004394:	3738      	adds	r7, #56	; 0x38
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200003b8 	.word	0x200003b8
 80043a0:	40000400 	.word	0x40000400

080043a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043a8:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <MX_USART1_UART_Init+0x4c>)
 80043aa:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <MX_USART1_UART_Init+0x50>)
 80043ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043ae:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <MX_USART1_UART_Init+0x4c>)
 80043b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043b6:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <MX_USART1_UART_Init+0x4c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <MX_USART1_UART_Init+0x4c>)
 80043be:	2200      	movs	r2, #0
 80043c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043c2:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <MX_USART1_UART_Init+0x4c>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <MX_USART1_UART_Init+0x4c>)
 80043ca:	220c      	movs	r2, #12
 80043cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043ce:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <MX_USART1_UART_Init+0x4c>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <MX_USART1_UART_Init+0x4c>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043da:	4805      	ldr	r0, [pc, #20]	; (80043f0 <MX_USART1_UART_Init+0x4c>)
 80043dc:	f007 f9ea 	bl	800b7b4 <HAL_UART_Init>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80043e6:	f000 fd52 	bl	8004e8e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000400 	.word	0x20000400
 80043f4:	40013800 	.word	0x40013800

080043f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 80043fe:	4a12      	ldr	r2, [pc, #72]	; (8004448 <MX_USART2_UART_Init+0x50>)
 8004400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004402:	4b10      	ldr	r3, [pc, #64]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 8004404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 8004412:	2200      	movs	r2, #0
 8004414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 800441e:	220c      	movs	r2, #12
 8004420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 800442a:	2200      	movs	r2, #0
 800442c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800442e:	4805      	ldr	r0, [pc, #20]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 8004430:	f007 f9c0 	bl	800b7b4 <HAL_UART_Init>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800443a:	f000 fd28 	bl	8004e8e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000448 	.word	0x20000448
 8004448:	40004400 	.word	0x40004400

0800444c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004452:	f107 0310 	add.w	r3, r7, #16
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004460:	4b2d      	ldr	r3, [pc, #180]	; (8004518 <MX_GPIO_Init+0xcc>)
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	4a2c      	ldr	r2, [pc, #176]	; (8004518 <MX_GPIO_Init+0xcc>)
 8004466:	f043 0310 	orr.w	r3, r3, #16
 800446a:	6193      	str	r3, [r2, #24]
 800446c:	4b2a      	ldr	r3, [pc, #168]	; (8004518 <MX_GPIO_Init+0xcc>)
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004478:	4b27      	ldr	r3, [pc, #156]	; (8004518 <MX_GPIO_Init+0xcc>)
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	4a26      	ldr	r2, [pc, #152]	; (8004518 <MX_GPIO_Init+0xcc>)
 800447e:	f043 0320 	orr.w	r3, r3, #32
 8004482:	6193      	str	r3, [r2, #24]
 8004484:	4b24      	ldr	r3, [pc, #144]	; (8004518 <MX_GPIO_Init+0xcc>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004490:	4b21      	ldr	r3, [pc, #132]	; (8004518 <MX_GPIO_Init+0xcc>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	4a20      	ldr	r2, [pc, #128]	; (8004518 <MX_GPIO_Init+0xcc>)
 8004496:	f043 0304 	orr.w	r3, r3, #4
 800449a:	6193      	str	r3, [r2, #24]
 800449c:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <MX_GPIO_Init+0xcc>)
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	607b      	str	r3, [r7, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a8:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <MX_GPIO_Init+0xcc>)
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <MX_GPIO_Init+0xcc>)
 80044ae:	f043 0308 	orr.w	r3, r3, #8
 80044b2:	6193      	str	r3, [r2, #24]
 80044b4:	4b18      	ldr	r3, [pc, #96]	; (8004518 <MX_GPIO_Init+0xcc>)
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80044c0:	2200      	movs	r2, #0
 80044c2:	2101      	movs	r1, #1
 80044c4:	4815      	ldr	r0, [pc, #84]	; (800451c <MX_GPIO_Init+0xd0>)
 80044c6:	f001 fec3 	bl	8006250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80044ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044d0:	4b13      	ldr	r3, [pc, #76]	; (8004520 <MX_GPIO_Init+0xd4>)
 80044d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80044d8:	f107 0310 	add.w	r3, r7, #16
 80044dc:	4619      	mov	r1, r3
 80044de:	4811      	ldr	r0, [pc, #68]	; (8004524 <MX_GPIO_Init+0xd8>)
 80044e0:	f001 fd32 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044e4:	2301      	movs	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e8:	2301      	movs	r3, #1
 80044ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f0:	2302      	movs	r3, #2
 80044f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f4:	f107 0310 	add.w	r3, r7, #16
 80044f8:	4619      	mov	r1, r3
 80044fa:	4808      	ldr	r0, [pc, #32]	; (800451c <MX_GPIO_Init+0xd0>)
 80044fc:	f001 fd24 	bl	8005f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004500:	2200      	movs	r2, #0
 8004502:	2100      	movs	r1, #0
 8004504:	2028      	movs	r0, #40	; 0x28
 8004506:	f001 fc28 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800450a:	2028      	movs	r0, #40	; 0x28
 800450c:	f001 fc41 	bl	8005d92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004510:	bf00      	nop
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40021000 	.word	0x40021000
 800451c:	40010c00 	.word	0x40010c00
 8004520:	10110000 	.word	0x10110000
 8004524:	40011000 	.word	0x40011000

08004528 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a09      	ldr	r2, [pc, #36]	; (800455c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10b      	bne.n	8004552 <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
    second++;
 800453a:	4b09      	ldr	r3, [pc, #36]	; (8004560 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3301      	adds	r3, #1
 8004540:	4a07      	ldr	r2, [pc, #28]	; (8004560 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004542:	6013      	str	r3, [r2, #0]
    if (second == 5)
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b05      	cmp	r3, #5
 800454a:	d102      	bne.n	8004552 <HAL_TIM_PeriodElapsedCallback+0x2a>
    {
//      printf("timeout ok\r\n");
      second = 0;
 800454c:	4b04      	ldr	r3, [pc, #16]	; (8004560 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
    }
  }
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	40000400 	.word	0x40000400
 8004560:	2000049c 	.word	0x2000049c

08004564 <Matrix_gen>:

//function in Kalman Filter

float*** Matrix_gen(int row_n, int col_n, int iter_n) {
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b08b      	sub	sp, #44	; 0x2c
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
    float*** Ret_Matrix;
    Ret_Matrix = (float***)calloc(iter_n, sizeof(float**));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2104      	movs	r1, #4
 8004574:	4618      	mov	r0, r3
 8004576:	f00e fb77 	bl	8012c68 <calloc>
 800457a:	4603      	mov	r3, r0
 800457c:	613b      	str	r3, [r7, #16]

    if (!Ret_Matrix) {
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <Matrix_gen+0x24>
        return NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	e08b      	b.n	80046a0 <Matrix_gen+0x13c>
    }

    for (int i = 0; i < iter_n; i++) {
 8004588:	2300      	movs	r3, #0
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	e082      	b.n	8004694 <Matrix_gen+0x130>
        Ret_Matrix[i] = (float**)calloc(row_n, sizeof(float*));
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	18d4      	adds	r4, r2, r3
 8004598:	2104      	movs	r1, #4
 800459a:	f00e fb65 	bl	8012c68 <calloc>
 800459e:	4603      	mov	r3, r0
 80045a0:	6023      	str	r3, [r4, #0]
        if (!Ret_Matrix[i]) {
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4413      	add	r3, r2
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d116      	bne.n	80045de <Matrix_gen+0x7a>
            for (int k = i - 1; k >= 0; k--) {
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	3b01      	subs	r3, #1
 80045b4:	623b      	str	r3, [r7, #32]
 80045b6:	e00a      	b.n	80045ce <Matrix_gen+0x6a>
                free(Ret_Matrix[k]);
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f00e fb74 	bl	8012cb0 <free>
            for (int k = i - 1; k >= 0; k--) {
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	623b      	str	r3, [r7, #32]
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	daf1      	bge.n	80045b8 <Matrix_gen+0x54>
            }
            free(Ret_Matrix);
 80045d4:	6938      	ldr	r0, [r7, #16]
 80045d6:	f00e fb6b 	bl	8012cb0 <free>
            return NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	e060      	b.n	80046a0 <Matrix_gen+0x13c>
        }

        for (int j = 0; j < row_n; j++) {
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	e050      	b.n	8004686 <Matrix_gen+0x122>
            Ret_Matrix[i][j] = (float*)calloc(col_n, sizeof(float));
 80045e4:	68b8      	ldr	r0, [r7, #8]
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4413      	add	r3, r2
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	18d4      	adds	r4, r2, r3
 80045f6:	2104      	movs	r1, #4
 80045f8:	f00e fb36 	bl	8012c68 <calloc>
 80045fc:	4603      	mov	r3, r0
 80045fe:	6023      	str	r3, [r4, #0]
            if (!Ret_Matrix[i][j]) {
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d134      	bne.n	8004680 <Matrix_gen+0x11c>
                for (int k = j - 1; k >= 0; k--) {
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3b01      	subs	r3, #1
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	e00e      	b.n	800463c <Matrix_gen+0xd8>
                    free(Ret_Matrix[i][k]);
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4413      	add	r3, r2
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f00e fb3d 	bl	8012cb0 <free>
                for (int k = j - 1; k >= 0; k--) {
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	3b01      	subs	r3, #1
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	daed      	bge.n	800461e <Matrix_gen+0xba>
                }
                free(Ret_Matrix[i]);
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f00e fb2f 	bl	8012cb0 <free>
                for (int k = i - 1; k >= 0; k--) {
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	3b01      	subs	r3, #1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e00a      	b.n	8004670 <Matrix_gen+0x10c>
                    free(Ret_Matrix[k]);
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4413      	add	r3, r2
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f00e fb23 	bl	8012cb0 <free>
                for (int k = i - 1; k >= 0; k--) {
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	3b01      	subs	r3, #1
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	daf1      	bge.n	800465a <Matrix_gen+0xf6>
                }
                free(Ret_Matrix);
 8004676:	6938      	ldr	r0, [r7, #16]
 8004678:	f00e fb1a 	bl	8012cb0 <free>
                return NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	e00f      	b.n	80046a0 <Matrix_gen+0x13c>
        for (int j = 0; j < row_n; j++) {
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	3301      	adds	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	429a      	cmp	r2, r3
 800468c:	dbaa      	blt.n	80045e4 <Matrix_gen+0x80>
    for (int i = 0; i < iter_n; i++) {
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	3301      	adds	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
 8004694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	f6ff af78 	blt.w	800458e <Matrix_gen+0x2a>
            }
        }
    }

    return Ret_Matrix;
 800469e:	693b      	ldr	r3, [r7, #16]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	372c      	adds	r7, #44	; 0x2c
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd90      	pop	{r4, r7, pc}

080046a8 <Matrix_free>:

void Matrix_free(float*** matrix, int row_n, int iter_n) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < iter_n; i++) {
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	e020      	b.n	80046fc <Matrix_free+0x54>
        for (int j = 0; j < row_n; j++) {
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	e00e      	b.n	80046de <Matrix_free+0x36>
            free(matrix[i][j]);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f00e faec 	bl	8012cb0 <free>
        for (int j = 0; j < row_n; j++) {
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	3301      	adds	r3, #1
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	dbec      	blt.n	80046c0 <Matrix_free+0x18>
        }
        free(matrix[i]);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f00e fadd 	bl	8012cb0 <free>
    for (int i = 0; i < iter_n; i++) {
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	3301      	adds	r3, #1
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	429a      	cmp	r2, r3
 8004702:	dbda      	blt.n	80046ba <Matrix_free+0x12>
    }
    free(matrix);
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f00e fad3 	bl	8012cb0 <free>
}
 800470a:	bf00      	nop
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <Matrix_gen_2dim>:

//for 2dim
float** Matrix_gen_2dim(int row_n, int col_n) {
 8004712:	b590      	push	{r4, r7, lr}
 8004714:	b087      	sub	sp, #28
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
    float** Ret_Matrix = (float**)calloc(row_n, sizeof(float*));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2104      	movs	r1, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f00e faa1 	bl	8012c68 <calloc>
 8004726:	4603      	mov	r3, r0
 8004728:	60fb      	str	r3, [r7, #12]
    if (!Ret_Matrix) {
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <Matrix_gen_2dim+0x22>
        return NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	e032      	b.n	800479a <Matrix_gen_2dim+0x88>
    }

    for (int i = 0; i < row_n; i++) {
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e02a      	b.n	8004790 <Matrix_gen_2dim+0x7e>
        Ret_Matrix[i] = (float*)calloc(col_n, sizeof(float));
 800473a:	6838      	ldr	r0, [r7, #0]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	18d4      	adds	r4, r2, r3
 8004744:	2104      	movs	r1, #4
 8004746:	f00e fa8f 	bl	8012c68 <calloc>
 800474a:	4603      	mov	r3, r0
 800474c:	6023      	str	r3, [r4, #0]
        if (!Ret_Matrix[i]) {
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4413      	add	r3, r2
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d116      	bne.n	800478a <Matrix_gen_2dim+0x78>
            for (int k = i - 1; k >= 0; k--) {
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3b01      	subs	r3, #1
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	e00a      	b.n	800477a <Matrix_gen_2dim+0x68>
                free(Ret_Matrix[k]);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f00e fa9e 	bl	8012cb0 <free>
            for (int k = i - 1; k >= 0; k--) {
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	3b01      	subs	r3, #1
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	daf1      	bge.n	8004764 <Matrix_gen_2dim+0x52>
            }
            free(Ret_Matrix);
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f00e fa95 	bl	8012cb0 <free>
            return NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	e007      	b.n	800479a <Matrix_gen_2dim+0x88>
    for (int i = 0; i < row_n; i++) {
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	3301      	adds	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	dbd0      	blt.n	800473a <Matrix_gen_2dim+0x28>
        }
    }

    return Ret_Matrix;
 8004798:	68fb      	ldr	r3, [r7, #12]
}
 800479a:	4618      	mov	r0, r3
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd90      	pop	{r4, r7, pc}

080047a2 <Matrix_free_2dim>:

void Matrix_free_2dim(float** matrix, int row_n) {
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < row_n; i++) {
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	e00a      	b.n	80047c8 <Matrix_free_2dim+0x26>
        free(matrix[i]);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f00e fa77 	bl	8012cb0 <free>
    for (int i = 0; i < row_n; i++) {
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	dbf0      	blt.n	80047b2 <Matrix_free_2dim+0x10>
    }
    free(matrix);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f00e fa6d 	bl	8012cb0 <free>
}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <average_filter>:

// this code should be replace to just Average Filter _Daemin Kang deadline 0928
//
float average_filter(float* values) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
    // Doesn't have any Exception handling
    float sum = 0;
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
    // Calculate the initial sum
    for (int i = 0; i < 10; i++) {
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	e00d      	b.n	8004810 <average_filter+0x30>
        sum += values[i];
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	4413      	add	r3, r2
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4619      	mov	r1, r3
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f7fc f9b7 	bl	8000b74 <__addsf3>
 8004806:	4603      	mov	r3, r0
 8004808:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 10; i++) {
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	3301      	adds	r3, #1
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b09      	cmp	r3, #9
 8004814:	ddee      	ble.n	80047f4 <average_filter+0x14>
    }
    return sum / 10;
 8004816:	4904      	ldr	r1, [pc, #16]	; (8004828 <average_filter+0x48>)
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7fc fb67 	bl	8000eec <__aeabi_fdiv>
 800481e:	4603      	mov	r3, r0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	41200000 	.word	0x41200000

0800482c <Transpose>:

}

//function for transpose
float** Transpose(float** matrix, int row, int col)
{
 800482c:	b590      	push	{r4, r7, lr}
 800482e:	b089      	sub	sp, #36	; 0x24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
    if (matrix == NULL || row <= 0 || col <= 0)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <Transpose+0x1e>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	dd02      	ble.n	800484a <Transpose+0x1e>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	dc01      	bgt.n	800484e <Transpose+0x22>
        return NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	e041      	b.n	80048d2 <Transpose+0xa6>

    float** result = (float**)calloc(row, sizeof(float*));
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2104      	movs	r1, #4
 8004852:	4618      	mov	r0, r3
 8004854:	f00e fa08 	bl	8012c68 <calloc>
 8004858:	4603      	mov	r3, r0
 800485a:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < row; i++) {
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	e00c      	b.n	800487c <Transpose+0x50>
        result[i] = (float*)calloc(col, sizeof(float));
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	18d4      	adds	r4, r2, r3
 800486c:	2104      	movs	r1, #4
 800486e:	f00e f9fb 	bl	8012c68 <calloc>
 8004872:	4603      	mov	r3, r0
 8004874:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < row; i++) {
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3301      	adds	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	429a      	cmp	r2, r3
 8004882:	dbee      	blt.n	8004862 <Transpose+0x36>
    }

    for (int i = 0; i < row; i++) {
 8004884:	2300      	movs	r3, #0
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e01e      	b.n	80048c8 <Transpose+0x9c>
        for (int j = 0; j < col; j++) {
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e014      	b.n	80048ba <Transpose+0x8e>
            result[j][i] = matrix[i][j];
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	441a      	add	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	6939      	ldr	r1, [r7, #16]
 80048a6:	440b      	add	r3, r1
 80048a8:	6819      	ldr	r1, [r3, #0]
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < col; j++) {
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	3301      	adds	r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	dbe6      	blt.n	8004890 <Transpose+0x64>
    for (int i = 0; i < row; i++) {
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	3301      	adds	r3, #1
 80048c6:	61bb      	str	r3, [r7, #24]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	dbdc      	blt.n	800488a <Transpose+0x5e>
        }
    }

    //need to free result memeroy in main function call
    return result;
 80048d0:	693b      	ldr	r3, [r7, #16]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3724      	adds	r7, #36	; 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd90      	pop	{r4, r7, pc}

080048da <Matrix_adder>:


//function for matrix adder with substracter
float** Matrix_adder(float** matrix_1, float** matrix_2, int row, int col, int option)  //option == 1 : adder / == 0 : substracter
{
 80048da:	b590      	push	{r4, r7, lr}
 80048dc:	b089      	sub	sp, #36	; 0x24
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	603b      	str	r3, [r7, #0]
    if (option == 1)
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d132      	bne.n	8004954 <Matrix_adder+0x7a>
    {
        for (int i = 0; i < row; i++) {
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	e02a      	b.n	800494a <Matrix_adder+0x70>
            for (int j = 0; j < col; j++) {
 80048f4:	2300      	movs	r3, #0
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	e020      	b.n	800493c <Matrix_adder+0x62>
                matrix_1[i][j] += matrix_2[i][j];
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4413      	add	r3, r2
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	4413      	add	r3, r2
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	6819      	ldr	r1, [r3, #0]
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	18d4      	adds	r4, r2, r3
 800492e:	f7fc f921 	bl	8000b74 <__addsf3>
 8004932:	4603      	mov	r3, r0
 8004934:	6023      	str	r3, [r4, #0]
            for (int j = 0; j < col; j++) {
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	3301      	adds	r3, #1
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	dbda      	blt.n	80048fa <Matrix_adder+0x20>
        for (int i = 0; i < row; i++) {
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	3301      	adds	r3, #1
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	429a      	cmp	r2, r3
 8004950:	dbd0      	blt.n	80048f4 <Matrix_adder+0x1a>
 8004952:	e037      	b.n	80049c4 <Matrix_adder+0xea>
            }
        }
    }
    else if (option == 0)
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	2b00      	cmp	r3, #0
 8004958:	d132      	bne.n	80049c0 <Matrix_adder+0xe6>
    {
        for (int i = 0; i < row; i++) {
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	e02a      	b.n	80049b6 <Matrix_adder+0xdc>
            for (int j = 0; j < col; j++) {
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	e020      	b.n	80049a8 <Matrix_adder+0xce>
                matrix_1[i][j] -= matrix_2[i][j];
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	4413      	add	r3, r2
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	6819      	ldr	r1, [r3, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	18d4      	adds	r4, r2, r3
 800499a:	f7fc f8e9 	bl	8000b70 <__aeabi_fsub>
 800499e:	4603      	mov	r3, r0
 80049a0:	6023      	str	r3, [r4, #0]
            for (int j = 0; j < col; j++) {
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	3301      	adds	r3, #1
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	dbda      	blt.n	8004966 <Matrix_adder+0x8c>
        for (int i = 0; i < row; i++) {
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	3301      	adds	r3, #1
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	dbd0      	blt.n	8004960 <Matrix_adder+0x86>
 80049be:	e001      	b.n	80049c4 <Matrix_adder+0xea>
        }
    }
    else
    //?  ?  처리 추 ??   ?   ?   ?.

    return matrix_1;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	e7ff      	b.n	80049c4 <Matrix_adder+0xea>
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3724      	adds	r7, #36	; 0x24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd90      	pop	{r4, r7, pc}

080049cc <Matrix_multiplicator>:



//function for matrix multiplication
//c1==r2         need revision
float** Matrix_multiplicator(float** matrix_1, float** matrix_2,int r1, int c1, int r2, int c2){
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b08b      	sub	sp, #44	; 0x2c
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
    float** result = (float**)calloc(r1, sizeof(float*));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2104      	movs	r1, #4
 80049de:	4618      	mov	r0, r3
 80049e0:	f00e f942 	bl	8012c68 <calloc>
 80049e4:	4603      	mov	r3, r0
 80049e6:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < r1; i++) {
 80049e8:	2300      	movs	r3, #0
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
 80049ec:	e00c      	b.n	8004a08 <Matrix_multiplicator+0x3c>
        result[i] = (float*)calloc(c2, sizeof(float));
 80049ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	18d4      	adds	r4, r2, r3
 80049f8:	2104      	movs	r1, #4
 80049fa:	f00e f935 	bl	8012c68 <calloc>
 80049fe:	4603      	mov	r3, r0
 8004a00:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < r1; i++) {
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	3301      	adds	r3, #1
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
 8004a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	dbee      	blt.n	80049ee <Matrix_multiplicator+0x22>
    }

    for (int i = 0; i < r1; i++) {
 8004a10:	2300      	movs	r3, #0
 8004a12:	623b      	str	r3, [r7, #32]
 8004a14:	e03f      	b.n	8004a96 <Matrix_multiplicator+0xca>
        for (int j = 0; j < c2; j++) {
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	e035      	b.n	8004a88 <Matrix_multiplicator+0xbc>
            float tempSum = 0;
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	61bb      	str	r3, [r7, #24]

            for (int k = 0; k < c1; k++) {
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	e01e      	b.n	8004a66 <Matrix_multiplicator+0x9a>
                tempSum += matrix_1[i][k] * matrix_2[k][j];
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	4413      	add	r3, r2
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f7fc f999 	bl	8000d84 <__aeabi_fmul>
 8004a52:	4603      	mov	r3, r0
 8004a54:	4619      	mov	r1, r3
 8004a56:	69b8      	ldr	r0, [r7, #24]
 8004a58:	f7fc f88c 	bl	8000b74 <__addsf3>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	61bb      	str	r3, [r7, #24]
            for (int k = 0; k < c1; k++) {
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	3301      	adds	r3, #1
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	dbdc      	blt.n	8004a28 <Matrix_multiplicator+0x5c>
            }
            result[i][j] = tempSum;
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4413      	add	r3, r2
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < c2; j++) {
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3301      	adds	r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	dbc5      	blt.n	8004a1c <Matrix_multiplicator+0x50>
    for (int i = 0; i < r1; i++) {
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	3301      	adds	r3, #1
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	6a3a      	ldr	r2, [r7, #32]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	dbbb      	blt.n	8004a16 <Matrix_multiplicator+0x4a>
        }
    }

    return result;
 8004a9e:	693b      	ldr	r3, [r7, #16]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	372c      	adds	r7, #44	; 0x2c
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd90      	pop	{r4, r7, pc}

08004aa8 <KF_alg>:

//function for KF axis acceleration.
KF_return KF_alg(float** F, float** H, float** R, float** esti_state_prev, float** esti_cov_prev, float** measu_state, float sigma_w, float del_t) {
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b097      	sub	sp, #92	; 0x5c
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
    KF_return KF;
    //printf("pass\n");
    KF.estimate_cov = Matrix_gen_2dim(row_2, col_2);
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	2002      	movs	r0, #2
 8004aba:	f7ff fe2a 	bl	8004712 <Matrix_gen_2dim>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	613b      	str	r3, [r7, #16]
    KF.estimate_state = Matrix_gen_2dim(row_2, col_1);
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	2002      	movs	r0, #2
 8004ac6:	f7ff fe24 	bl	8004712 <Matrix_gen_2dim>
 8004aca:	4603      	mov	r3, r0
 8004acc:	617b      	str	r3, [r7, #20]
    KF.Kalman_Gain = Matrix_gen_2dim(row_2, col_1);
 8004ace:	2101      	movs	r1, #1
 8004ad0:	2002      	movs	r0, #2
 8004ad2:	f7ff fe1e 	bl	8004712 <Matrix_gen_2dim>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	61bb      	str	r3, [r7, #24]

    //같 ? ?  ?  즈 ??  ? ? 메모리 ?? ?  ?  ?  ?   ?  ?   ?  ?   ? 최적?   ? 진행?  ?  ?    ? 같다_0915
    float** predict_cov = Matrix_gen_2dim(row_2, col_2);
 8004ada:	2102      	movs	r1, #2
 8004adc:	2002      	movs	r0, #2
 8004ade:	f7ff fe18 	bl	8004712 <Matrix_gen_2dim>
 8004ae2:	64f8      	str	r0, [r7, #76]	; 0x4c
    float** predict_state = Matrix_gen_2dim(row_2, col_1);
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	2002      	movs	r0, #2
 8004ae8:	f7ff fe13 	bl	8004712 <Matrix_gen_2dim>
 8004aec:	64b8      	str	r0, [r7, #72]	; 0x48
    float** transp_F = Matrix_gen_2dim(row_2, col_2);
 8004aee:	2102      	movs	r1, #2
 8004af0:	2002      	movs	r0, #2
 8004af2:	f7ff fe0e 	bl	8004712 <Matrix_gen_2dim>
 8004af6:	6478      	str	r0, [r7, #68]	; 0x44
    float** Q = Matrix_gen_2dim(row_2, col_2);
 8004af8:	2102      	movs	r1, #2
 8004afa:	2002      	movs	r0, #2
 8004afc:	f7ff fe09 	bl	8004712 <Matrix_gen_2dim>
 8004b00:	6438      	str	r0, [r7, #64]	; 0x40
    float** transp_H = Matrix_gen_2dim(row_2, col_2);
 8004b02:	2102      	movs	r1, #2
 8004b04:	2002      	movs	r0, #2
 8004b06:	f7ff fe04 	bl	8004712 <Matrix_gen_2dim>
 8004b0a:	63f8      	str	r0, [r7, #60]	; 0x3c

    float** inv_term_1 = Matrix_gen_2dim(row_1,col_2);
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	2001      	movs	r0, #1
 8004b10:	f7ff fdff 	bl	8004712 <Matrix_gen_2dim>
 8004b14:	63b8      	str	r0, [r7, #56]	; 0x38
    float** inv_term_2 = Matrix_gen_2dim(row_1, col_1);
 8004b16:	2101      	movs	r1, #1
 8004b18:	2001      	movs	r0, #1
 8004b1a:	f7ff fdfa 	bl	8004712 <Matrix_gen_2dim>
 8004b1e:	6378      	str	r0, [r7, #52]	; 0x34
    float** inv_term_tot = Matrix_gen_2dim(row_1, col_1);
 8004b20:	2101      	movs	r1, #1
 8004b22:	2001      	movs	r0, #1
 8004b24:	f7ff fdf5 	bl	8004712 <Matrix_gen_2dim>
 8004b28:	6338      	str	r0, [r7, #48]	; 0x30

    float** innov_1 = Matrix_gen_2dim(row_2, col_1);
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	2002      	movs	r0, #2
 8004b2e:	f7ff fdf0 	bl	8004712 <Matrix_gen_2dim>
 8004b32:	62f8      	str	r0, [r7, #44]	; 0x2c
    float** innov_tot = Matrix_gen_2dim(row_1, col_1);
 8004b34:	2101      	movs	r1, #1
 8004b36:	2001      	movs	r0, #1
 8004b38:	f7ff fdeb 	bl	8004712 <Matrix_gen_2dim>
 8004b3c:	62b8      	str	r0, [r7, #40]	; 0x28
    float** innov_Kal = Matrix_gen_2dim(row_2, col_1);
 8004b3e:	2101      	movs	r1, #1
 8004b40:	2002      	movs	r0, #2
 8004b42:	f7ff fde6 	bl	8004712 <Matrix_gen_2dim>
 8004b46:	6278      	str	r0, [r7, #36]	; 0x24

    float** renewal_cov_1 = Matrix_gen_2dim(row_2, col_2);
 8004b48:	2102      	movs	r1, #2
 8004b4a:	2002      	movs	r0, #2
 8004b4c:	f7ff fde1 	bl	8004712 <Matrix_gen_2dim>
 8004b50:	6238      	str	r0, [r7, #32]
   	if(renewal_cov_1==NULL)
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <KF_alg+0xb6>
   	{printf("overflow\n");} // over flow here 1006 test
 8004b58:	488f      	ldr	r0, [pc, #572]	; (8004d98 <KF_alg+0x2f0>)
 8004b5a:	f00e fed1 	bl	8013900 <puts>

    //predict state
    predict_state = Matrix_multiplicator(F, esti_state_prev, row_2, col_2, row_2, col_1);
 8004b5e:	2301      	movs	r3, #1
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	2302      	movs	r3, #2
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	2302      	movs	r3, #2
 8004b68:	2202      	movs	r2, #2
 8004b6a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004b6c:	68b8      	ldr	r0, [r7, #8]
 8004b6e:	f7ff ff2d 	bl	80049cc <Matrix_multiplicator>
 8004b72:	64b8      	str	r0, [r7, #72]	; 0x48

    //predict cov
    float sigma_sq = sigma_w * sigma_w;
 8004b74:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004b76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b78:	f7fc f904 	bl	8000d84 <__aeabi_fmul>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	61fb      	str	r3, [r7, #28]
    //set Q
    Q[0][0] = del_t*del_t* sigma_sq; Q[0][1] = del_t* sigma_sq; Q[1][0] = del_t * sigma_sq; Q[1][1] = sigma_sq;
 8004b80:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004b82:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004b84:	f7fc f8fe 	bl	8000d84 <__aeabi_fmul>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8e:	681c      	ldr	r4, [r3, #0]
 8004b90:	69f9      	ldr	r1, [r7, #28]
 8004b92:	4610      	mov	r0, r2
 8004b94:	f7fc f8f6 	bl	8000d84 <__aeabi_fmul>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	1d1c      	adds	r4, r3, #4
 8004ba2:	69f9      	ldr	r1, [r7, #28]
 8004ba4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004ba6:	f7fc f8ed 	bl	8000d84 <__aeabi_fmul>
 8004baa:	4603      	mov	r3, r0
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	681c      	ldr	r4, [r3, #0]
 8004bb4:	69f9      	ldr	r1, [r7, #28]
 8004bb6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004bb8:	f7fc f8e4 	bl	8000d84 <__aeabi_fmul>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	6023      	str	r3, [r4, #0]
 8004bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	601a      	str	r2, [r3, #0]

    predict_cov = Matrix_multiplicator(F,esti_cov_prev, row_2, col_2, row_2, col_2);
 8004bcc:	2302      	movs	r3, #2
 8004bce:	9301      	str	r3, [sp, #4]
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004bda:	68b8      	ldr	r0, [r7, #8]
 8004bdc:	f7ff fef6 	bl	80049cc <Matrix_multiplicator>
 8004be0:	64f8      	str	r0, [r7, #76]	; 0x4c
    transp_F = Transpose(F,row_2,col_2);
 8004be2:	2202      	movs	r2, #2
 8004be4:	2102      	movs	r1, #2
 8004be6:	68b8      	ldr	r0, [r7, #8]
 8004be8:	f7ff fe20 	bl	800482c <Transpose>
 8004bec:	6478      	str	r0, [r7, #68]	; 0x44
    predict_cov = Matrix_multiplicator(predict_cov, transp_F, row_2, col_2, row_2, col_2);
 8004bee:	2302      	movs	r3, #2
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bfc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004bfe:	f7ff fee5 	bl	80049cc <Matrix_multiplicator>
 8004c02:	64f8      	str	r0, [r7, #76]	; 0x4c
    predict_cov = Matrix_adder(predict_cov,Q,row_2, col_2, add);
 8004c04:	2301      	movs	r3, #1
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	2302      	movs	r3, #2
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c0e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004c10:	f7ff fe63 	bl	80048da <Matrix_adder>
 8004c14:	64f8      	str	r0, [r7, #76]	; 0x4c

    //Kalman Gain
    inv_term_1 = Matrix_multiplicator(H, predict_cov, row_1, col_2, row_2, col_2);
 8004c16:	2302      	movs	r3, #2
 8004c18:	9301      	str	r3, [sp, #4]
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	2302      	movs	r3, #2
 8004c20:	2201      	movs	r2, #1
 8004c22:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff fed1 	bl	80049cc <Matrix_multiplicator>
 8004c2a:	63b8      	str	r0, [r7, #56]	; 0x38
    inv_term_2 = Matrix_multiplicator(inv_term_1, transp_H, row_1, col_2, row_2, col_1);
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	2302      	movs	r3, #2
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2302      	movs	r3, #2
 8004c36:	2201      	movs	r2, #1
 8004c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c3c:	f7ff fec6 	bl	80049cc <Matrix_multiplicator>
 8004c40:	6378      	str	r0, [r7, #52]	; 0x34
    KF.Kalman_Gain = Matrix_multiplicator(predict_cov, transp_H, row_2, col_2, row_2, col_1);
 8004c42:	2301      	movs	r3, #1
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	2302      	movs	r3, #2
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c50:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004c52:	f7ff febb 	bl	80049cc <Matrix_multiplicator>
 8004c56:	4603      	mov	r3, r0
 8004c58:	61bb      	str	r3, [r7, #24]
    **inv_term_tot = 1 / (**inv_term_2);
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	681c      	ldr	r4, [r3, #0]
 8004c64:	4611      	mov	r1, r2
 8004c66:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004c6a:	f7fc f93f 	bl	8000eec <__aeabi_fdiv>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	6023      	str	r3, [r4, #0]

    KF.Kalman_Gain = Matrix_multiplicator(KF.Kalman_Gain, inv_term_tot, row_2, col_1, row_1, col_1);
 8004c72:	69b8      	ldr	r0, [r7, #24]
 8004c74:	2301      	movs	r3, #1
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	2301      	movs	r3, #1
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	2202      	movs	r2, #2
 8004c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c82:	f7ff fea3 	bl	80049cc <Matrix_multiplicator>
 8004c86:	4603      	mov	r3, r0
 8004c88:	61bb      	str	r3, [r7, #24]

    //Estimation of state
    innov_1 = Matrix_multiplicator(H, predict_state, row_1, col_2, row_2, col_1);
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	2302      	movs	r3, #2
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	2302      	movs	r3, #2
 8004c94:	2201      	movs	r2, #1
 8004c96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fe97 	bl	80049cc <Matrix_multiplicator>
 8004c9e:	62f8      	str	r0, [r7, #44]	; 0x2c
    innov_tot = Matrix_adder(measu_state, innov_1, row_1, col_1,substract);
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004caa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004cac:	f7ff fe15 	bl	80048da <Matrix_adder>
 8004cb0:	62b8      	str	r0, [r7, #40]	; 0x28
    KF.estimate_state = Matrix_multiplicator(KF.Kalman_Gain, innov_tot, row_2, col_1, row_1, col_1);
 8004cb2:	69b8      	ldr	r0, [r7, #24]
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	2301      	movs	r3, #1
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cc2:	f7ff fe83 	bl	80049cc <Matrix_multiplicator>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	617b      	str	r3, [r7, #20]
    KF.estimate_state = Matrix_adder(predict_state ,KF.estimate_state, row_2, col_1, add);
 8004cca:	6979      	ldr	r1, [r7, #20]
 8004ccc:	2301      	movs	r3, #1
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004cd6:	f7ff fe00 	bl	80048da <Matrix_adder>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	617b      	str	r3, [r7, #20]

    //Estimation of cov.
    renewal_cov_1 = Matrix_multiplicator(KF.Kalman_Gain,H,row_2, col_1, row_1, col_2);
 8004cde:	69b8      	ldr	r0, [r7, #24]
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	2301      	movs	r3, #1
 8004cea:	2202      	movs	r2, #2
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	f7ff fe6d 	bl	80049cc <Matrix_multiplicator>
 8004cf2:	6238      	str	r0, [r7, #32]
    renewal_cov_1 = Matrix_multiplicator(renewal_cov_1, predict_cov, row_2, col_2, row_2, col_2);
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	9301      	str	r3, [sp, #4]
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	2202      	movs	r2, #2
 8004d00:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004d02:	6a38      	ldr	r0, [r7, #32]
 8004d04:	f7ff fe62 	bl	80049cc <Matrix_multiplicator>
 8004d08:	6238      	str	r0, [r7, #32]
    KF.estimate_cov = Matrix_adder(predict_cov, renewal_cov_1, row_2, col_2, substract);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2302      	movs	r3, #2
 8004d10:	2202      	movs	r2, #2
 8004d12:	6a39      	ldr	r1, [r7, #32]
 8004d14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d16:	f7ff fde0 	bl	80048da <Matrix_adder>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	613b      	str	r3, [r7, #16]

    //free memory KF in main function.
    Matrix_free_2dim(renewal_cov_1,row_2);
 8004d1e:	2102      	movs	r1, #2
 8004d20:	6a38      	ldr	r0, [r7, #32]
 8004d22:	f7ff fd3e 	bl	80047a2 <Matrix_free_2dim>
    Matrix_free_2dim(innov_Kal, row_2);
 8004d26:	2102      	movs	r1, #2
 8004d28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d2a:	f7ff fd3a 	bl	80047a2 <Matrix_free_2dim>
    Matrix_free_2dim(innov_tot, row_1);
 8004d2e:	2101      	movs	r1, #1
 8004d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d32:	f7ff fd36 	bl	80047a2 <Matrix_free_2dim>
    Matrix_free_2dim(innov_1, row_2);
 8004d36:	2102      	movs	r1, #2
 8004d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d3a:	f7ff fd32 	bl	80047a2 <Matrix_free_2dim>

    Matrix_free_2dim(inv_term_tot, row_1);
 8004d3e:	2101      	movs	r1, #1
 8004d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d42:	f7ff fd2e 	bl	80047a2 <Matrix_free_2dim>
    Matrix_free_2dim(inv_term_2, row_1);
 8004d46:	2101      	movs	r1, #1
 8004d48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d4a:	f7ff fd2a 	bl	80047a2 <Matrix_free_2dim>
    Matrix_free_2dim(inv_term_1, row_1);
 8004d4e:	2101      	movs	r1, #1
 8004d50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d52:	f7ff fd26 	bl	80047a2 <Matrix_free_2dim>

    Matrix_free_2dim(transp_H, row_2);
 8004d56:	2102      	movs	r1, #2
 8004d58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d5a:	f7ff fd22 	bl	80047a2 <Matrix_free_2dim>
    Matrix_free_2dim(Q, row_2);
 8004d5e:	2102      	movs	r1, #2
 8004d60:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d62:	f7ff fd1e 	bl	80047a2 <Matrix_free_2dim>
    Matrix_free_2dim(transp_F, row_2);
 8004d66:	2102      	movs	r1, #2
 8004d68:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004d6a:	f7ff fd1a 	bl	80047a2 <Matrix_free_2dim>
    Matrix_free_2dim(predict_state, row_2);
 8004d6e:	2102      	movs	r1, #2
 8004d70:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004d72:	f7ff fd16 	bl	80047a2 <Matrix_free_2dim>
    Matrix_free_2dim(predict_cov, row_2);
 8004d76:	2102      	movs	r1, #2
 8004d78:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d7a:	f7ff fd12 	bl	80047a2 <Matrix_free_2dim>

    return KF;//KF_return KF;   ?   구조체에 ???   ?  ?  ?  ?   문제 ? ?   찾아보기.
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	461c      	mov	r4, r3
 8004d82:	f107 0310 	add.w	r3, r7, #16
 8004d86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	3754      	adds	r7, #84	; 0x54
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd90      	pop	{r4, r7, pc}
 8004d96:	bf00      	nop
 8004d98:	08015b20 	.word	0x08015b20

08004d9c <scalar_KF_alg>:


//function for scalar KF
scalar_KF_return scalar_KF_alg(float F_scalar, float H_scalar, float R_scalar, float esti_state_prev, float esti_cov_prev, float measu_state, float sigma_w, float del_t) {
 8004d9c:	b590      	push	{r4, r7, lr}
 8004d9e:	b08f      	sub	sp, #60	; 0x3c
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
    scalar_KF_return scalar_KF;

    //estimation
    float sigma_sq = sigma_w * sigma_w;
 8004daa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004dae:	f7fb ffe9 	bl	8000d84 <__aeabi_fmul>
 8004db2:	4603      	mov	r3, r0
 8004db4:	637b      	str	r3, [r7, #52]	; 0x34
    float Q = sigma_sq;
 8004db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db8:	633b      	str	r3, [r7, #48]	; 0x30
    float innovation;
    float Kalman_term;


    //pred of state
    pred_state = F_scalar*esti_state_prev;
 8004dba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004dbc:	68b8      	ldr	r0, [r7, #8]
 8004dbe:	f7fb ffe1 	bl	8000d84 <__aeabi_fmul>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c

    //pred of cov
    pred_cov = F_scalar * esti_cov_prev;
 8004dc6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004dc8:	68b8      	ldr	r0, [r7, #8]
 8004dca:	f7fb ffdb 	bl	8000d84 <__aeabi_fmul>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    pred_cov = pred_cov * F_scalar;
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd6:	f7fb ffd5 	bl	8000d84 <__aeabi_fmul>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    pred_cov = pred_cov + Q;
 8004dde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de2:	f7fb fec7 	bl	8000b74 <__addsf3>
 8004de6:	4603      	mov	r3, r0
 8004de8:	62bb      	str	r3, [r7, #40]	; 0x28

    //Kalman Gain
    scalar_KF.Kalman_Gain = pred_cov * H_scalar;
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dee:	f7fb ffc9 	bl	8000d84 <__aeabi_fmul>
 8004df2:	4603      	mov	r3, r0
 8004df4:	61bb      	str	r3, [r7, #24]
    inv_term = H_scalar*pred_cov;
 8004df6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7fb ffc3 	bl	8000d84 <__aeabi_fmul>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
    inv_term = inv_term * H_scalar;
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e06:	f7fb ffbd 	bl	8000d84 <__aeabi_fmul>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
    inv_term = inv_term + R_scalar;
 8004e0e:	6839      	ldr	r1, [r7, #0]
 8004e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e12:	f7fb feaf 	bl	8000b74 <__addsf3>
 8004e16:	4603      	mov	r3, r0
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
    inv_term = 1 / inv_term;    //caution; integer type casting problem
 8004e1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e1c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004e20:	f7fc f864 	bl	8000eec <__aeabi_fdiv>
 8004e24:	4603      	mov	r3, r0
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
    scalar_KF.Kalman_Gain = scalar_KF.Kalman_Gain * inv_term;
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fb ffa9 	bl	8000d84 <__aeabi_fmul>
 8004e32:	4603      	mov	r3, r0
 8004e34:	61bb      	str	r3, [r7, #24]

    //Estimation of state
    innovation = measu_state - esti_state_prev;
 8004e36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e38:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004e3a:	f7fb fe99 	bl	8000b70 <__aeabi_fsub>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	623b      	str	r3, [r7, #32]
    Kalman_term = scalar_KF.Kalman_Gain * innovation;
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	4619      	mov	r1, r3
 8004e46:	6a38      	ldr	r0, [r7, #32]
 8004e48:	f7fb ff9c 	bl	8000d84 <__aeabi_fmul>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	61fb      	str	r3, [r7, #28]
    scalar_KF.estimate_state = pred_state + Kalman_term;
 8004e50:	69f9      	ldr	r1, [r7, #28]
 8004e52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e54:	f7fb fe8e 	bl	8000b74 <__addsf3>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	617b      	str	r3, [r7, #20]

    //Estimation of cov.
    scalar_KF.estimate_cov = (1 - scalar_KF.estimate_state) * pred_cov;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004e64:	f7fb fe84 	bl	8000b70 <__aeabi_fsub>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fb ff89 	bl	8000d84 <__aeabi_fmul>
 8004e72:	4603      	mov	r3, r0
 8004e74:	613b      	str	r3, [r7, #16]

    return scalar_KF;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	461c      	mov	r4, r3
 8004e7a:	f107 0310 	add.w	r3, r7, #16
 8004e7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	373c      	adds	r7, #60	; 0x3c
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd90      	pop	{r4, r7, pc}

08004e8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e92:	b672      	cpsid	i
}
 8004e94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e96:	e7fe      	b.n	8004e96 <Error_Handler+0x8>

08004e98 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8004ea0:	2254      	movs	r2, #84	; 0x54
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4803      	ldr	r0, [pc, #12]	; (8004eb4 <MPU6050_Init+0x1c>)
 8004ea6:	f00e fec7 	bl	8013c38 <memcpy>
}
 8004eaa:	bf00      	nop
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20002530 	.word	0x20002530

08004eb8 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	6039      	str	r1, [r7, #0]
 8004ec2:	71fb      	strb	r3, [r7, #7]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8004ec8:	23d0      	movs	r3, #208	; 0xd0
 8004eca:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	b299      	uxth	r1, r3
 8004ed4:	f107 020c 	add.w	r2, r7, #12
 8004ed8:	230a      	movs	r3, #10
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	2301      	movs	r3, #1
 8004ede:	4808      	ldr	r0, [pc, #32]	; (8004f00 <I2C_Read+0x48>)
 8004ee0:	f001 fb48 	bl	8006574 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	b299      	uxth	r1, r3
 8004ee8:	79bb      	ldrb	r3, [r7, #6]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2264      	movs	r2, #100	; 0x64
 8004eee:	9200      	str	r2, [sp, #0]
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	4803      	ldr	r0, [pc, #12]	; (8004f00 <I2C_Read+0x48>)
 8004ef4:	f001 fc3c 	bl	8006770 <HAL_I2C_Master_Receive>
}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20002530 	.word	0x20002530

08004f04 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	460a      	mov	r2, r1
 8004f0e:	71fb      	strb	r3, [r7, #7]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8004f18:	79bb      	ldrb	r3, [r7, #6]
 8004f1a:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8004f1c:	23d0      	movs	r3, #208	; 0xd0
 8004f1e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	b299      	uxth	r1, r3
 8004f24:	f107 020c 	add.w	r2, r7, #12
 8004f28:	2364      	movs	r3, #100	; 0x64
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	4803      	ldr	r0, [pc, #12]	; (8004f3c <I2C_Write8+0x38>)
 8004f30:	f001 fb20 	bl	8006574 <HAL_I2C_Master_Transmit>
}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20002530 	.word	0x20002530

08004f40 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8004f4c:	2180      	movs	r1, #128	; 0x80
 8004f4e:	206b      	movs	r0, #107	; 0x6b
 8004f50:	f7ff ffd8 	bl	8004f04 <I2C_Write8>
	HAL_Delay(100);
 8004f54:	2064      	movs	r0, #100	; 0x64
 8004f56:	f000 fe05 	bl	8005b64 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	791b      	ldrb	r3, [r3, #4]
 8004f68:	019b      	lsls	r3, r3, #6
 8004f6a:	b25b      	sxtb	r3, r3
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	b25a      	sxtb	r2, r3
 8004f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	b25b      	sxtb	r3, r3
 8004f7a:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	206b      	movs	r0, #107	; 0x6b
 8004f82:	f7ff ffbf 	bl	8004f04 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8004f86:	2064      	movs	r0, #100	; 0x64
 8004f88:	f000 fdec 	bl	8005b64 <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	78db      	ldrb	r3, [r3, #3]
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	201a      	movs	r0, #26
 8004fa0:	f7ff ffb0 	bl	8004f04 <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	785b      	ldrb	r3, [r3, #1]
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f003 0318 	and.w	r3, r3, #24
 8004fb4:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	201b      	movs	r0, #27
 8004fbc:	f7ff ffa2 	bl	8004f04 <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	789b      	ldrb	r3, [r3, #2]
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	f003 0318 	and.w	r3, r3, #24
 8004fd0:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	201c      	movs	r0, #28
 8004fd8:	f7ff ff94 	bl	8004f04 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8004fdc:	2004      	movs	r0, #4
 8004fde:	f000 f855 	bl	800508c <MPU6050_Set_SMPRT_DIV>


	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	789b      	ldrb	r3, [r3, #2]
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d81e      	bhi.n	8005028 <MPU6050_Config+0xe8>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <MPU6050_Config+0xb0>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005001 	.word	0x08005001
 8004ff4:	0800500b 	.word	0x0800500b
 8004ff8:	08005015 	.word	0x08005015
 8004ffc:	0800501f 	.word	0x0800501f
	{
		case AFS_SEL_2g:
			accelScalingFactor = 1/16384.0f;
 8005000:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <MPU6050_Config+0x134>)
 8005002:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8005006:	601a      	str	r2, [r3, #0]
			break;
 8005008:	e00f      	b.n	800502a <MPU6050_Config+0xea>

		case AFS_SEL_4g:
			accelScalingFactor =1/8192.0f;
 800500a:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <MPU6050_Config+0x134>)
 800500c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8005010:	601a      	str	r2, [r3, #0]
				break;
 8005012:	e00a      	b.n	800502a <MPU6050_Config+0xea>

		case AFS_SEL_8g:
			accelScalingFactor =1/ 4096.0f;
 8005014:	4b17      	ldr	r3, [pc, #92]	; (8005074 <MPU6050_Config+0x134>)
 8005016:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800501a:	601a      	str	r2, [r3, #0]
			break;
 800501c:	e005      	b.n	800502a <MPU6050_Config+0xea>

		case AFS_SEL_16g:
			accelScalingFactor = 1/2048.0f;
 800501e:	4b15      	ldr	r3, [pc, #84]	; (8005074 <MPU6050_Config+0x134>)
 8005020:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8005024:	601a      	str	r2, [r3, #0]
			break;
 8005026:	e000      	b.n	800502a <MPU6050_Config+0xea>

		default:
			break;
 8005028:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	785b      	ldrb	r3, [r3, #1]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d81a      	bhi.n	8005068 <MPU6050_Config+0x128>
 8005032:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <MPU6050_Config+0xf8>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	08005049 	.word	0x08005049
 800503c:	08005051 	.word	0x08005051
 8005040:	08005059 	.word	0x08005059
 8005044:	08005061 	.word	0x08005061
	{
		case FS_SEL_250:
			gyroScalingFactor = 1/131.0f;
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <MPU6050_Config+0x138>)
 800504a:	4a0c      	ldr	r2, [pc, #48]	; (800507c <MPU6050_Config+0x13c>)
 800504c:	601a      	str	r2, [r3, #0]
			break;
 800504e:	e00c      	b.n	800506a <MPU6050_Config+0x12a>

		case FS_SEL_500:
				gyroScalingFactor = 1/65.5f;
 8005050:	4b09      	ldr	r3, [pc, #36]	; (8005078 <MPU6050_Config+0x138>)
 8005052:	4a0b      	ldr	r2, [pc, #44]	; (8005080 <MPU6050_Config+0x140>)
 8005054:	601a      	str	r2, [r3, #0]
				break;
 8005056:	e008      	b.n	800506a <MPU6050_Config+0x12a>

		case FS_SEL_1000:
			gyroScalingFactor = 1/32.8f;
 8005058:	4b07      	ldr	r3, [pc, #28]	; (8005078 <MPU6050_Config+0x138>)
 800505a:	4a0a      	ldr	r2, [pc, #40]	; (8005084 <MPU6050_Config+0x144>)
 800505c:	601a      	str	r2, [r3, #0]
			break;
 800505e:	e004      	b.n	800506a <MPU6050_Config+0x12a>

		case FS_SEL_2000:
			gyroScalingFactor = 1/16.4f;
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <MPU6050_Config+0x138>)
 8005062:	4a09      	ldr	r2, [pc, #36]	; (8005088 <MPU6050_Config+0x148>)
 8005064:	601a      	str	r2, [r3, #0]
			break;
 8005066:	e000      	b.n	800506a <MPU6050_Config+0x12a>

		default:
			break;
 8005068:	bf00      	nop
	}

}
 800506a:	bf00      	nop
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20002584 	.word	0x20002584
 8005078:	20002588 	.word	0x20002588
 800507c:	3bfa232d 	.word	0x3bfa232d
 8005080:	3c7a232d 	.word	0x3c7a232d
 8005084:	3cf9c190 	.word	0x3cf9c190
 8005088:	3d79c190 	.word	0x3d79c190

0800508c <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	4619      	mov	r1, r3
 800509a:	2019      	movs	r0, #25
 800509c:	f7ff ff32 	bl	8004f04 <I2C_Write8>
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <MPU6050_Get_Accel_RawData>:

}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 80050b0:	f107 031c 	add.w	r3, r7, #28
 80050b4:	3301      	adds	r3, #1
 80050b6:	2201      	movs	r2, #1
 80050b8:	4619      	mov	r1, r3
 80050ba:	203a      	movs	r0, #58	; 0x3a
 80050bc:	f7ff fefc 	bl	8004eb8 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 80050c0:	7f7b      	ldrb	r3, [r7, #29]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04f      	beq.n	8005166 <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 80050c6:	f107 0314 	add.w	r3, r7, #20
 80050ca:	2206      	movs	r2, #6
 80050cc:	4619      	mov	r1, r3
 80050ce:	203b      	movs	r0, #59	; 0x3b
 80050d0:	f7ff fef2 	bl	8004eb8 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 80050d4:	7d3b      	ldrb	r3, [r7, #20]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	b29a      	uxth	r2, r3
 80050dc:	7d7b      	ldrb	r3, [r7, #21]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	4413      	add	r3, r2
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	b21a      	sxth	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 80050ea:	7dbb      	ldrb	r3, [r7, #22]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	7dfb      	ldrb	r3, [r7, #23]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	4413      	add	r3, r2
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	b21a      	sxth	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8005100:	7e3b      	ldrb	r3, [r7, #24]
 8005102:	b29b      	uxth	r3, r3
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	b29a      	uxth	r2, r3
 8005108:	7e7b      	ldrb	r3, [r7, #25]
 800510a:	b29b      	uxth	r3, r3
 800510c:	4413      	add	r3, r2
 800510e:	b29b      	uxth	r3, r3
 8005110:	b21a      	sxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8005116:	f107 030c 	add.w	r3, r7, #12
 800511a:	2206      	movs	r2, #6
 800511c:	4619      	mov	r1, r3
 800511e:	2043      	movs	r0, #67	; 0x43
 8005120:	f7ff feca 	bl	8004eb8 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8005124:	7b3b      	ldrb	r3, [r7, #12]
 8005126:	b29b      	uxth	r3, r3
 8005128:	021b      	lsls	r3, r3, #8
 800512a:	b29a      	uxth	r2, r3
 800512c:	7b7b      	ldrb	r3, [r7, #13]
 800512e:	b29b      	uxth	r3, r3
 8005130:	4413      	add	r3, r2
 8005132:	b29b      	uxth	r3, r3
 8005134:	b21a      	sxth	r2, r3
 8005136:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <MPU6050_Get_Accel_RawData+0xc8>)
 8005138:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 800513a:	7bbb      	ldrb	r3, [r7, #14]
 800513c:	b29b      	uxth	r3, r3
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	b29a      	uxth	r2, r3
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	b29b      	uxth	r3, r3
 8005146:	4413      	add	r3, r2
 8005148:	b29b      	uxth	r3, r3
 800514a:	b21a      	sxth	r2, r3
 800514c:	4b08      	ldr	r3, [pc, #32]	; (8005170 <MPU6050_Get_Accel_RawData+0xc8>)
 800514e:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8005150:	7c3b      	ldrb	r3, [r7, #16]
 8005152:	b29b      	uxth	r3, r3
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	b29a      	uxth	r2, r3
 8005158:	7c7b      	ldrb	r3, [r7, #17]
 800515a:	b29b      	uxth	r3, r3
 800515c:	4413      	add	r3, r2
 800515e:	b29b      	uxth	r3, r3
 8005160:	b21a      	sxth	r2, r3
 8005162:	4b03      	ldr	r3, [pc, #12]	; (8005170 <MPU6050_Get_Accel_RawData+0xc8>)
 8005164:	809a      	strh	r2, [r3, #4]
	}
}
 8005166:	bf00      	nop
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	2000258c 	.word	0x2000258c

08005174 <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 800517c:	f107 0308 	add.w	r3, r7, #8
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff ff91 	bl	80050a8 <MPU6050_Get_Accel_RawData>

	//Accel Scale data
	scaledDef->x = (AccelRData.x*accelScalingFactor)*9.81f;
 8005186:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800518a:	4618      	mov	r0, r3
 800518c:	f7fb fda6 	bl	8000cdc <__aeabi_i2f>
 8005190:	4602      	mov	r2, r0
 8005192:	4b1e      	ldr	r3, [pc, #120]	; (800520c <MPU6050_Get_Accel_Scale+0x98>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f7fb fdf3 	bl	8000d84 <__aeabi_fmul>
 800519e:	4603      	mov	r3, r0
 80051a0:	491b      	ldr	r1, [pc, #108]	; (8005210 <MPU6050_Get_Accel_Scale+0x9c>)
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fb fdee 	bl	8000d84 <__aeabi_fmul>
 80051a8:	4603      	mov	r3, r0
 80051aa:	461a      	mov	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	601a      	str	r2, [r3, #0]
	scaledDef->y = (AccelRData.y*accelScalingFactor)*9.81f;
 80051b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fb fd91 	bl	8000cdc <__aeabi_i2f>
 80051ba:	4602      	mov	r2, r0
 80051bc:	4b13      	ldr	r3, [pc, #76]	; (800520c <MPU6050_Get_Accel_Scale+0x98>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f7fb fdde 	bl	8000d84 <__aeabi_fmul>
 80051c8:	4603      	mov	r3, r0
 80051ca:	4911      	ldr	r1, [pc, #68]	; (8005210 <MPU6050_Get_Accel_Scale+0x9c>)
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fb fdd9 	bl	8000d84 <__aeabi_fmul>
 80051d2:	4603      	mov	r3, r0
 80051d4:	461a      	mov	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	605a      	str	r2, [r3, #4]
	scaledDef->z = (AccelRData.z*accelScalingFactor)*9.81f;
 80051da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fb fd7c 	bl	8000cdc <__aeabi_i2f>
 80051e4:	4602      	mov	r2, r0
 80051e6:	4b09      	ldr	r3, [pc, #36]	; (800520c <MPU6050_Get_Accel_Scale+0x98>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	4610      	mov	r0, r2
 80051ee:	f7fb fdc9 	bl	8000d84 <__aeabi_fmul>
 80051f2:	4603      	mov	r3, r0
 80051f4:	4906      	ldr	r1, [pc, #24]	; (8005210 <MPU6050_Get_Accel_Scale+0x9c>)
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fb fdc4 	bl	8000d84 <__aeabi_fmul>
 80051fc:	4603      	mov	r3, r0
 80051fe:	461a      	mov	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	20002584 	.word	0x20002584
 8005210:	411cf5c3 	.word	0x411cf5c3

08005214 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]

	//Accel Raw Data
	rawDef->x = GyroRW[0];
 800521c:	4b09      	ldr	r3, [pc, #36]	; (8005244 <MPU6050_Get_Gyro_RawData+0x30>)
 800521e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8005226:	4b07      	ldr	r3, [pc, #28]	; (8005244 <MPU6050_Get_Gyro_RawData+0x30>)
 8005228:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8005230:	4b04      	ldr	r3, [pc, #16]	; (8005244 <MPU6050_Get_Gyro_RawData+0x30>)
 8005232:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	809a      	strh	r2, [r3, #4]

}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr
 8005244:	2000258c 	.word	0x2000258c

08005248 <MPU6050_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU6050_Get_Gyro_Scale(ScaledData_Def *scaledDef)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8005250:	f107 0308 	add.w	r3, r7, #8
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff ffdd 	bl	8005214 <MPU6050_Get_Gyro_RawData>

	//Gyro Scale data
	scaledDef->x = myGyroRaw.x*gyroScalingFactor +5.01404791f; // x-Axis - offset
 800525a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb fd3c 	bl	8000cdc <__aeabi_i2f>
 8005264:	4602      	mov	r2, r0
 8005266:	4b1e      	ldr	r3, [pc, #120]	; (80052e0 <MPU6050_Get_Gyro_Scale+0x98>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4619      	mov	r1, r3
 800526c:	4610      	mov	r0, r2
 800526e:	f7fb fd89 	bl	8000d84 <__aeabi_fmul>
 8005272:	4603      	mov	r3, r0
 8005274:	491b      	ldr	r1, [pc, #108]	; (80052e4 <MPU6050_Get_Gyro_Scale+0x9c>)
 8005276:	4618      	mov	r0, r3
 8005278:	f7fb fc7c 	bl	8000b74 <__addsf3>
 800527c:	4603      	mov	r3, r0
 800527e:	461a      	mov	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	601a      	str	r2, [r3, #0]
	scaledDef->y = myGyroRaw.y*gyroScalingFactor -4.033901358f; // y-Axis
 8005284:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005288:	4618      	mov	r0, r3
 800528a:	f7fb fd27 	bl	8000cdc <__aeabi_i2f>
 800528e:	4602      	mov	r2, r0
 8005290:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <MPU6050_Get_Gyro_Scale+0x98>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4619      	mov	r1, r3
 8005296:	4610      	mov	r0, r2
 8005298:	f7fb fd74 	bl	8000d84 <__aeabi_fmul>
 800529c:	4603      	mov	r3, r0
 800529e:	4912      	ldr	r1, [pc, #72]	; (80052e8 <MPU6050_Get_Gyro_Scale+0xa0>)
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fb fc65 	bl	8000b70 <__aeabi_fsub>
 80052a6:	4603      	mov	r3, r0
 80052a8:	461a      	mov	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	605a      	str	r2, [r3, #4]
	scaledDef->z = myGyroRaw.z*gyroScalingFactor -0.200014136f; // z-Axis
 80052ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb fd12 	bl	8000cdc <__aeabi_i2f>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <MPU6050_Get_Gyro_Scale+0x98>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f7fb fd5f 	bl	8000d84 <__aeabi_fmul>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4908      	ldr	r1, [pc, #32]	; (80052ec <MPU6050_Get_Gyro_Scale+0xa4>)
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fb fc50 	bl	8000b70 <__aeabi_fsub>
 80052d0:	4603      	mov	r3, r0
 80052d2:	461a      	mov	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20002588 	.word	0x20002588
 80052e4:	40a07315 	.word	0x40a07315
 80052e8:	408115b8 	.word	0x408115b8
 80052ec:	3e4cd081 	.word	0x3e4cd081

080052f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80052f6:	4b15      	ldr	r3, [pc, #84]	; (800534c <HAL_MspInit+0x5c>)
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	4a14      	ldr	r2, [pc, #80]	; (800534c <HAL_MspInit+0x5c>)
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	6193      	str	r3, [r2, #24]
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <HAL_MspInit+0x5c>)
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	60bb      	str	r3, [r7, #8]
 800530c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800530e:	4b0f      	ldr	r3, [pc, #60]	; (800534c <HAL_MspInit+0x5c>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	4a0e      	ldr	r2, [pc, #56]	; (800534c <HAL_MspInit+0x5c>)
 8005314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005318:	61d3      	str	r3, [r2, #28]
 800531a:	4b0c      	ldr	r3, [pc, #48]	; (800534c <HAL_MspInit+0x5c>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005322:	607b      	str	r3, [r7, #4]
 8005324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005326:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <HAL_MspInit+0x60>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	4a04      	ldr	r2, [pc, #16]	; (8005350 <HAL_MspInit+0x60>)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr
 800534c:	40021000 	.word	0x40021000
 8005350:	40010000 	.word	0x40010000

08005354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	; 0x28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800535c:	f107 0318 	add.w	r3, r7, #24
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	605a      	str	r2, [r3, #4]
 8005366:	609a      	str	r2, [r3, #8]
 8005368:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a3b      	ldr	r2, [pc, #236]	; (800545c <HAL_I2C_MspInit+0x108>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d134      	bne.n	80053de <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005374:	4b3a      	ldr	r3, [pc, #232]	; (8005460 <HAL_I2C_MspInit+0x10c>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	4a39      	ldr	r2, [pc, #228]	; (8005460 <HAL_I2C_MspInit+0x10c>)
 800537a:	f043 0308 	orr.w	r3, r3, #8
 800537e:	6193      	str	r3, [r2, #24]
 8005380:	4b37      	ldr	r3, [pc, #220]	; (8005460 <HAL_I2C_MspInit+0x10c>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800538c:	23c0      	movs	r3, #192	; 0xc0
 800538e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005390:	2312      	movs	r3, #18
 8005392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005394:	2303      	movs	r3, #3
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005398:	f107 0318 	add.w	r3, r7, #24
 800539c:	4619      	mov	r1, r3
 800539e:	4831      	ldr	r0, [pc, #196]	; (8005464 <HAL_I2C_MspInit+0x110>)
 80053a0:	f000 fdd2 	bl	8005f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80053a4:	4b2e      	ldr	r3, [pc, #184]	; (8005460 <HAL_I2C_MspInit+0x10c>)
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	4a2d      	ldr	r2, [pc, #180]	; (8005460 <HAL_I2C_MspInit+0x10c>)
 80053aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053ae:	61d3      	str	r3, [r2, #28]
 80053b0:	4b2b      	ldr	r3, [pc, #172]	; (8005460 <HAL_I2C_MspInit+0x10c>)
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80053bc:	2200      	movs	r2, #0
 80053be:	2100      	movs	r1, #0
 80053c0:	201f      	movs	r0, #31
 80053c2:	f000 fcca 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80053c6:	201f      	movs	r0, #31
 80053c8:	f000 fce3 	bl	8005d92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80053cc:	2200      	movs	r2, #0
 80053ce:	2100      	movs	r1, #0
 80053d0:	2020      	movs	r0, #32
 80053d2:	f000 fcc2 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80053d6:	2020      	movs	r0, #32
 80053d8:	f000 fcdb 	bl	8005d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80053dc:	e039      	b.n	8005452 <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a21      	ldr	r2, [pc, #132]	; (8005468 <HAL_I2C_MspInit+0x114>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d134      	bne.n	8005452 <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053e8:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <HAL_I2C_MspInit+0x10c>)
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	4a1c      	ldr	r2, [pc, #112]	; (8005460 <HAL_I2C_MspInit+0x10c>)
 80053ee:	f043 0308 	orr.w	r3, r3, #8
 80053f2:	6193      	str	r3, [r2, #24]
 80053f4:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <HAL_I2C_MspInit+0x10c>)
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005400:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005406:	2312      	movs	r3, #18
 8005408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800540a:	2303      	movs	r3, #3
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800540e:	f107 0318 	add.w	r3, r7, #24
 8005412:	4619      	mov	r1, r3
 8005414:	4813      	ldr	r0, [pc, #76]	; (8005464 <HAL_I2C_MspInit+0x110>)
 8005416:	f000 fd97 	bl	8005f48 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800541a:	4b11      	ldr	r3, [pc, #68]	; (8005460 <HAL_I2C_MspInit+0x10c>)
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	4a10      	ldr	r2, [pc, #64]	; (8005460 <HAL_I2C_MspInit+0x10c>)
 8005420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005424:	61d3      	str	r3, [r2, #28]
 8005426:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <HAL_I2C_MspInit+0x10c>)
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800542e:	60bb      	str	r3, [r7, #8]
 8005430:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8005432:	2200      	movs	r2, #0
 8005434:	2100      	movs	r1, #0
 8005436:	2021      	movs	r0, #33	; 0x21
 8005438:	f000 fc8f 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800543c:	2021      	movs	r0, #33	; 0x21
 800543e:	f000 fca8 	bl	8005d92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8005442:	2200      	movs	r2, #0
 8005444:	2100      	movs	r1, #0
 8005446:	2022      	movs	r0, #34	; 0x22
 8005448:	f000 fc87 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800544c:	2022      	movs	r0, #34	; 0x22
 800544e:	f000 fca0 	bl	8005d92 <HAL_NVIC_EnableIRQ>
}
 8005452:	bf00      	nop
 8005454:	3728      	adds	r7, #40	; 0x28
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40005400 	.word	0x40005400
 8005460:	40021000 	.word	0x40021000
 8005464:	40010c00 	.word	0x40010c00
 8005468:	40005800 	.word	0x40005800

0800546c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005474:	f107 0310 	add.w	r3, r7, #16
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	605a      	str	r2, [r3, #4]
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1b      	ldr	r2, [pc, #108]	; (80054f4 <HAL_SPI_MspInit+0x88>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d12f      	bne.n	80054ec <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800548c:	4b1a      	ldr	r3, [pc, #104]	; (80054f8 <HAL_SPI_MspInit+0x8c>)
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	4a19      	ldr	r2, [pc, #100]	; (80054f8 <HAL_SPI_MspInit+0x8c>)
 8005492:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005496:	6193      	str	r3, [r2, #24]
 8005498:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <HAL_SPI_MspInit+0x8c>)
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a4:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <HAL_SPI_MspInit+0x8c>)
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <HAL_SPI_MspInit+0x8c>)
 80054aa:	f043 0304 	orr.w	r3, r3, #4
 80054ae:	6193      	str	r3, [r2, #24]
 80054b0:	4b11      	ldr	r3, [pc, #68]	; (80054f8 <HAL_SPI_MspInit+0x8c>)
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80054bc:	23a0      	movs	r3, #160	; 0xa0
 80054be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c0:	2302      	movs	r3, #2
 80054c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054c4:	2303      	movs	r3, #3
 80054c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c8:	f107 0310 	add.w	r3, r7, #16
 80054cc:	4619      	mov	r1, r3
 80054ce:	480b      	ldr	r0, [pc, #44]	; (80054fc <HAL_SPI_MspInit+0x90>)
 80054d0:	f000 fd3a 	bl	8005f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80054d4:	2340      	movs	r3, #64	; 0x40
 80054d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e0:	f107 0310 	add.w	r3, r7, #16
 80054e4:	4619      	mov	r1, r3
 80054e6:	4805      	ldr	r0, [pc, #20]	; (80054fc <HAL_SPI_MspInit+0x90>)
 80054e8:	f000 fd2e 	bl	8005f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80054ec:	bf00      	nop
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40013000 	.word	0x40013000
 80054f8:	40021000 	.word	0x40021000
 80054fc:	40010800 	.word	0x40010800

08005500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005510:	d114      	bne.n	800553c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005512:	4b19      	ldr	r3, [pc, #100]	; (8005578 <HAL_TIM_Base_MspInit+0x78>)
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	4a18      	ldr	r2, [pc, #96]	; (8005578 <HAL_TIM_Base_MspInit+0x78>)
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	61d3      	str	r3, [r2, #28]
 800551e:	4b16      	ldr	r3, [pc, #88]	; (8005578 <HAL_TIM_Base_MspInit+0x78>)
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800552a:	2200      	movs	r2, #0
 800552c:	2100      	movs	r1, #0
 800552e:	201c      	movs	r0, #28
 8005530:	f000 fc13 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005534:	201c      	movs	r0, #28
 8005536:	f000 fc2c 	bl	8005d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800553a:	e018      	b.n	800556e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a0e      	ldr	r2, [pc, #56]	; (800557c <HAL_TIM_Base_MspInit+0x7c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d113      	bne.n	800556e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005546:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <HAL_TIM_Base_MspInit+0x78>)
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	4a0b      	ldr	r2, [pc, #44]	; (8005578 <HAL_TIM_Base_MspInit+0x78>)
 800554c:	f043 0302 	orr.w	r3, r3, #2
 8005550:	61d3      	str	r3, [r2, #28]
 8005552:	4b09      	ldr	r3, [pc, #36]	; (8005578 <HAL_TIM_Base_MspInit+0x78>)
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800555e:	2200      	movs	r2, #0
 8005560:	2100      	movs	r1, #0
 8005562:	201d      	movs	r0, #29
 8005564:	f000 fbf9 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005568:	201d      	movs	r0, #29
 800556a:	f000 fc12 	bl	8005d92 <HAL_NVIC_EnableIRQ>
}
 800556e:	bf00      	nop
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40021000 	.word	0x40021000
 800557c:	40000400 	.word	0x40000400

08005580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	; 0x28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005588:	f107 0314 	add.w	r3, r7, #20
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	605a      	str	r2, [r3, #4]
 8005592:	609a      	str	r2, [r3, #8]
 8005594:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559e:	d118      	bne.n	80055d2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055a0:	4b25      	ldr	r3, [pc, #148]	; (8005638 <HAL_TIM_MspPostInit+0xb8>)
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	4a24      	ldr	r2, [pc, #144]	; (8005638 <HAL_TIM_MspPostInit+0xb8>)
 80055a6:	f043 0304 	orr.w	r3, r3, #4
 80055aa:	6193      	str	r3, [r2, #24]
 80055ac:	4b22      	ldr	r3, [pc, #136]	; (8005638 <HAL_TIM_MspPostInit+0xb8>)
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80055b8:	2301      	movs	r3, #1
 80055ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055bc:	2302      	movs	r3, #2
 80055be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c0:	2302      	movs	r3, #2
 80055c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c4:	f107 0314 	add.w	r3, r7, #20
 80055c8:	4619      	mov	r1, r3
 80055ca:	481c      	ldr	r0, [pc, #112]	; (800563c <HAL_TIM_MspPostInit+0xbc>)
 80055cc:	f000 fcbc 	bl	8005f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80055d0:	e02e      	b.n	8005630 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1a      	ldr	r2, [pc, #104]	; (8005640 <HAL_TIM_MspPostInit+0xc0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d129      	bne.n	8005630 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055dc:	4b16      	ldr	r3, [pc, #88]	; (8005638 <HAL_TIM_MspPostInit+0xb8>)
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	4a15      	ldr	r2, [pc, #84]	; (8005638 <HAL_TIM_MspPostInit+0xb8>)
 80055e2:	f043 0310 	orr.w	r3, r3, #16
 80055e6:	6193      	str	r3, [r2, #24]
 80055e8:	4b13      	ldr	r3, [pc, #76]	; (8005638 <HAL_TIM_MspPostInit+0xb8>)
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80055f4:	2340      	movs	r3, #64	; 0x40
 80055f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f8:	2302      	movs	r3, #2
 80055fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055fc:	2302      	movs	r3, #2
 80055fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005600:	f107 0314 	add.w	r3, r7, #20
 8005604:	4619      	mov	r1, r3
 8005606:	480f      	ldr	r0, [pc, #60]	; (8005644 <HAL_TIM_MspPostInit+0xc4>)
 8005608:	f000 fc9e 	bl	8005f48 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800560c:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <HAL_TIM_MspPostInit+0xc8>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
 800562a:	4a07      	ldr	r2, [pc, #28]	; (8005648 <HAL_TIM_MspPostInit+0xc8>)
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	6053      	str	r3, [r2, #4]
}
 8005630:	bf00      	nop
 8005632:	3728      	adds	r7, #40	; 0x28
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40021000 	.word	0x40021000
 800563c:	40010800 	.word	0x40010800
 8005640:	40000400 	.word	0x40000400
 8005644:	40011000 	.word	0x40011000
 8005648:	40010000 	.word	0x40010000

0800564c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08a      	sub	sp, #40	; 0x28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005654:	f107 0318 	add.w	r3, r7, #24
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	609a      	str	r2, [r3, #8]
 8005660:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a39      	ldr	r2, [pc, #228]	; (800574c <HAL_UART_MspInit+0x100>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d13a      	bne.n	80056e2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800566c:	4b38      	ldr	r3, [pc, #224]	; (8005750 <HAL_UART_MspInit+0x104>)
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	4a37      	ldr	r2, [pc, #220]	; (8005750 <HAL_UART_MspInit+0x104>)
 8005672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005676:	6193      	str	r3, [r2, #24]
 8005678:	4b35      	ldr	r3, [pc, #212]	; (8005750 <HAL_UART_MspInit+0x104>)
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005684:	4b32      	ldr	r3, [pc, #200]	; (8005750 <HAL_UART_MspInit+0x104>)
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	4a31      	ldr	r2, [pc, #196]	; (8005750 <HAL_UART_MspInit+0x104>)
 800568a:	f043 0304 	orr.w	r3, r3, #4
 800568e:	6193      	str	r3, [r2, #24]
 8005690:	4b2f      	ldr	r3, [pc, #188]	; (8005750 <HAL_UART_MspInit+0x104>)
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800569c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a2:	2302      	movs	r3, #2
 80056a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056a6:	2303      	movs	r3, #3
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056aa:	f107 0318 	add.w	r3, r7, #24
 80056ae:	4619      	mov	r1, r3
 80056b0:	4828      	ldr	r0, [pc, #160]	; (8005754 <HAL_UART_MspInit+0x108>)
 80056b2:	f000 fc49 	bl	8005f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056bc:	2300      	movs	r3, #0
 80056be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c4:	f107 0318 	add.w	r3, r7, #24
 80056c8:	4619      	mov	r1, r3
 80056ca:	4822      	ldr	r0, [pc, #136]	; (8005754 <HAL_UART_MspInit+0x108>)
 80056cc:	f000 fc3c 	bl	8005f48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80056d0:	2200      	movs	r2, #0
 80056d2:	2100      	movs	r1, #0
 80056d4:	2025      	movs	r0, #37	; 0x25
 80056d6:	f000 fb40 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80056da:	2025      	movs	r0, #37	; 0x25
 80056dc:	f000 fb59 	bl	8005d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80056e0:	e030      	b.n	8005744 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1c      	ldr	r2, [pc, #112]	; (8005758 <HAL_UART_MspInit+0x10c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d12b      	bne.n	8005744 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80056ec:	4b18      	ldr	r3, [pc, #96]	; (8005750 <HAL_UART_MspInit+0x104>)
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	4a17      	ldr	r2, [pc, #92]	; (8005750 <HAL_UART_MspInit+0x104>)
 80056f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f6:	61d3      	str	r3, [r2, #28]
 80056f8:	4b15      	ldr	r3, [pc, #84]	; (8005750 <HAL_UART_MspInit+0x104>)
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005704:	4b12      	ldr	r3, [pc, #72]	; (8005750 <HAL_UART_MspInit+0x104>)
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	4a11      	ldr	r2, [pc, #68]	; (8005750 <HAL_UART_MspInit+0x104>)
 800570a:	f043 0304 	orr.w	r3, r3, #4
 800570e:	6193      	str	r3, [r2, #24]
 8005710:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <HAL_UART_MspInit+0x104>)
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800571c:	230c      	movs	r3, #12
 800571e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005720:	2302      	movs	r3, #2
 8005722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005724:	2302      	movs	r3, #2
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005728:	f107 0318 	add.w	r3, r7, #24
 800572c:	4619      	mov	r1, r3
 800572e:	4809      	ldr	r0, [pc, #36]	; (8005754 <HAL_UART_MspInit+0x108>)
 8005730:	f000 fc0a 	bl	8005f48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005734:	2200      	movs	r2, #0
 8005736:	2100      	movs	r1, #0
 8005738:	2026      	movs	r0, #38	; 0x26
 800573a:	f000 fb0e 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800573e:	2026      	movs	r0, #38	; 0x26
 8005740:	f000 fb27 	bl	8005d92 <HAL_NVIC_EnableIRQ>
}
 8005744:	bf00      	nop
 8005746:	3728      	adds	r7, #40	; 0x28
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40013800 	.word	0x40013800
 8005750:	40021000 	.word	0x40021000
 8005754:	40010800 	.word	0x40010800
 8005758:	40004400 	.word	0x40004400

0800575c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8005760:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <SDTimer_Handler+0x3c>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d006      	beq.n	8005778 <SDTimer_Handler+0x1c>
    Timer1--;
 800576a:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <SDTimer_Handler+0x3c>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	4b08      	ldr	r3, [pc, #32]	; (8005798 <SDTimer_Handler+0x3c>)
 8005776:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8005778:	4b08      	ldr	r3, [pc, #32]	; (800579c <SDTimer_Handler+0x40>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d006      	beq.n	8005790 <SDTimer_Handler+0x34>
    Timer2--;
 8005782:	4b06      	ldr	r3, [pc, #24]	; (800579c <SDTimer_Handler+0x40>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b2da      	uxtb	r2, r3
 800578c:	4b03      	ldr	r3, [pc, #12]	; (800579c <SDTimer_Handler+0x40>)
 800578e:	701a      	strb	r2, [r3, #0]
}
 8005790:	bf00      	nop
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr
 8005798:	20002593 	.word	0x20002593
 800579c:	20002594 	.word	0x20002594

080057a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80057a4:	e7fe      	b.n	80057a4 <NMI_Handler+0x4>

080057a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057a6:	b480      	push	{r7}
 80057a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057aa:	e7fe      	b.n	80057aa <HardFault_Handler+0x4>

080057ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057b0:	e7fe      	b.n	80057b0 <MemManage_Handler+0x4>

080057b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057b2:	b480      	push	{r7}
 80057b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057b6:	e7fe      	b.n	80057b6 <BusFault_Handler+0x4>

080057b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057bc:	e7fe      	b.n	80057bc <UsageFault_Handler+0x4>

080057be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057be:	b480      	push	{r7}
 80057c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057c2:	bf00      	nop
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr

080057ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057ca:	b480      	push	{r7}
 80057cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057ce:	bf00      	nop
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr

080057d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057d6:	b480      	push	{r7}
 80057d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057da:	bf00      	nop
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr
	...

080057e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <SysTick_Handler+0x30>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	3301      	adds	r3, #1
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	4b08      	ldr	r3, [pc, #32]	; (8005814 <SysTick_Handler+0x30>)
 80057f4:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 80057f6:	4b07      	ldr	r3, [pc, #28]	; (8005814 <SysTick_Handler+0x30>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b09      	cmp	r3, #9
 80057fe:	d904      	bls.n	800580a <SysTick_Handler+0x26>
  {
    FatFsCnt = 0;
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <SysTick_Handler+0x30>)
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 8005806:	f7ff ffa9 	bl	800575c <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800580a:	f000 f98f 	bl	8005b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800580e:	bf00      	nop
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20002592 	.word	0x20002592

08005818 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800581c:	4802      	ldr	r0, [pc, #8]	; (8005828 <TIM2_IRQHandler+0x10>)
 800581e:	f005 f9a3 	bl	800ab68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005822:	bf00      	nop
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000370 	.word	0x20000370

0800582c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005830:	4802      	ldr	r0, [pc, #8]	; (800583c <TIM3_IRQHandler+0x10>)
 8005832:	f005 f999 	bl	800ab68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	200003b8 	.word	0x200003b8

08005840 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005844:	4802      	ldr	r0, [pc, #8]	; (8005850 <I2C1_EV_IRQHandler+0x10>)
 8005846:	f001 fd61 	bl	800730c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800584a:	bf00      	nop
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000270 	.word	0x20000270

08005854 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005858:	4802      	ldr	r0, [pc, #8]	; (8005864 <I2C1_ER_IRQHandler+0x10>)
 800585a:	f001 feaa 	bl	80075b2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800585e:	bf00      	nop
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000270 	.word	0x20000270

08005868 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800586c:	4802      	ldr	r0, [pc, #8]	; (8005878 <I2C2_EV_IRQHandler+0x10>)
 800586e:	f001 fd4d 	bl	800730c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	200002c4 	.word	0x200002c4

0800587c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8005880:	4802      	ldr	r0, [pc, #8]	; (800588c <I2C2_ER_IRQHandler+0x10>)
 8005882:	f001 fe96 	bl	80075b2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	200002c4 	.word	0x200002c4

08005890 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005894:	4802      	ldr	r0, [pc, #8]	; (80058a0 <USART1_IRQHandler+0x10>)
 8005896:	f006 f861 	bl	800b95c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800589a:	bf00      	nop
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000400 	.word	0x20000400

080058a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058a8:	4802      	ldr	r0, [pc, #8]	; (80058b4 <USART2_IRQHandler+0x10>)
 80058aa:	f006 f857 	bl	800b95c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80058ae:	bf00      	nop
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000448 	.word	0x20000448

080058b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80058bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80058c0:	f000 fcde 	bl	8006280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80058c4:	bf00      	nop
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  return 1;
 80058cc:	2301      	movs	r3, #1
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <_kill>:

int _kill(int pid, int sig)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b082      	sub	sp, #8
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80058e0:	f00e f970 	bl	8013bc4 <__errno>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2216      	movs	r2, #22
 80058e8:	601a      	str	r2, [r3, #0]
  return -1;
 80058ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <_exit>:

void _exit (int status)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80058fe:	f04f 31ff 	mov.w	r1, #4294967295
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff ffe7 	bl	80058d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005908:	e7fe      	b.n	8005908 <_exit+0x12>

0800590a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	e00a      	b.n	8005932 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800591c:	f3af 8000 	nop.w
 8005920:	4601      	mov	r1, r0
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	60ba      	str	r2, [r7, #8]
 8005928:	b2ca      	uxtb	r2, r1
 800592a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	3301      	adds	r3, #1
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	429a      	cmp	r2, r3
 8005938:	dbf0      	blt.n	800591c <_read+0x12>
  }

  return len;
 800593a:	687b      	ldr	r3, [r7, #4]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e009      	b.n	800596a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	60ba      	str	r2, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f7fc fcec 	bl	800233c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	3301      	adds	r3, #1
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	429a      	cmp	r2, r3
 8005970:	dbf1      	blt.n	8005956 <_write+0x12>
  }
  return len;
 8005972:	687b      	ldr	r3, [r7, #4]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <_close>:

int _close(int file)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr

08005992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059a2:	605a      	str	r2, [r3, #4]
  return 0;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <_isatty>:

int _isatty(int file)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80059b8:	2301      	movs	r3, #1
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059e4:	4a14      	ldr	r2, [pc, #80]	; (8005a38 <_sbrk+0x5c>)
 80059e6:	4b15      	ldr	r3, [pc, #84]	; (8005a3c <_sbrk+0x60>)
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059f0:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <_sbrk+0x64>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d102      	bne.n	80059fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059f8:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <_sbrk+0x64>)
 80059fa:	4a12      	ldr	r2, [pc, #72]	; (8005a44 <_sbrk+0x68>)
 80059fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059fe:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <_sbrk+0x64>)
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4413      	add	r3, r2
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d207      	bcs.n	8005a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a0c:	f00e f8da 	bl	8013bc4 <__errno>
 8005a10:	4603      	mov	r3, r0
 8005a12:	220c      	movs	r2, #12
 8005a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1a:	e009      	b.n	8005a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a1c:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <_sbrk+0x64>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a22:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <_sbrk+0x64>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4413      	add	r3, r2
 8005a2a:	4a05      	ldr	r2, [pc, #20]	; (8005a40 <_sbrk+0x64>)
 8005a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20005000 	.word	0x20005000
 8005a3c:	00000400 	.word	0x00000400
 8005a40:	20002598 	.word	0x20002598
 8005a44:	20002920 	.word	0x20002920

08005a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a4c:	bf00      	nop
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005a54:	f7ff fff8 	bl	8005a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a58:	480b      	ldr	r0, [pc, #44]	; (8005a88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005a5a:	490c      	ldr	r1, [pc, #48]	; (8005a8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005a5c:	4a0c      	ldr	r2, [pc, #48]	; (8005a90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a60:	e002      	b.n	8005a68 <LoopCopyDataInit>

08005a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a66:	3304      	adds	r3, #4

08005a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a6c:	d3f9      	bcc.n	8005a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a6e:	4a09      	ldr	r2, [pc, #36]	; (8005a94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005a70:	4c09      	ldr	r4, [pc, #36]	; (8005a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a74:	e001      	b.n	8005a7a <LoopFillZerobss>

08005a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a78:	3204      	adds	r2, #4

08005a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a7c:	d3fb      	bcc.n	8005a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a7e:	f00e f8a7 	bl	8013bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005a82:	f7fc fc6d 	bl	8002360 <main>
  bx lr
 8005a86:	4770      	bx	lr
  ldr r0, =_sdata
 8005a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a8c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8005a90:	080166ec 	.word	0x080166ec
  ldr r2, =_sbss
 8005a94:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005a98:	20002920 	.word	0x20002920

08005a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005a9c:	e7fe      	b.n	8005a9c <ADC1_2_IRQHandler>
	...

08005aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005aa4:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <HAL_Init+0x28>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a07      	ldr	r2, [pc, #28]	; (8005ac8 <HAL_Init+0x28>)
 8005aaa:	f043 0310 	orr.w	r3, r3, #16
 8005aae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ab0:	2003      	movs	r0, #3
 8005ab2:	f000 f947 	bl	8005d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	f000 f808 	bl	8005acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005abc:	f7ff fc18 	bl	80052f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40022000 	.word	0x40022000

08005acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ad4:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <HAL_InitTick+0x54>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <HAL_InitTick+0x58>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	4619      	mov	r1, r3
 8005ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f95f 	bl	8005dae <HAL_SYSTICK_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e00e      	b.n	8005b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b0f      	cmp	r3, #15
 8005afe:	d80a      	bhi.n	8005b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b00:	2200      	movs	r2, #0
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	f04f 30ff 	mov.w	r0, #4294967295
 8005b08:	f000 f927 	bl	8005d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b0c:	4a06      	ldr	r2, [pc, #24]	; (8005b28 <HAL_InitTick+0x5c>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e000      	b.n	8005b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20000008 	.word	0x20000008
 8005b24:	20000010 	.word	0x20000010
 8005b28:	2000000c 	.word	0x2000000c

08005b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b30:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <HAL_IncTick+0x1c>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <HAL_IncTick+0x20>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	4a03      	ldr	r2, [pc, #12]	; (8005b4c <HAL_IncTick+0x20>)
 8005b3e:	6013      	str	r3, [r2, #0]
}
 8005b40:	bf00      	nop
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr
 8005b48:	20000010 	.word	0x20000010
 8005b4c:	2000259c 	.word	0x2000259c

08005b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  return uwTick;
 8005b54:	4b02      	ldr	r3, [pc, #8]	; (8005b60 <HAL_GetTick+0x10>)
 8005b56:	681b      	ldr	r3, [r3, #0]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr
 8005b60:	2000259c 	.word	0x2000259c

08005b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b6c:	f7ff fff0 	bl	8005b50 <HAL_GetTick>
 8005b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7c:	d005      	beq.n	8005b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <HAL_Delay+0x44>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b8a:	bf00      	nop
 8005b8c:	f7ff ffe0 	bl	8005b50 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d8f7      	bhi.n	8005b8c <HAL_Delay+0x28>
  {
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000010 	.word	0x20000010

08005bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bc8:	4013      	ands	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bde:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	60d3      	str	r3, [r2, #12]
}
 8005be4:	bf00      	nop
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	e000ed00 	.word	0xe000ed00

08005bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bf8:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <__NVIC_GetPriorityGrouping+0x18>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	0a1b      	lsrs	r3, r3, #8
 8005bfe:	f003 0307 	and.w	r3, r3, #7
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	e000ed00 	.word	0xe000ed00

08005c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	db0b      	blt.n	8005c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	f003 021f 	and.w	r2, r3, #31
 8005c28:	4906      	ldr	r1, [pc, #24]	; (8005c44 <__NVIC_EnableIRQ+0x34>)
 8005c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	2001      	movs	r0, #1
 8005c32:	fa00 f202 	lsl.w	r2, r0, r2
 8005c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr
 8005c44:	e000e100 	.word	0xe000e100

08005c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	6039      	str	r1, [r7, #0]
 8005c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	db0a      	blt.n	8005c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	490c      	ldr	r1, [pc, #48]	; (8005c94 <__NVIC_SetPriority+0x4c>)
 8005c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c66:	0112      	lsls	r2, r2, #4
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	440b      	add	r3, r1
 8005c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c70:	e00a      	b.n	8005c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	4908      	ldr	r1, [pc, #32]	; (8005c98 <__NVIC_SetPriority+0x50>)
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	3b04      	subs	r3, #4
 8005c80:	0112      	lsls	r2, r2, #4
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	440b      	add	r3, r1
 8005c86:	761a      	strb	r2, [r3, #24]
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bc80      	pop	{r7}
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	e000e100 	.word	0xe000e100
 8005c98:	e000ed00 	.word	0xe000ed00

08005c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b089      	sub	sp, #36	; 0x24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f1c3 0307 	rsb	r3, r3, #7
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	bf28      	it	cs
 8005cba:	2304      	movcs	r3, #4
 8005cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	2b06      	cmp	r3, #6
 8005cc4:	d902      	bls.n	8005ccc <NVIC_EncodePriority+0x30>
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	3b03      	subs	r3, #3
 8005cca:	e000      	b.n	8005cce <NVIC_EncodePriority+0x32>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43da      	mvns	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	401a      	ands	r2, r3
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	fa01 f303 	lsl.w	r3, r1, r3
 8005cee:	43d9      	mvns	r1, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf4:	4313      	orrs	r3, r2
         );
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3724      	adds	r7, #36	; 0x24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr

08005d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d10:	d301      	bcc.n	8005d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d12:	2301      	movs	r3, #1
 8005d14:	e00f      	b.n	8005d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <SysTick_Config+0x40>)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d1e:	210f      	movs	r1, #15
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	f7ff ff90 	bl	8005c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <SysTick_Config+0x40>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d2e:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <SysTick_Config+0x40>)
 8005d30:	2207      	movs	r2, #7
 8005d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	e000e010 	.word	0xe000e010

08005d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff ff2d 	bl	8005bac <__NVIC_SetPriorityGrouping>
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	4603      	mov	r3, r0
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d6c:	f7ff ff42 	bl	8005bf4 <__NVIC_GetPriorityGrouping>
 8005d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	6978      	ldr	r0, [r7, #20]
 8005d78:	f7ff ff90 	bl	8005c9c <NVIC_EncodePriority>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d82:	4611      	mov	r1, r2
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff ff5f 	bl	8005c48 <__NVIC_SetPriority>
}
 8005d8a:	bf00      	nop
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	4603      	mov	r3, r0
 8005d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff ff35 	bl	8005c10 <__NVIC_EnableIRQ>
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff ffa2 	bl	8005d00 <SysTick_Config>
 8005dbc:	4603      	mov	r3, r0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d008      	beq.n	8005df0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2204      	movs	r2, #4
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e020      	b.n	8005e32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 020e 	bic.w	r2, r2, #14
 8005dfe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	2101      	movs	r1, #1
 8005e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr

08005e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d005      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2204      	movs	r2, #4
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	73fb      	strb	r3, [r7, #15]
 8005e5e:	e051      	b.n	8005f04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 020e 	bic.w	r2, r2, #14
 8005e6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0201 	bic.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a22      	ldr	r2, [pc, #136]	; (8005f10 <HAL_DMA_Abort_IT+0xd4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d029      	beq.n	8005ede <HAL_DMA_Abort_IT+0xa2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <HAL_DMA_Abort_IT+0xd8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d022      	beq.n	8005eda <HAL_DMA_Abort_IT+0x9e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1f      	ldr	r2, [pc, #124]	; (8005f18 <HAL_DMA_Abort_IT+0xdc>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01a      	beq.n	8005ed4 <HAL_DMA_Abort_IT+0x98>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	; (8005f1c <HAL_DMA_Abort_IT+0xe0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d012      	beq.n	8005ece <HAL_DMA_Abort_IT+0x92>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <HAL_DMA_Abort_IT+0xe4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00a      	beq.n	8005ec8 <HAL_DMA_Abort_IT+0x8c>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <HAL_DMA_Abort_IT+0xe8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d102      	bne.n	8005ec2 <HAL_DMA_Abort_IT+0x86>
 8005ebc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ec0:	e00e      	b.n	8005ee0 <HAL_DMA_Abort_IT+0xa4>
 8005ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ec6:	e00b      	b.n	8005ee0 <HAL_DMA_Abort_IT+0xa4>
 8005ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ecc:	e008      	b.n	8005ee0 <HAL_DMA_Abort_IT+0xa4>
 8005ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ed2:	e005      	b.n	8005ee0 <HAL_DMA_Abort_IT+0xa4>
 8005ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ed8:	e002      	b.n	8005ee0 <HAL_DMA_Abort_IT+0xa4>
 8005eda:	2310      	movs	r3, #16
 8005edc:	e000      	b.n	8005ee0 <HAL_DMA_Abort_IT+0xa4>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4a11      	ldr	r2, [pc, #68]	; (8005f28 <HAL_DMA_Abort_IT+0xec>)
 8005ee2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
    } 
  }
  return status;
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40020008 	.word	0x40020008
 8005f14:	4002001c 	.word	0x4002001c
 8005f18:	40020030 	.word	0x40020030
 8005f1c:	40020044 	.word	0x40020044
 8005f20:	40020058 	.word	0x40020058
 8005f24:	4002006c 	.word	0x4002006c
 8005f28:	40020000 	.word	0x40020000

08005f2c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f3a:	b2db      	uxtb	r3, r3
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bc80      	pop	{r7}
 8005f44:	4770      	bx	lr
	...

08005f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b08b      	sub	sp, #44	; 0x2c
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f52:	2300      	movs	r3, #0
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005f56:	2300      	movs	r3, #0
 8005f58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f5a:	e169      	b.n	8006230 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	fa02 f303 	lsl.w	r3, r2, r3
 8005f64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	f040 8158 	bne.w	800622a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	4a9a      	ldr	r2, [pc, #616]	; (80061e8 <HAL_GPIO_Init+0x2a0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d05e      	beq.n	8006042 <HAL_GPIO_Init+0xfa>
 8005f84:	4a98      	ldr	r2, [pc, #608]	; (80061e8 <HAL_GPIO_Init+0x2a0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d875      	bhi.n	8006076 <HAL_GPIO_Init+0x12e>
 8005f8a:	4a98      	ldr	r2, [pc, #608]	; (80061ec <HAL_GPIO_Init+0x2a4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d058      	beq.n	8006042 <HAL_GPIO_Init+0xfa>
 8005f90:	4a96      	ldr	r2, [pc, #600]	; (80061ec <HAL_GPIO_Init+0x2a4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d86f      	bhi.n	8006076 <HAL_GPIO_Init+0x12e>
 8005f96:	4a96      	ldr	r2, [pc, #600]	; (80061f0 <HAL_GPIO_Init+0x2a8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d052      	beq.n	8006042 <HAL_GPIO_Init+0xfa>
 8005f9c:	4a94      	ldr	r2, [pc, #592]	; (80061f0 <HAL_GPIO_Init+0x2a8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d869      	bhi.n	8006076 <HAL_GPIO_Init+0x12e>
 8005fa2:	4a94      	ldr	r2, [pc, #592]	; (80061f4 <HAL_GPIO_Init+0x2ac>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d04c      	beq.n	8006042 <HAL_GPIO_Init+0xfa>
 8005fa8:	4a92      	ldr	r2, [pc, #584]	; (80061f4 <HAL_GPIO_Init+0x2ac>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d863      	bhi.n	8006076 <HAL_GPIO_Init+0x12e>
 8005fae:	4a92      	ldr	r2, [pc, #584]	; (80061f8 <HAL_GPIO_Init+0x2b0>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d046      	beq.n	8006042 <HAL_GPIO_Init+0xfa>
 8005fb4:	4a90      	ldr	r2, [pc, #576]	; (80061f8 <HAL_GPIO_Init+0x2b0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d85d      	bhi.n	8006076 <HAL_GPIO_Init+0x12e>
 8005fba:	2b12      	cmp	r3, #18
 8005fbc:	d82a      	bhi.n	8006014 <HAL_GPIO_Init+0xcc>
 8005fbe:	2b12      	cmp	r3, #18
 8005fc0:	d859      	bhi.n	8006076 <HAL_GPIO_Init+0x12e>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <HAL_GPIO_Init+0x80>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08006043 	.word	0x08006043
 8005fcc:	0800601d 	.word	0x0800601d
 8005fd0:	0800602f 	.word	0x0800602f
 8005fd4:	08006071 	.word	0x08006071
 8005fd8:	08006077 	.word	0x08006077
 8005fdc:	08006077 	.word	0x08006077
 8005fe0:	08006077 	.word	0x08006077
 8005fe4:	08006077 	.word	0x08006077
 8005fe8:	08006077 	.word	0x08006077
 8005fec:	08006077 	.word	0x08006077
 8005ff0:	08006077 	.word	0x08006077
 8005ff4:	08006077 	.word	0x08006077
 8005ff8:	08006077 	.word	0x08006077
 8005ffc:	08006077 	.word	0x08006077
 8006000:	08006077 	.word	0x08006077
 8006004:	08006077 	.word	0x08006077
 8006008:	08006077 	.word	0x08006077
 800600c:	08006025 	.word	0x08006025
 8006010:	08006039 	.word	0x08006039
 8006014:	4a79      	ldr	r2, [pc, #484]	; (80061fc <HAL_GPIO_Init+0x2b4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d013      	beq.n	8006042 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800601a:	e02c      	b.n	8006076 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	623b      	str	r3, [r7, #32]
          break;
 8006022:	e029      	b.n	8006078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	3304      	adds	r3, #4
 800602a:	623b      	str	r3, [r7, #32]
          break;
 800602c:	e024      	b.n	8006078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	3308      	adds	r3, #8
 8006034:	623b      	str	r3, [r7, #32]
          break;
 8006036:	e01f      	b.n	8006078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	330c      	adds	r3, #12
 800603e:	623b      	str	r3, [r7, #32]
          break;
 8006040:	e01a      	b.n	8006078 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800604a:	2304      	movs	r3, #4
 800604c:	623b      	str	r3, [r7, #32]
          break;
 800604e:	e013      	b.n	8006078 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d105      	bne.n	8006064 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006058:	2308      	movs	r3, #8
 800605a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	611a      	str	r2, [r3, #16]
          break;
 8006062:	e009      	b.n	8006078 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006064:	2308      	movs	r3, #8
 8006066:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	615a      	str	r2, [r3, #20]
          break;
 800606e:	e003      	b.n	8006078 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006070:	2300      	movs	r3, #0
 8006072:	623b      	str	r3, [r7, #32]
          break;
 8006074:	e000      	b.n	8006078 <HAL_GPIO_Init+0x130>
          break;
 8006076:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2bff      	cmp	r3, #255	; 0xff
 800607c:	d801      	bhi.n	8006082 <HAL_GPIO_Init+0x13a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	e001      	b.n	8006086 <HAL_GPIO_Init+0x13e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3304      	adds	r3, #4
 8006086:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2bff      	cmp	r3, #255	; 0xff
 800608c:	d802      	bhi.n	8006094 <HAL_GPIO_Init+0x14c>
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	e002      	b.n	800609a <HAL_GPIO_Init+0x152>
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	3b08      	subs	r3, #8
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	210f      	movs	r1, #15
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	fa01 f303 	lsl.w	r3, r1, r3
 80060a8:	43db      	mvns	r3, r3
 80060aa:	401a      	ands	r2, r3
 80060ac:	6a39      	ldr	r1, [r7, #32]
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	fa01 f303 	lsl.w	r3, r1, r3
 80060b4:	431a      	orrs	r2, r3
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80b1 	beq.w	800622a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80060c8:	4b4d      	ldr	r3, [pc, #308]	; (8006200 <HAL_GPIO_Init+0x2b8>)
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	4a4c      	ldr	r2, [pc, #304]	; (8006200 <HAL_GPIO_Init+0x2b8>)
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	6193      	str	r3, [r2, #24]
 80060d4:	4b4a      	ldr	r3, [pc, #296]	; (8006200 <HAL_GPIO_Init+0x2b8>)
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80060e0:	4a48      	ldr	r2, [pc, #288]	; (8006204 <HAL_GPIO_Init+0x2bc>)
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	089b      	lsrs	r3, r3, #2
 80060e6:	3302      	adds	r3, #2
 80060e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	220f      	movs	r2, #15
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4013      	ands	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a40      	ldr	r2, [pc, #256]	; (8006208 <HAL_GPIO_Init+0x2c0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <HAL_GPIO_Init+0x1ec>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a3f      	ldr	r2, [pc, #252]	; (800620c <HAL_GPIO_Init+0x2c4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00d      	beq.n	8006130 <HAL_GPIO_Init+0x1e8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a3e      	ldr	r2, [pc, #248]	; (8006210 <HAL_GPIO_Init+0x2c8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <HAL_GPIO_Init+0x1e4>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a3d      	ldr	r2, [pc, #244]	; (8006214 <HAL_GPIO_Init+0x2cc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d101      	bne.n	8006128 <HAL_GPIO_Init+0x1e0>
 8006124:	2303      	movs	r3, #3
 8006126:	e006      	b.n	8006136 <HAL_GPIO_Init+0x1ee>
 8006128:	2304      	movs	r3, #4
 800612a:	e004      	b.n	8006136 <HAL_GPIO_Init+0x1ee>
 800612c:	2302      	movs	r3, #2
 800612e:	e002      	b.n	8006136 <HAL_GPIO_Init+0x1ee>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <HAL_GPIO_Init+0x1ee>
 8006134:	2300      	movs	r3, #0
 8006136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006138:	f002 0203 	and.w	r2, r2, #3
 800613c:	0092      	lsls	r2, r2, #2
 800613e:	4093      	lsls	r3, r2
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006146:	492f      	ldr	r1, [pc, #188]	; (8006204 <HAL_GPIO_Init+0x2bc>)
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	089b      	lsrs	r3, r3, #2
 800614c:	3302      	adds	r3, #2
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d006      	beq.n	800616e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006160:	4b2d      	ldr	r3, [pc, #180]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	492c      	ldr	r1, [pc, #176]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	4313      	orrs	r3, r2
 800616a:	608b      	str	r3, [r1, #8]
 800616c:	e006      	b.n	800617c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800616e:	4b2a      	ldr	r3, [pc, #168]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	43db      	mvns	r3, r3
 8006176:	4928      	ldr	r1, [pc, #160]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 8006178:	4013      	ands	r3, r2
 800617a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d006      	beq.n	8006196 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006188:	4b23      	ldr	r3, [pc, #140]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	4922      	ldr	r1, [pc, #136]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	4313      	orrs	r3, r2
 8006192:	60cb      	str	r3, [r1, #12]
 8006194:	e006      	b.n	80061a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006196:	4b20      	ldr	r3, [pc, #128]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	43db      	mvns	r3, r3
 800619e:	491e      	ldr	r1, [pc, #120]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d006      	beq.n	80061be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80061b0:	4b19      	ldr	r3, [pc, #100]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	4918      	ldr	r1, [pc, #96]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	604b      	str	r3, [r1, #4]
 80061bc:	e006      	b.n	80061cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80061be:	4b16      	ldr	r3, [pc, #88]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	43db      	mvns	r3, r3
 80061c6:	4914      	ldr	r1, [pc, #80]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d021      	beq.n	800621c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80061d8:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	490e      	ldr	r1, [pc, #56]	; (8006218 <HAL_GPIO_Init+0x2d0>)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	600b      	str	r3, [r1, #0]
 80061e4:	e021      	b.n	800622a <HAL_GPIO_Init+0x2e2>
 80061e6:	bf00      	nop
 80061e8:	10320000 	.word	0x10320000
 80061ec:	10310000 	.word	0x10310000
 80061f0:	10220000 	.word	0x10220000
 80061f4:	10210000 	.word	0x10210000
 80061f8:	10120000 	.word	0x10120000
 80061fc:	10110000 	.word	0x10110000
 8006200:	40021000 	.word	0x40021000
 8006204:	40010000 	.word	0x40010000
 8006208:	40010800 	.word	0x40010800
 800620c:	40010c00 	.word	0x40010c00
 8006210:	40011000 	.word	0x40011000
 8006214:	40011400 	.word	0x40011400
 8006218:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <HAL_GPIO_Init+0x304>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	43db      	mvns	r3, r3
 8006224:	4909      	ldr	r1, [pc, #36]	; (800624c <HAL_GPIO_Init+0x304>)
 8006226:	4013      	ands	r3, r2
 8006228:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	3301      	adds	r3, #1
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	fa22 f303 	lsr.w	r3, r2, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	f47f ae8e 	bne.w	8005f5c <HAL_GPIO_Init+0x14>
  }
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	372c      	adds	r7, #44	; 0x2c
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr
 800624c:	40010400 	.word	0x40010400

08006250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	807b      	strh	r3, [r7, #2]
 800625c:	4613      	mov	r3, r2
 800625e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006260:	787b      	ldrb	r3, [r7, #1]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006266:	887a      	ldrh	r2, [r7, #2]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800626c:	e003      	b.n	8006276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800626e:	887b      	ldrh	r3, [r7, #2]
 8006270:	041a      	lsls	r2, r3, #16
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	611a      	str	r2, [r3, #16]
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr

08006280 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	4603      	mov	r3, r0
 8006288:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800628a:	4b08      	ldr	r3, [pc, #32]	; (80062ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800628c:	695a      	ldr	r2, [r3, #20]
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	4013      	ands	r3, r2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d006      	beq.n	80062a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006296:	4a05      	ldr	r2, [pc, #20]	; (80062ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f806 	bl	80062b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80062a4:	bf00      	nop
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40010400 	.word	0x40010400

080062b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr

080062c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e12b      	b.n	800652e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff f832 	bl	8005354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2224      	movs	r2, #36	; 0x24
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006328:	f003 fd7c 	bl	8009e24 <HAL_RCC_GetPCLK1Freq>
 800632c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	4a81      	ldr	r2, [pc, #516]	; (8006538 <HAL_I2C_Init+0x274>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d807      	bhi.n	8006348 <HAL_I2C_Init+0x84>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4a80      	ldr	r2, [pc, #512]	; (800653c <HAL_I2C_Init+0x278>)
 800633c:	4293      	cmp	r3, r2
 800633e:	bf94      	ite	ls
 8006340:	2301      	movls	r3, #1
 8006342:	2300      	movhi	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	e006      	b.n	8006356 <HAL_I2C_Init+0x92>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4a7d      	ldr	r2, [pc, #500]	; (8006540 <HAL_I2C_Init+0x27c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	bf94      	ite	ls
 8006350:	2301      	movls	r3, #1
 8006352:	2300      	movhi	r3, #0
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e0e7      	b.n	800652e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a78      	ldr	r2, [pc, #480]	; (8006544 <HAL_I2C_Init+0x280>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	0c9b      	lsrs	r3, r3, #18
 8006368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	4a6a      	ldr	r2, [pc, #424]	; (8006538 <HAL_I2C_Init+0x274>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d802      	bhi.n	8006398 <HAL_I2C_Init+0xd4>
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	3301      	adds	r3, #1
 8006396:	e009      	b.n	80063ac <HAL_I2C_Init+0xe8>
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800639e:	fb02 f303 	mul.w	r3, r2, r3
 80063a2:	4a69      	ldr	r2, [pc, #420]	; (8006548 <HAL_I2C_Init+0x284>)
 80063a4:	fba2 2303 	umull	r2, r3, r2, r3
 80063a8:	099b      	lsrs	r3, r3, #6
 80063aa:	3301      	adds	r3, #1
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	430b      	orrs	r3, r1
 80063b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80063be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	495c      	ldr	r1, [pc, #368]	; (8006538 <HAL_I2C_Init+0x274>)
 80063c8:	428b      	cmp	r3, r1
 80063ca:	d819      	bhi.n	8006400 <HAL_I2C_Init+0x13c>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1e59      	subs	r1, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80063da:	1c59      	adds	r1, r3, #1
 80063dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063e0:	400b      	ands	r3, r1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <HAL_I2C_Init+0x138>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	1e59      	subs	r1, r3, #1
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80063f4:	3301      	adds	r3, #1
 80063f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063fa:	e051      	b.n	80064a0 <HAL_I2C_Init+0x1dc>
 80063fc:	2304      	movs	r3, #4
 80063fe:	e04f      	b.n	80064a0 <HAL_I2C_Init+0x1dc>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d111      	bne.n	800642c <HAL_I2C_Init+0x168>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	1e58      	subs	r0, r3, #1
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6859      	ldr	r1, [r3, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	440b      	add	r3, r1
 8006416:	fbb0 f3f3 	udiv	r3, r0, r3
 800641a:	3301      	adds	r3, #1
 800641c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006420:	2b00      	cmp	r3, #0
 8006422:	bf0c      	ite	eq
 8006424:	2301      	moveq	r3, #1
 8006426:	2300      	movne	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	e012      	b.n	8006452 <HAL_I2C_Init+0x18e>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	1e58      	subs	r0, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6859      	ldr	r1, [r3, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	0099      	lsls	r1, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006442:	3301      	adds	r3, #1
 8006444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006448:	2b00      	cmp	r3, #0
 800644a:	bf0c      	ite	eq
 800644c:	2301      	moveq	r3, #1
 800644e:	2300      	movne	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_I2C_Init+0x196>
 8006456:	2301      	movs	r3, #1
 8006458:	e022      	b.n	80064a0 <HAL_I2C_Init+0x1dc>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10e      	bne.n	8006480 <HAL_I2C_Init+0x1bc>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	1e58      	subs	r0, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6859      	ldr	r1, [r3, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	440b      	add	r3, r1
 8006470:	fbb0 f3f3 	udiv	r3, r0, r3
 8006474:	3301      	adds	r3, #1
 8006476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800647a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647e:	e00f      	b.n	80064a0 <HAL_I2C_Init+0x1dc>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	1e58      	subs	r0, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6859      	ldr	r1, [r3, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	0099      	lsls	r1, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	fbb0 f3f3 	udiv	r3, r0, r3
 8006496:	3301      	adds	r3, #1
 8006498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800649c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	6809      	ldr	r1, [r1, #0]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69da      	ldr	r2, [r3, #28]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80064ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6911      	ldr	r1, [r2, #16]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	68d2      	ldr	r2, [r2, #12]
 80064da:	4311      	orrs	r1, r2
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	431a      	orrs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0201 	orr.w	r2, r2, #1
 800650e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	000186a0 	.word	0x000186a0
 800653c:	001e847f 	.word	0x001e847f
 8006540:	003d08ff 	.word	0x003d08ff
 8006544:	431bde83 	.word	0x431bde83
 8006548:	10624dd3 	.word	0x10624dd3

0800654c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655e:	2b80      	cmp	r3, #128	; 0x80
 8006560:	d103      	bne.n	800656a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2200      	movs	r2, #0
 8006568:	611a      	str	r2, [r3, #16]
  }
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	607a      	str	r2, [r7, #4]
 800657e:	461a      	mov	r2, r3
 8006580:	460b      	mov	r3, r1
 8006582:	817b      	strh	r3, [r7, #10]
 8006584:	4613      	mov	r3, r2
 8006586:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006588:	f7ff fae2 	bl	8005b50 <HAL_GetTick>
 800658c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b20      	cmp	r3, #32
 8006598:	f040 80e0 	bne.w	800675c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	2319      	movs	r3, #25
 80065a2:	2201      	movs	r2, #1
 80065a4:	4970      	ldr	r1, [pc, #448]	; (8006768 <HAL_I2C_Master_Transmit+0x1f4>)
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f002 fdf0 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80065b2:	2302      	movs	r3, #2
 80065b4:	e0d3      	b.n	800675e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_I2C_Master_Transmit+0x50>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e0cc      	b.n	800675e <HAL_I2C_Master_Transmit+0x1ea>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d007      	beq.n	80065ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0201 	orr.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2221      	movs	r2, #33	; 0x21
 80065fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2210      	movs	r2, #16
 8006606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	893a      	ldrh	r2, [r7, #8]
 800661a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4a50      	ldr	r2, [pc, #320]	; (800676c <HAL_I2C_Master_Transmit+0x1f8>)
 800662a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800662c:	8979      	ldrh	r1, [r7, #10]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	6a3a      	ldr	r2, [r7, #32]
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f002 fa34 	bl	8008aa0 <I2C_MasterRequestWrite>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e08d      	b.n	800675e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006642:	2300      	movs	r3, #0
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006658:	e066      	b.n	8006728 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	6a39      	ldr	r1, [r7, #32]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f002 feae 	bl	80093c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00d      	beq.n	8006686 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	2b04      	cmp	r3, #4
 8006670:	d107      	bne.n	8006682 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006680:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e06b      	b.n	800675e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	781a      	ldrb	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b01      	subs	r3, #1
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d11b      	bne.n	80066fc <HAL_I2C_Master_Transmit+0x188>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d017      	beq.n	80066fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	781a      	ldrb	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	6a39      	ldr	r1, [r7, #32]
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f002 fea5 	bl	8009450 <I2C_WaitOnBTFFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00d      	beq.n	8006728 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	2b04      	cmp	r3, #4
 8006712:	d107      	bne.n	8006724 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006722:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e01a      	b.n	800675e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672c:	2b00      	cmp	r3, #0
 800672e:	d194      	bne.n	800665a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800673e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	e000      	b.n	800675e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800675c:	2302      	movs	r3, #2
  }
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	00100002 	.word	0x00100002
 800676c:	ffff0000 	.word	0xffff0000

08006770 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08c      	sub	sp, #48	; 0x30
 8006774:	af02      	add	r7, sp, #8
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	607a      	str	r2, [r7, #4]
 800677a:	461a      	mov	r2, r3
 800677c:	460b      	mov	r3, r1
 800677e:	817b      	strh	r3, [r7, #10]
 8006780:	4613      	mov	r3, r2
 8006782:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006788:	f7ff f9e2 	bl	8005b50 <HAL_GetTick>
 800678c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b20      	cmp	r3, #32
 8006798:	f040 824b 	bne.w	8006c32 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	2319      	movs	r3, #25
 80067a2:	2201      	movs	r2, #1
 80067a4:	497f      	ldr	r1, [pc, #508]	; (80069a4 <HAL_I2C_Master_Receive+0x234>)
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f002 fcf0 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80067b2:	2302      	movs	r3, #2
 80067b4:	e23e      	b.n	8006c34 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_I2C_Master_Receive+0x54>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e237      	b.n	8006c34 <HAL_I2C_Master_Receive+0x4c4>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d007      	beq.n	80067ea <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0201 	orr.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2222      	movs	r2, #34	; 0x22
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2210      	movs	r2, #16
 8006806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	893a      	ldrh	r2, [r7, #8]
 800681a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4a5f      	ldr	r2, [pc, #380]	; (80069a8 <HAL_I2C_Master_Receive+0x238>)
 800682a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800682c:	8979      	ldrh	r1, [r7, #10]
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f002 f9b6 	bl	8008ba4 <I2C_MasterRequestRead>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e1f8      	b.n	8006c34 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006846:	2b00      	cmp	r3, #0
 8006848:	d113      	bne.n	8006872 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684a:	2300      	movs	r3, #0
 800684c:	61fb      	str	r3, [r7, #28]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	61fb      	str	r3, [r7, #28]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	61fb      	str	r3, [r7, #28]
 800685e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	e1cc      	b.n	8006c0c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006876:	2b01      	cmp	r3, #1
 8006878:	d11e      	bne.n	80068b8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006888:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800688a:	b672      	cpsid	i
}
 800688c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800688e:	2300      	movs	r3, #0
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	61bb      	str	r3, [r7, #24]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80068b4:	b662      	cpsie	i
}
 80068b6:	e035      	b.n	8006924 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d11e      	bne.n	80068fe <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80068d0:	b672      	cpsid	i
}
 80068d2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80068fa:	b662      	cpsie	i
}
 80068fc:	e012      	b.n	8006924 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800690c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800690e:	2300      	movs	r3, #0
 8006910:	613b      	str	r3, [r7, #16]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006924:	e172      	b.n	8006c0c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692a:	2b03      	cmp	r3, #3
 800692c:	f200 811f 	bhi.w	8006b6e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006934:	2b01      	cmp	r3, #1
 8006936:	d123      	bne.n	8006980 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f002 fe01 	bl	8009544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e173      	b.n	8006c34 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800697e:	e145      	b.n	8006c0c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006984:	2b02      	cmp	r3, #2
 8006986:	d152      	bne.n	8006a2e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	2200      	movs	r2, #0
 8006990:	4906      	ldr	r1, [pc, #24]	; (80069ac <HAL_I2C_Master_Receive+0x23c>)
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f002 fbfa 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d008      	beq.n	80069b0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e148      	b.n	8006c34 <HAL_I2C_Master_Receive+0x4c4>
 80069a2:	bf00      	nop
 80069a4:	00100002 	.word	0x00100002
 80069a8:	ffff0000 	.word	0xffff0000
 80069ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80069b0:	b672      	cpsid	i
}
 80069b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691a      	ldr	r2, [r3, #16]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80069f6:	b662      	cpsie	i
}
 80069f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a2c:	e0ee      	b.n	8006c0c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	2200      	movs	r2, #0
 8006a36:	4981      	ldr	r1, [pc, #516]	; (8006c3c <HAL_I2C_Master_Receive+0x4cc>)
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f002 fba7 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e0f5      	b.n	8006c34 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a58:	b672      	cpsid	i
}
 8006a5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691a      	ldr	r2, [r3, #16]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a8e:	4b6c      	ldr	r3, [pc, #432]	; (8006c40 <HAL_I2C_Master_Receive+0x4d0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	08db      	lsrs	r3, r3, #3
 8006a94:	4a6b      	ldr	r2, [pc, #428]	; (8006c44 <HAL_I2C_Master_Receive+0x4d4>)
 8006a96:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9a:	0a1a      	lsrs	r2, r3, #8
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	00da      	lsls	r2, r3, #3
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d118      	bne.n	8006ae6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	f043 0220 	orr.w	r2, r3, #32
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006ad6:	b662      	cpsie	i
}
 8006ad8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e0a6      	b.n	8006c34 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d1d9      	bne.n	8006aa8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006b36:	b662      	cpsie	i
}
 8006b38:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	691a      	ldr	r2, [r3, #16]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b6c:	e04e      	b.n	8006c0c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f002 fce6 	bl	8009544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e058      	b.n	8006c34 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691a      	ldr	r2, [r3, #16]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d124      	bne.n	8006c0c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d107      	bne.n	8006bda <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f47f ae88 	bne.w	8006926 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e000      	b.n	8006c34 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8006c32:	2302      	movs	r3, #2
  }
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3728      	adds	r7, #40	; 0x28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	00010004 	.word	0x00010004
 8006c40:	20000008 	.word	0x20000008
 8006c44:	14f8b589 	.word	0x14f8b589

08006c48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4603      	mov	r3, r0
 8006c58:	817b      	strh	r3, [r7, #10]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	813b      	strh	r3, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c62:	f7fe ff75 	bl	8005b50 <HAL_GetTick>
 8006c66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	f040 80d9 	bne.w	8006e28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	2319      	movs	r3, #25
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	496d      	ldr	r1, [pc, #436]	; (8006e34 <HAL_I2C_Mem_Write+0x1ec>)
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f002 fa83 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	e0cc      	b.n	8006e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <HAL_I2C_Mem_Write+0x56>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e0c5      	b.n	8006e2a <HAL_I2C_Mem_Write+0x1e2>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d007      	beq.n	8006cc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2221      	movs	r2, #33	; 0x21
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2240      	movs	r2, #64	; 0x40
 8006ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a3a      	ldr	r2, [r7, #32]
 8006cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4a4d      	ldr	r2, [pc, #308]	; (8006e38 <HAL_I2C_Mem_Write+0x1f0>)
 8006d04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d06:	88f8      	ldrh	r0, [r7, #6]
 8006d08:	893a      	ldrh	r2, [r7, #8]
 8006d0a:	8979      	ldrh	r1, [r7, #10]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	9301      	str	r3, [sp, #4]
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	4603      	mov	r3, r0
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f002 f812 	bl	8008d40 <I2C_RequestMemoryWrite>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d052      	beq.n	8006dc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e081      	b.n	8006e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f002 fb48 	bl	80093c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00d      	beq.n	8006d52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d107      	bne.n	8006d4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e06b      	b.n	8006e2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	781a      	ldrb	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d11b      	bne.n	8006dc8 <HAL_I2C_Mem_Write+0x180>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d017      	beq.n	8006dc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	781a      	ldrb	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1aa      	bne.n	8006d26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f002 fb3b 	bl	8009450 <I2C_WaitOnBTFFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00d      	beq.n	8006dfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	d107      	bne.n	8006df8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e016      	b.n	8006e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	e000      	b.n	8006e2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006e28:	2302      	movs	r3, #2
  }
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	00100002 	.word	0x00100002
 8006e38:	ffff0000 	.word	0xffff0000

08006e3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08c      	sub	sp, #48	; 0x30
 8006e40:	af02      	add	r7, sp, #8
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	4608      	mov	r0, r1
 8006e46:	4611      	mov	r1, r2
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	817b      	strh	r3, [r7, #10]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	813b      	strh	r3, [r7, #8]
 8006e52:	4613      	mov	r3, r2
 8006e54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e5a:	f7fe fe79 	bl	8005b50 <HAL_GetTick>
 8006e5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	f040 8244 	bne.w	80072f6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	2319      	movs	r3, #25
 8006e74:	2201      	movs	r2, #1
 8006e76:	4982      	ldr	r1, [pc, #520]	; (8007080 <HAL_I2C_Mem_Read+0x244>)
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f002 f987 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006e84:	2302      	movs	r3, #2
 8006e86:	e237      	b.n	80072f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d101      	bne.n	8006e96 <HAL_I2C_Mem_Read+0x5a>
 8006e92:	2302      	movs	r3, #2
 8006e94:	e230      	b.n	80072f8 <HAL_I2C_Mem_Read+0x4bc>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d007      	beq.n	8006ebc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 0201 	orr.w	r2, r2, #1
 8006eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2222      	movs	r2, #34	; 0x22
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2240      	movs	r2, #64	; 0x40
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4a62      	ldr	r2, [pc, #392]	; (8007084 <HAL_I2C_Mem_Read+0x248>)
 8006efc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006efe:	88f8      	ldrh	r0, [r7, #6]
 8006f00:	893a      	ldrh	r2, [r7, #8]
 8006f02:	8979      	ldrh	r1, [r7, #10]
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f001 ffac 	bl	8008e6c <I2C_RequestMemoryRead>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e1ec      	b.n	80072f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d113      	bne.n	8006f4e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	61fb      	str	r3, [r7, #28]
 8006f3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	e1c0      	b.n	80072d0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d11e      	bne.n	8006f94 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f66:	b672      	cpsid	i
}
 8006f68:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	61bb      	str	r3, [r7, #24]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006f90:	b662      	cpsie	i
}
 8006f92:	e035      	b.n	8007000 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d11e      	bne.n	8006fda <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006faa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006fac:	b672      	cpsid	i
}
 8006fae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006fd6:	b662      	cpsie	i
}
 8006fd8:	e012      	b.n	8007000 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fe8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fea:	2300      	movs	r3, #0
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	613b      	str	r3, [r7, #16]
 8006ffe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007000:	e166      	b.n	80072d0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007006:	2b03      	cmp	r3, #3
 8007008:	f200 811f 	bhi.w	800724a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007010:	2b01      	cmp	r3, #1
 8007012:	d123      	bne.n	800705c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007016:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f002 fa93 	bl	8009544 <I2C_WaitOnRXNEFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e167      	b.n	80072f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691a      	ldr	r2, [r3, #16]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007044:	3b01      	subs	r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007050:	b29b      	uxth	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	855a      	strh	r2, [r3, #42]	; 0x2a
 800705a:	e139      	b.n	80072d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007060:	2b02      	cmp	r3, #2
 8007062:	d152      	bne.n	800710a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	2200      	movs	r2, #0
 800706c:	4906      	ldr	r1, [pc, #24]	; (8007088 <HAL_I2C_Mem_Read+0x24c>)
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f002 f88c 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d008      	beq.n	800708c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e13c      	b.n	80072f8 <HAL_I2C_Mem_Read+0x4bc>
 800707e:	bf00      	nop
 8007080:	00100002 	.word	0x00100002
 8007084:	ffff0000 	.word	0xffff0000
 8007088:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800708c:	b672      	cpsid	i
}
 800708e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800709e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	3b01      	subs	r3, #1
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80070d2:	b662      	cpsie	i
}
 80070d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f2:	3b01      	subs	r3, #1
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007108:	e0e2      	b.n	80072d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	2200      	movs	r2, #0
 8007112:	497b      	ldr	r1, [pc, #492]	; (8007300 <HAL_I2C_Mem_Read+0x4c4>)
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f002 f839 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e0e9      	b.n	80072f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007132:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007134:	b672      	cpsid	i
}
 8007136:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007154:	3b01      	subs	r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007160:	b29b      	uxth	r3, r3
 8007162:	3b01      	subs	r3, #1
 8007164:	b29a      	uxth	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800716a:	4b66      	ldr	r3, [pc, #408]	; (8007304 <HAL_I2C_Mem_Read+0x4c8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	08db      	lsrs	r3, r3, #3
 8007170:	4a65      	ldr	r2, [pc, #404]	; (8007308 <HAL_I2C_Mem_Read+0x4cc>)
 8007172:	fba2 2303 	umull	r2, r3, r2, r3
 8007176:	0a1a      	lsrs	r2, r3, #8
 8007178:	4613      	mov	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	00da      	lsls	r2, r3, #3
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	3b01      	subs	r3, #1
 8007188:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d118      	bne.n	80071c2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2220      	movs	r2, #32
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f043 0220 	orr.w	r2, r3, #32
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80071b2:	b662      	cpsie	i
}
 80071b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e09a      	b.n	80072f8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d1d9      	bne.n	8007184 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691a      	ldr	r2, [r3, #16]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	b2d2      	uxtb	r2, r2
 80071ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007212:	b662      	cpsie	i
}
 8007214:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	691a      	ldr	r2, [r3, #16]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	b2d2      	uxtb	r2, r2
 8007222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723e:	b29b      	uxth	r3, r3
 8007240:	3b01      	subs	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007248:	e042      	b.n	80072d0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800724a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f002 f978 	bl	8009544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e04c      	b.n	80072f8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	691a      	ldr	r2, [r3, #16]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800727a:	3b01      	subs	r3, #1
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007286:	b29b      	uxth	r3, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	b29a      	uxth	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b04      	cmp	r3, #4
 800729c:	d118      	bne.n	80072d0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691a      	ldr	r2, [r3, #16]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	b2d2      	uxtb	r2, r2
 80072aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f47f ae94 	bne.w	8007002 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2220      	movs	r2, #32
 80072de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	e000      	b.n	80072f8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80072f6:	2302      	movs	r3, #2
  }
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3728      	adds	r7, #40	; 0x28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	00010004 	.word	0x00010004
 8007304:	20000008 	.word	0x20000008
 8007308:	14f8b589 	.word	0x14f8b589

0800730c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800732c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007334:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	2b10      	cmp	r3, #16
 800733a:	d003      	beq.n	8007344 <HAL_I2C_EV_IRQHandler+0x38>
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	f040 80b1 	bne.w	80074a6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10d      	bne.n	800737a <HAL_I2C_EV_IRQHandler+0x6e>
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007364:	d003      	beq.n	800736e <HAL_I2C_EV_IRQHandler+0x62>
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800736c:	d101      	bne.n	8007372 <HAL_I2C_EV_IRQHandler+0x66>
 800736e:	2301      	movs	r3, #1
 8007370:	e000      	b.n	8007374 <HAL_I2C_EV_IRQHandler+0x68>
 8007372:	2300      	movs	r3, #0
 8007374:	2b01      	cmp	r3, #1
 8007376:	f000 8114 	beq.w	80075a2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00b      	beq.n	800739c <HAL_I2C_EV_IRQHandler+0x90>
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800738a:	2b00      	cmp	r3, #0
 800738c:	d006      	beq.n	800739c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f002 f963 	bl	800965a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fd60 	bl	8007e5a <I2C_Master_SB>
 800739a:	e083      	b.n	80074a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d008      	beq.n	80073b8 <HAL_I2C_EV_IRQHandler+0xac>
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fdd7 	bl	8007f64 <I2C_Master_ADD10>
 80073b6:	e075      	b.n	80074a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d008      	beq.n	80073d4 <HAL_I2C_EV_IRQHandler+0xc8>
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fdf2 	bl	8007fb6 <I2C_Master_ADDR>
 80073d2:	e067      	b.n	80074a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d036      	beq.n	800744c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ec:	f000 80db 	beq.w	80075a6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00d      	beq.n	8007416 <HAL_I2C_EV_IRQHandler+0x10a>
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007400:	2b00      	cmp	r3, #0
 8007402:	d008      	beq.n	8007416 <HAL_I2C_EV_IRQHandler+0x10a>
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f9d4 	bl	80077bc <I2C_MasterTransmit_TXE>
 8007414:	e046      	b.n	80074a4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 80c2 	beq.w	80075a6 <HAL_I2C_EV_IRQHandler+0x29a>
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 80bc 	beq.w	80075a6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b21      	cmp	r3, #33	; 0x21
 8007432:	d103      	bne.n	800743c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fa5d 	bl	80078f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800743a:	e0b4      	b.n	80075a6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	2b40      	cmp	r3, #64	; 0x40
 8007440:	f040 80b1 	bne.w	80075a6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 facb 	bl	80079e0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800744a:	e0ac      	b.n	80075a6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800745a:	f000 80a4 	beq.w	80075a6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00d      	beq.n	8007484 <HAL_I2C_EV_IRQHandler+0x178>
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800746e:	2b00      	cmp	r3, #0
 8007470:	d008      	beq.n	8007484 <HAL_I2C_EV_IRQHandler+0x178>
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d103      	bne.n	8007484 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fb47 	bl	8007b10 <I2C_MasterReceive_RXNE>
 8007482:	e00f      	b.n	80074a4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	f003 0304 	and.w	r3, r3, #4
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 808b 	beq.w	80075a6 <HAL_I2C_EV_IRQHandler+0x29a>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 8085 	beq.w	80075a6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fbf2 	bl	8007c86 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074a2:	e080      	b.n	80075a6 <HAL_I2C_EV_IRQHandler+0x29a>
 80074a4:	e07f      	b.n	80075a6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	61fb      	str	r3, [r7, #28]
 80074b6:	e007      	b.n	80074c8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d011      	beq.n	80074f6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00c      	beq.n	80074f6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80074ec:	69b9      	ldr	r1, [r7, #24]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 ffb8 	bl	8008464 <I2C_Slave_ADDR>
 80074f4:	e05a      	b.n	80075ac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d008      	beq.n	8007512 <HAL_I2C_EV_IRQHandler+0x206>
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fff2 	bl	80084f4 <I2C_Slave_STOPF>
 8007510:	e04c      	b.n	80075ac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b21      	cmp	r3, #33	; 0x21
 8007516:	d002      	beq.n	800751e <HAL_I2C_EV_IRQHandler+0x212>
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	2b29      	cmp	r3, #41	; 0x29
 800751c:	d120      	bne.n	8007560 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00d      	beq.n	8007544 <HAL_I2C_EV_IRQHandler+0x238>
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800752e:	2b00      	cmp	r3, #0
 8007530:	d008      	beq.n	8007544 <HAL_I2C_EV_IRQHandler+0x238>
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fed5 	bl	80082ec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007542:	e032      	b.n	80075aa <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b00      	cmp	r3, #0
 800754c:	d02d      	beq.n	80075aa <HAL_I2C_EV_IRQHandler+0x29e>
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007554:	2b00      	cmp	r3, #0
 8007556:	d028      	beq.n	80075aa <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 ff04 	bl	8008366 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800755e:	e024      	b.n	80075aa <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00d      	beq.n	8007586 <HAL_I2C_EV_IRQHandler+0x27a>
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <HAL_I2C_EV_IRQHandler+0x27a>
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	2b00      	cmp	r3, #0
 800757c:	d103      	bne.n	8007586 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 ff11 	bl	80083a6 <I2C_SlaveReceive_RXNE>
 8007584:	e012      	b.n	80075ac <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00d      	beq.n	80075ac <HAL_I2C_EV_IRQHandler+0x2a0>
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007596:	2b00      	cmp	r3, #0
 8007598:	d008      	beq.n	80075ac <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 ff41 	bl	8008422 <I2C_SlaveReceive_BTF>
 80075a0:	e004      	b.n	80075ac <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80075a2:	bf00      	nop
 80075a4:	e002      	b.n	80075ac <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075a6:	bf00      	nop
 80075a8:	e000      	b.n	80075ac <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80075aa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80075ac:	3720      	adds	r7, #32
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b08a      	sub	sp, #40	; 0x28
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075d4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d015      	beq.n	800760c <HAL_I2C_ER_IRQHandler+0x5a>
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d010      	beq.n	800760c <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	f043 0301 	orr.w	r3, r3, #1
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075fa:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800760a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00d      	beq.n	8007632 <HAL_I2C_ER_IRQHandler+0x80>
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761c:	2b00      	cmp	r3, #0
 800761e:	d008      	beq.n	8007632 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	f043 0302 	orr.w	r3, r3, #2
 8007626:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007630:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007638:	2b00      	cmp	r3, #0
 800763a:	d03e      	beq.n	80076ba <HAL_I2C_ER_IRQHandler+0x108>
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007642:	2b00      	cmp	r3, #0
 8007644:	d039      	beq.n	80076ba <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8007646:	7efb      	ldrb	r3, [r7, #27]
 8007648:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764e:	b29b      	uxth	r3, r3
 8007650:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007658:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007660:	7ebb      	ldrb	r3, [r7, #26]
 8007662:	2b20      	cmp	r3, #32
 8007664:	d112      	bne.n	800768c <HAL_I2C_ER_IRQHandler+0xda>
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10f      	bne.n	800768c <HAL_I2C_ER_IRQHandler+0xda>
 800766c:	7cfb      	ldrb	r3, [r7, #19]
 800766e:	2b21      	cmp	r3, #33	; 0x21
 8007670:	d008      	beq.n	8007684 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007672:	7cfb      	ldrb	r3, [r7, #19]
 8007674:	2b29      	cmp	r3, #41	; 0x29
 8007676:	d005      	beq.n	8007684 <HAL_I2C_ER_IRQHandler+0xd2>
 8007678:	7cfb      	ldrb	r3, [r7, #19]
 800767a:	2b28      	cmp	r3, #40	; 0x28
 800767c:	d106      	bne.n	800768c <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b21      	cmp	r3, #33	; 0x21
 8007682:	d103      	bne.n	800768c <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f865 	bl	8008754 <I2C_Slave_AF>
 800768a:	e016      	b.n	80076ba <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007694:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	f043 0304 	orr.w	r3, r3, #4
 800769c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800769e:	7efb      	ldrb	r3, [r7, #27]
 80076a0:	2b10      	cmp	r3, #16
 80076a2:	d002      	beq.n	80076aa <HAL_I2C_ER_IRQHandler+0xf8>
 80076a4:	7efb      	ldrb	r3, [r7, #27]
 80076a6:	2b40      	cmp	r3, #64	; 0x40
 80076a8:	d107      	bne.n	80076ba <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076b8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00d      	beq.n	80076e0 <HAL_I2C_ER_IRQHandler+0x12e>
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d008      	beq.n	80076e0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	f043 0308 	orr.w	r3, r3, #8
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80076de:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d008      	beq.n	80076f8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	431a      	orrs	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 f8a2 	bl	800883c <I2C_ITError>
  }
}
 80076f8:	bf00      	nop
 80076fa:	3728      	adds	r7, #40	; 0x28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	bc80      	pop	{r7}
 8007710:	4770      	bx	lr

08007712 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr

08007724 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr

08007736 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	bc80      	pop	{r7}
 8007746:	4770      	bx	lr

08007748 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
 8007754:	4613      	mov	r3, r2
 8007756:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr

08007762 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800776a:	bf00      	nop
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr

08007774 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr

08007786 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr

08007798 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr

080077aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bc80      	pop	{r7}
 80077ba:	4770      	bx	lr

080077bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d150      	bne.n	8007884 <I2C_MasterTransmit_TXE+0xc8>
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b21      	cmp	r3, #33	; 0x21
 80077e6:	d14d      	bne.n	8007884 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b08      	cmp	r3, #8
 80077ec:	d01d      	beq.n	800782a <I2C_MasterTransmit_TXE+0x6e>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d01a      	beq.n	800782a <I2C_MasterTransmit_TXE+0x6e>
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077fa:	d016      	beq.n	800782a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800780a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2211      	movs	r2, #17
 8007810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7ff ff6c 	bl	8007700 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007828:	e060      	b.n	80078ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007838:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007848:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b40      	cmp	r3, #64	; 0x40
 8007862:	d107      	bne.n	8007874 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff ff81 	bl	8007774 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007872:	e03b      	b.n	80078ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff ff3f 	bl	8007700 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007882:	e033      	b.n	80078ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	2b21      	cmp	r3, #33	; 0x21
 8007888:	d005      	beq.n	8007896 <I2C_MasterTransmit_TXE+0xda>
 800788a:	7bbb      	ldrb	r3, [r7, #14]
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	d12d      	bne.n	80078ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	2b22      	cmp	r3, #34	; 0x22
 8007894:	d12a      	bne.n	80078ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789a:	b29b      	uxth	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d108      	bne.n	80078b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80078b0:	e01c      	b.n	80078ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	d103      	bne.n	80078c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f88e 	bl	80079e0 <I2C_MemoryTransmit_TXE_BTF>
}
 80078c4:	e012      	b.n	80078ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	781a      	ldrb	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80078ea:	e7ff      	b.n	80078ec <I2C_MasterTransmit_TXE+0x130>
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007900:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b21      	cmp	r3, #33	; 0x21
 800790c:	d164      	bne.n	80079d8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007912:	b29b      	uxth	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d012      	beq.n	800793e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	781a      	ldrb	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800793c:	e04c      	b.n	80079d8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b08      	cmp	r3, #8
 8007942:	d01d      	beq.n	8007980 <I2C_MasterTransmit_BTF+0x8c>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b20      	cmp	r3, #32
 8007948:	d01a      	beq.n	8007980 <I2C_MasterTransmit_BTF+0x8c>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007950:	d016      	beq.n	8007980 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007960:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2211      	movs	r2, #17
 8007966:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff fec1 	bl	8007700 <HAL_I2C_MasterTxCpltCallback>
}
 800797e:	e02b      	b.n	80079d8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800798e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800799e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b40      	cmp	r3, #64	; 0x40
 80079b8:	d107      	bne.n	80079ca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff fed6 	bl	8007774 <HAL_I2C_MemTxCpltCallback>
}
 80079c8:	e006      	b.n	80079d8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7ff fe94 	bl	8007700 <HAL_I2C_MasterTxCpltCallback>
}
 80079d8:	bf00      	nop
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d11d      	bne.n	8007a34 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d10b      	bne.n	8007a18 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a10:	1c9a      	adds	r2, r3, #2
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8007a16:	e077      	b.n	8007b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	121b      	asrs	r3, r3, #8
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2c:	1c5a      	adds	r2, r3, #1
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007a32:	e069      	b.n	8007b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d10b      	bne.n	8007a54 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007a52:	e059      	b.n	8007b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d152      	bne.n	8007b02 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	2b22      	cmp	r3, #34	; 0x22
 8007a60:	d10d      	bne.n	8007a7e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a70:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007a7c:	e044      	b.n	8007b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d015      	beq.n	8007ab4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	2b21      	cmp	r3, #33	; 0x21
 8007a8c:	d112      	bne.n	8007ab4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	781a      	ldrb	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007ab2:	e029      	b.n	8007b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d124      	bne.n	8007b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	2b21      	cmp	r3, #33	; 0x21
 8007ac2:	d121      	bne.n	8007b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ad2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ae2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff fe3a 	bl	8007774 <HAL_I2C_MemTxCpltCallback>
}
 8007b00:	e002      	b.n	8007b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7fe fd22 	bl	800654c <I2C_Flush_DR>
}
 8007b08:	bf00      	nop
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b22      	cmp	r3, #34	; 0x22
 8007b22:	f040 80ac 	bne.w	8007c7e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d921      	bls.n	8007b78 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	691a      	ldr	r2, [r3, #16]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	f040 808c 	bne.w	8007c7e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b74:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007b76:	e082      	b.n	8007c7e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d075      	beq.n	8007c6c <I2C_MasterReceive_RXNE+0x15c>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d002      	beq.n	8007b8c <I2C_MasterReceive_RXNE+0x7c>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d16f      	bne.n	8007c6c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fca7 	bl	80094e0 <I2C_WaitOnSTOPRequestThroughIT>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d142      	bne.n	8007c1e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ba6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bb6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691a      	ldr	r2, [r3, #16]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	b2d2      	uxtb	r2, r2
 8007bc4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b40      	cmp	r3, #64	; 0x40
 8007bf0:	d10a      	bne.n	8007c08 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff fdc0 	bl	8007786 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007c06:	e03a      	b.n	8007c7e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2212      	movs	r2, #18
 8007c14:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff fd7b 	bl	8007712 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007c1c:	e02f      	b.n	8007c7e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	691a      	ldr	r2, [r3, #16]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	b2d2      	uxtb	r2, r2
 8007c3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2220      	movs	r2, #32
 8007c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff fd97 	bl	8007798 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007c6a:	e008      	b.n	8007c7e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c7a:	605a      	str	r2, [r3, #4]
}
 8007c7c:	e7ff      	b.n	8007c7e <I2C_MasterReceive_RXNE+0x16e>
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d11b      	bne.n	8007cd6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	691a      	ldr	r2, [r3, #16]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	b2d2      	uxtb	r2, r2
 8007cba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007cd4:	e0bd      	b.n	8007e52 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d129      	bne.n	8007d34 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d00a      	beq.n	8007d0c <I2C_MasterReceive_BTF+0x86>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d007      	beq.n	8007d0c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007d32:	e08e      	b.n	8007e52 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d176      	bne.n	8007e2c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d002      	beq.n	8007d4a <I2C_MasterReceive_BTF+0xc4>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b10      	cmp	r3, #16
 8007d48:	d108      	bne.n	8007d5c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	e019      	b.n	8007d90 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d002      	beq.n	8007d68 <I2C_MasterReceive_BTF+0xe2>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d108      	bne.n	8007d7a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	e00a      	b.n	8007d90 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b10      	cmp	r3, #16
 8007d7e:	d007      	beq.n	8007d90 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691a      	ldr	r2, [r3, #16]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691a      	ldr	r2, [r3, #16]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	b2d2      	uxtb	r2, r2
 8007dc2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007dea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b40      	cmp	r3, #64	; 0x40
 8007dfe:	d10a      	bne.n	8007e16 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7ff fcb9 	bl	8007786 <HAL_I2C_MemRxCpltCallback>
}
 8007e14:	e01d      	b.n	8007e52 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2212      	movs	r2, #18
 8007e22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff fc74 	bl	8007712 <HAL_I2C_MasterRxCpltCallback>
}
 8007e2a:	e012      	b.n	8007e52 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	691a      	ldr	r2, [r3, #16]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	b2d2      	uxtb	r2, r2
 8007e38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b40      	cmp	r3, #64	; 0x40
 8007e6c:	d117      	bne.n	8007e9e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d109      	bne.n	8007e8a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e86:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007e88:	e067      	b.n	8007f5a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	f043 0301 	orr.w	r3, r3, #1
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	611a      	str	r2, [r3, #16]
}
 8007e9c:	e05d      	b.n	8007f5a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ea6:	d133      	bne.n	8007f10 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b21      	cmp	r3, #33	; 0x21
 8007eb2:	d109      	bne.n	8007ec8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ec4:	611a      	str	r2, [r3, #16]
 8007ec6:	e008      	b.n	8007eda <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	f043 0301 	orr.w	r3, r3, #1
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d004      	beq.n	8007eec <I2C_Master_SB+0x92>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d108      	bne.n	8007efe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d032      	beq.n	8007f5a <I2C_Master_SB+0x100>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d02d      	beq.n	8007f5a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f0c:	605a      	str	r2, [r3, #4]
}
 8007f0e:	e024      	b.n	8007f5a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10e      	bne.n	8007f36 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	11db      	asrs	r3, r3, #7
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	f003 0306 	and.w	r3, r3, #6
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f063 030f 	orn	r3, r3, #15
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	611a      	str	r2, [r3, #16]
}
 8007f34:	e011      	b.n	8007f5a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d10d      	bne.n	8007f5a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	11db      	asrs	r3, r3, #7
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	f003 0306 	and.w	r3, r3, #6
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	f063 030e 	orn	r3, r3, #14
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	611a      	str	r2, [r3, #16]
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bc80      	pop	{r7}
 8007f62:	4770      	bx	lr

08007f64 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <I2C_Master_ADD10+0x26>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d108      	bne.n	8007f9c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00c      	beq.n	8007fac <I2C_Master_ADD10+0x48>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d007      	beq.n	8007fac <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007faa:	605a      	str	r2, [r3, #4]
  }
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr

08007fb6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b091      	sub	sp, #68	; 0x44
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b22      	cmp	r3, #34	; 0x22
 8007fde:	f040 8174 	bne.w	80082ca <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10f      	bne.n	800800a <I2C_Master_ADDR+0x54>
 8007fea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007fee:	2b40      	cmp	r3, #64	; 0x40
 8007ff0:	d10b      	bne.n	800800a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	633b      	str	r3, [r7, #48]	; 0x30
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	e16b      	b.n	80082e2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800e:	2b00      	cmp	r3, #0
 8008010:	d11d      	bne.n	800804e <I2C_Master_ADDR+0x98>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800801a:	d118      	bne.n	800804e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800801c:	2300      	movs	r3, #0
 800801e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008030:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008040:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	651a      	str	r2, [r3, #80]	; 0x50
 800804c:	e149      	b.n	80082e2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d113      	bne.n	8008080 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008058:	2300      	movs	r3, #0
 800805a:	62bb      	str	r3, [r7, #40]	; 0x28
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	62bb      	str	r3, [r7, #40]	; 0x28
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	62bb      	str	r3, [r7, #40]	; 0x28
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	e120      	b.n	80082c2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008084:	b29b      	uxth	r3, r3
 8008086:	2b01      	cmp	r3, #1
 8008088:	f040 808a 	bne.w	80081a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008092:	d137      	bne.n	8008104 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080b2:	d113      	bne.n	80080dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080c4:	2300      	movs	r3, #0
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	627b      	str	r3, [r7, #36]	; 0x24
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	e0f2      	b.n	80082c2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080dc:	2300      	movs	r3, #0
 80080de:	623b      	str	r3, [r7, #32]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	623b      	str	r3, [r7, #32]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	623b      	str	r3, [r7, #32]
 80080f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	e0de      	b.n	80082c2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	2b08      	cmp	r3, #8
 8008108:	d02e      	beq.n	8008168 <I2C_Master_ADDR+0x1b2>
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	2b20      	cmp	r3, #32
 800810e:	d02b      	beq.n	8008168 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008112:	2b12      	cmp	r3, #18
 8008114:	d102      	bne.n	800811c <I2C_Master_ADDR+0x166>
 8008116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008118:	2b01      	cmp	r3, #1
 800811a:	d125      	bne.n	8008168 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800811c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811e:	2b04      	cmp	r3, #4
 8008120:	d00e      	beq.n	8008140 <I2C_Master_ADDR+0x18a>
 8008122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008124:	2b02      	cmp	r3, #2
 8008126:	d00b      	beq.n	8008140 <I2C_Master_ADDR+0x18a>
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	2b10      	cmp	r3, #16
 800812c:	d008      	beq.n	8008140 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	e007      	b.n	8008150 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800814e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008150:	2300      	movs	r3, #0
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	61fb      	str	r3, [r7, #28]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	61fb      	str	r3, [r7, #28]
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	e0ac      	b.n	80082c2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008176:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008178:	2300      	movs	r3, #0
 800817a:	61bb      	str	r3, [r7, #24]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	61bb      	str	r3, [r7, #24]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	61bb      	str	r3, [r7, #24]
 800818c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e090      	b.n	80082c2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d158      	bne.n	800825c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	2b04      	cmp	r3, #4
 80081ae:	d021      	beq.n	80081f4 <I2C_Master_ADDR+0x23e>
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d01e      	beq.n	80081f4 <I2C_Master_ADDR+0x23e>
 80081b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b8:	2b10      	cmp	r3, #16
 80081ba:	d01b      	beq.n	80081f4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	e012      	b.n	800821a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008202:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008204:	2300      	movs	r3, #0
 8008206:	613b      	str	r3, [r7, #16]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	613b      	str	r3, [r7, #16]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	613b      	str	r3, [r7, #16]
 8008218:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008228:	d14b      	bne.n	80082c2 <I2C_Master_ADDR+0x30c>
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008230:	d00b      	beq.n	800824a <I2C_Master_ADDR+0x294>
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	2b01      	cmp	r3, #1
 8008236:	d008      	beq.n	800824a <I2C_Master_ADDR+0x294>
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	2b08      	cmp	r3, #8
 800823c:	d005      	beq.n	800824a <I2C_Master_ADDR+0x294>
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	2b10      	cmp	r3, #16
 8008242:	d002      	beq.n	800824a <I2C_Master_ADDR+0x294>
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	2b20      	cmp	r3, #32
 8008248:	d13b      	bne.n	80082c2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008258:	605a      	str	r2, [r3, #4]
 800825a:	e032      	b.n	80082c2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800826a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800827a:	d117      	bne.n	80082ac <I2C_Master_ADDR+0x2f6>
 800827c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008282:	d00b      	beq.n	800829c <I2C_Master_ADDR+0x2e6>
 8008284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008286:	2b01      	cmp	r3, #1
 8008288:	d008      	beq.n	800829c <I2C_Master_ADDR+0x2e6>
 800828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828c:	2b08      	cmp	r3, #8
 800828e:	d005      	beq.n	800829c <I2C_Master_ADDR+0x2e6>
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	2b10      	cmp	r3, #16
 8008294:	d002      	beq.n	800829c <I2C_Master_ADDR+0x2e6>
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	2b20      	cmp	r3, #32
 800829a:	d107      	bne.n	80082ac <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082aa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082ac:	2300      	movs	r3, #0
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	60fb      	str	r3, [r7, #12]
 80082c0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80082c8:	e00b      	b.n	80082e2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082ca:	2300      	movs	r3, #0
 80082cc:	60bb      	str	r3, [r7, #8]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	60bb      	str	r3, [r7, #8]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	60bb      	str	r3, [r7, #8]
 80082de:	68bb      	ldr	r3, [r7, #8]
}
 80082e0:	e7ff      	b.n	80082e2 <I2C_Master_ADDR+0x32c>
 80082e2:	bf00      	nop
 80082e4:	3744      	adds	r7, #68	; 0x44
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bc80      	pop	{r7}
 80082ea:	4770      	bx	lr

080082ec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008300:	b29b      	uxth	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d02b      	beq.n	800835e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	781a      	ldrb	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008320:	b29b      	uxth	r3, r3
 8008322:	3b01      	subs	r3, #1
 8008324:	b29a      	uxth	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800832e:	b29b      	uxth	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d114      	bne.n	800835e <I2C_SlaveTransmit_TXE+0x72>
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	2b29      	cmp	r3, #41	; 0x29
 8008338:	d111      	bne.n	800835e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008348:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2221      	movs	r2, #33	; 0x21
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2228      	movs	r2, #40	; 0x28
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff f9e3 	bl	8007724 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800835e:	bf00      	nop
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008372:	b29b      	uxth	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d011      	beq.n	800839c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	781a      	ldrb	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008392:	b29b      	uxth	r3, r3
 8008394:	3b01      	subs	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bc80      	pop	{r7}
 80083a4:	4770      	bx	lr

080083a6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d02c      	beq.n	800841a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691a      	ldr	r2, [r3, #16]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083dc:	b29b      	uxth	r3, r3
 80083de:	3b01      	subs	r3, #1
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d114      	bne.n	800841a <I2C_SlaveReceive_RXNE+0x74>
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	2b2a      	cmp	r3, #42	; 0x2a
 80083f4:	d111      	bne.n	800841a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008404:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2222      	movs	r2, #34	; 0x22
 800840a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2228      	movs	r2, #40	; 0x28
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff f98e 	bl	8007736 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800842e:	b29b      	uxth	r3, r3
 8008430:	2b00      	cmp	r3, #0
 8008432:	d012      	beq.n	800845a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	691a      	ldr	r2, [r3, #16]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	b2d2      	uxtb	r2, r2
 8008440:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008450:	b29b      	uxth	r3, r3
 8008452:	3b01      	subs	r3, #1
 8008454:	b29a      	uxth	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	bc80      	pop	{r7}
 8008462:	4770      	bx	lr

08008464 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800846e:	2300      	movs	r3, #0
 8008470:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008478:	b2db      	uxtb	r3, r3
 800847a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800847e:	2b28      	cmp	r3, #40	; 0x28
 8008480:	d125      	bne.n	80084ce <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008490:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	f003 0304 	and.w	r3, r3, #4
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800849c:	2301      	movs	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d103      	bne.n	80084b2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	81bb      	strh	r3, [r7, #12]
 80084b0:	e002      	b.n	80084b8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80084c0:	89ba      	ldrh	r2, [r7, #12]
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7ff f93e 	bl	8007748 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80084cc:	e00e      	b.n	80084ec <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084ce:	2300      	movs	r3, #0
 80084d0:	60bb      	str	r3, [r7, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	60bb      	str	r3, [r7, #8]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	60bb      	str	r3, [r7, #8]
 80084e2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80084ec:	bf00      	nop
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008502:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008512:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008514:	2300      	movs	r3, #0
 8008516:	60bb      	str	r3, [r7, #8]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	60bb      	str	r3, [r7, #8]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0201 	orr.w	r2, r2, #1
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008540:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800854c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008550:	d172      	bne.n	8008638 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	2b22      	cmp	r3, #34	; 0x22
 8008556:	d002      	beq.n	800855e <I2C_Slave_STOPF+0x6a>
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	2b2a      	cmp	r3, #42	; 0x2a
 800855c:	d135      	bne.n	80085ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	b29a      	uxth	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008570:	b29b      	uxth	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	f043 0204 	orr.w	r2, r3, #4
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008590:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008596:	4618      	mov	r0, r3
 8008598:	f7fd fcc8 	bl	8005f2c <HAL_DMA_GetState>
 800859c:	4603      	mov	r3, r0
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d049      	beq.n	8008636 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a6:	4a69      	ldr	r2, [pc, #420]	; (800874c <I2C_Slave_STOPF+0x258>)
 80085a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fd fc44 	bl	8005e3c <HAL_DMA_Abort_IT>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d03d      	beq.n	8008636 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80085c8:	e035      	b.n	8008636 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d005      	beq.n	80085ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	f043 0204 	orr.w	r2, r3, #4
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	4618      	mov	r0, r3
 8008604:	f7fd fc92 	bl	8005f2c <HAL_DMA_GetState>
 8008608:	4603      	mov	r3, r0
 800860a:	2b01      	cmp	r3, #1
 800860c:	d014      	beq.n	8008638 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008612:	4a4e      	ldr	r2, [pc, #312]	; (800874c <I2C_Slave_STOPF+0x258>)
 8008614:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861a:	4618      	mov	r0, r3
 800861c:	f7fd fc0e 	bl	8005e3c <HAL_DMA_Abort_IT>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d008      	beq.n	8008638 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008630:	4610      	mov	r0, r2
 8008632:	4798      	blx	r3
 8008634:	e000      	b.n	8008638 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008636:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800863c:	b29b      	uxth	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d03e      	beq.n	80086c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b04      	cmp	r3, #4
 800864e:	d112      	bne.n	8008676 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691a      	ldr	r2, [r3, #16]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800866c:	b29b      	uxth	r3, r3
 800866e:	3b01      	subs	r3, #1
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008680:	2b40      	cmp	r3, #64	; 0x40
 8008682:	d112      	bne.n	80086aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	691a      	ldr	r2, [r3, #16]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	b2d2      	uxtb	r2, r2
 8008690:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b8:	f043 0204 	orr.w	r2, r3, #4
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f8b7 	bl	800883c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80086ce:	e039      	b.n	8008744 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	2b2a      	cmp	r3, #42	; 0x2a
 80086d4:	d109      	bne.n	80086ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2228      	movs	r2, #40	; 0x28
 80086e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff f826 	bl	8007736 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b28      	cmp	r3, #40	; 0x28
 80086f4:	d111      	bne.n	800871a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a15      	ldr	r2, [pc, #84]	; (8008750 <I2C_Slave_STOPF+0x25c>)
 80086fa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2220      	movs	r2, #32
 8008706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff f825 	bl	8007762 <HAL_I2C_ListenCpltCallback>
}
 8008718:	e014      	b.n	8008744 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	2b22      	cmp	r3, #34	; 0x22
 8008720:	d002      	beq.n	8008728 <I2C_Slave_STOPF+0x234>
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	2b22      	cmp	r3, #34	; 0x22
 8008726:	d10d      	bne.n	8008744 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2220      	movs	r2, #32
 8008732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7fe fff9 	bl	8007736 <HAL_I2C_SlaveRxCpltCallback>
}
 8008744:	bf00      	nop
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	0800903d 	.word	0x0800903d
 8008750:	ffff0000 	.word	0xffff0000

08008754 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008762:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b08      	cmp	r3, #8
 800876e:	d002      	beq.n	8008776 <I2C_Slave_AF+0x22>
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b20      	cmp	r3, #32
 8008774:	d129      	bne.n	80087ca <I2C_Slave_AF+0x76>
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	2b28      	cmp	r3, #40	; 0x28
 800877a:	d126      	bne.n	80087ca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a2e      	ldr	r2, [pc, #184]	; (8008838 <I2C_Slave_AF+0xe4>)
 8008780:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008790:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800879a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087aa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7fe ffcd 	bl	8007762 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80087c8:	e031      	b.n	800882e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	2b21      	cmp	r3, #33	; 0x21
 80087ce:	d129      	bne.n	8008824 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a19      	ldr	r2, [pc, #100]	; (8008838 <I2C_Slave_AF+0xe4>)
 80087d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2221      	movs	r2, #33	; 0x21
 80087da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685a      	ldr	r2, [r3, #4]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087fa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008804:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008814:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7fd fe98 	bl	800654c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7fe ff81 	bl	8007724 <HAL_I2C_SlaveTxCpltCallback>
}
 8008822:	e004      	b.n	800882e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800882c:	615a      	str	r2, [r3, #20]
}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	ffff0000 	.word	0xffff0000

0800883c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800884a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008852:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	2b10      	cmp	r3, #16
 8008858:	d002      	beq.n	8008860 <I2C_ITError+0x24>
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	2b40      	cmp	r3, #64	; 0x40
 800885e:	d10a      	bne.n	8008876 <I2C_ITError+0x3a>
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	2b22      	cmp	r3, #34	; 0x22
 8008864:	d107      	bne.n	8008876 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008874:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800887c:	2b28      	cmp	r3, #40	; 0x28
 800887e:	d107      	bne.n	8008890 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2228      	movs	r2, #40	; 0x28
 800888a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800888e:	e015      	b.n	80088bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800889a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800889e:	d00a      	beq.n	80088b6 <I2C_ITError+0x7a>
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	2b60      	cmp	r3, #96	; 0x60
 80088a4:	d007      	beq.n	80088b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ca:	d162      	bne.n	8008992 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d020      	beq.n	800892c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ee:	4a6a      	ldr	r2, [pc, #424]	; (8008a98 <I2C_ITError+0x25c>)
 80088f0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fd faa0 	bl	8005e3c <HAL_DMA_Abort_IT>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 8089 	beq.w	8008a16 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 0201 	bic.w	r2, r2, #1
 8008912:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2220      	movs	r2, #32
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008926:	4610      	mov	r0, r2
 8008928:	4798      	blx	r3
 800892a:	e074      	b.n	8008a16 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	4a59      	ldr	r2, [pc, #356]	; (8008a98 <I2C_ITError+0x25c>)
 8008932:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008938:	4618      	mov	r0, r3
 800893a:	f7fd fa7f 	bl	8005e3c <HAL_DMA_Abort_IT>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d068      	beq.n	8008a16 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894e:	2b40      	cmp	r3, #64	; 0x40
 8008950:	d10b      	bne.n	800896a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	691a      	ldr	r2, [r3, #16]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	b2d2      	uxtb	r2, r2
 800895e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 0201 	bic.w	r2, r2, #1
 8008978:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800898c:	4610      	mov	r0, r2
 800898e:	4798      	blx	r3
 8008990:	e041      	b.n	8008a16 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b60      	cmp	r3, #96	; 0x60
 800899c:	d125      	bne.n	80089ea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b6:	2b40      	cmp	r3, #64	; 0x40
 80089b8:	d10b      	bne.n	80089d2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	691a      	ldr	r2, [r3, #16]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	b2d2      	uxtb	r2, r2
 80089c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0201 	bic.w	r2, r2, #1
 80089e0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7fe fee1 	bl	80077aa <HAL_I2C_AbortCpltCallback>
 80089e8:	e015      	b.n	8008a16 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f4:	2b40      	cmp	r3, #64	; 0x40
 80089f6:	d10b      	bne.n	8008a10 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	691a      	ldr	r2, [r3, #16]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	b2d2      	uxtb	r2, r2
 8008a04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7fe fec1 	bl	8007798 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10e      	bne.n	8008a44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d109      	bne.n	8008a44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d104      	bne.n	8008a44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d007      	beq.n	8008a54 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a52:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a5a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d113      	bne.n	8008a90 <I2C_ITError+0x254>
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	2b28      	cmp	r3, #40	; 0x28
 8008a6c:	d110      	bne.n	8008a90 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a0a      	ldr	r2, [pc, #40]	; (8008a9c <I2C_ITError+0x260>)
 8008a72:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7fe fe69 	bl	8007762 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a90:	bf00      	nop
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	0800903d 	.word	0x0800903d
 8008a9c:	ffff0000 	.word	0xffff0000

08008aa0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	607a      	str	r2, [r7, #4]
 8008aaa:	603b      	str	r3, [r7, #0]
 8008aac:	460b      	mov	r3, r1
 8008aae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d006      	beq.n	8008aca <I2C_MasterRequestWrite+0x2a>
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d003      	beq.n	8008aca <I2C_MasterRequestWrite+0x2a>
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ac8:	d108      	bne.n	8008adc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	e00b      	b.n	8008af4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae0:	2b12      	cmp	r3, #18
 8008ae2:	d107      	bne.n	8008af4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008af2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 fb43 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00d      	beq.n	8008b28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b1a:	d103      	bne.n	8008b24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e035      	b.n	8008b94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b30:	d108      	bne.n	8008b44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b32:	897b      	ldrh	r3, [r7, #10]
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	461a      	mov	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b40:	611a      	str	r2, [r3, #16]
 8008b42:	e01b      	b.n	8008b7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008b44:	897b      	ldrh	r3, [r7, #10]
 8008b46:	11db      	asrs	r3, r3, #7
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	f003 0306 	and.w	r3, r3, #6
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f063 030f 	orn	r3, r3, #15
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	490e      	ldr	r1, [pc, #56]	; (8008b9c <I2C_MasterRequestWrite+0xfc>)
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 fb8c 	bl	8009280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e010      	b.n	8008b94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008b72:	897b      	ldrh	r3, [r7, #10]
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	4907      	ldr	r1, [pc, #28]	; (8008ba0 <I2C_MasterRequestWrite+0x100>)
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 fb7c 	bl	8009280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e000      	b.n	8008b94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	00010008 	.word	0x00010008
 8008ba0:	00010002 	.word	0x00010002

08008ba4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b088      	sub	sp, #32
 8008ba8:	af02      	add	r7, sp, #8
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	607a      	str	r2, [r7, #4]
 8008bae:	603b      	str	r3, [r7, #0]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bc8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d006      	beq.n	8008bde <I2C_MasterRequestRead+0x3a>
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d003      	beq.n	8008bde <I2C_MasterRequestRead+0x3a>
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008bdc:	d108      	bne.n	8008bf0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	e00b      	b.n	8008c08 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf4:	2b11      	cmp	r3, #17
 8008bf6:	d107      	bne.n	8008c08 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 fab9 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00d      	beq.n	8008c3c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c2e:	d103      	bne.n	8008c38 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e079      	b.n	8008d30 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c44:	d108      	bne.n	8008c58 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008c46:	897b      	ldrh	r3, [r7, #10]
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	f043 0301 	orr.w	r3, r3, #1
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	611a      	str	r2, [r3, #16]
 8008c56:	e05f      	b.n	8008d18 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008c58:	897b      	ldrh	r3, [r7, #10]
 8008c5a:	11db      	asrs	r3, r3, #7
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	f003 0306 	and.w	r3, r3, #6
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	f063 030f 	orn	r3, r3, #15
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	4930      	ldr	r1, [pc, #192]	; (8008d38 <I2C_MasterRequestRead+0x194>)
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f000 fb02 	bl	8009280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e054      	b.n	8008d30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008c86:	897b      	ldrh	r3, [r7, #10]
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	4929      	ldr	r1, [pc, #164]	; (8008d3c <I2C_MasterRequestRead+0x198>)
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 faf2 	bl	8009280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e044      	b.n	8008d30 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	613b      	str	r3, [r7, #16]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	695b      	ldr	r3, [r3, #20]
 8008cb0:	613b      	str	r3, [r7, #16]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	613b      	str	r3, [r7, #16]
 8008cba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 fa57 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00d      	beq.n	8008d00 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cf2:	d103      	bne.n	8008cfc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cfa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e017      	b.n	8008d30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008d00:	897b      	ldrh	r3, [r7, #10]
 8008d02:	11db      	asrs	r3, r3, #7
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	f003 0306 	and.w	r3, r3, #6
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	f063 030e 	orn	r3, r3, #14
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	4907      	ldr	r1, [pc, #28]	; (8008d3c <I2C_MasterRequestRead+0x198>)
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f000 faae 	bl	8009280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	00010008 	.word	0x00010008
 8008d3c:	00010002 	.word	0x00010002

08008d40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	4608      	mov	r0, r1
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4603      	mov	r3, r0
 8008d50:	817b      	strh	r3, [r7, #10]
 8008d52:	460b      	mov	r3, r1
 8008d54:	813b      	strh	r3, [r7, #8]
 8008d56:	4613      	mov	r3, r2
 8008d58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 fa08 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00d      	beq.n	8008d9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d90:	d103      	bne.n	8008d9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e05f      	b.n	8008e5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d9e:	897b      	ldrh	r3, [r7, #10]
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	461a      	mov	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008dac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	6a3a      	ldr	r2, [r7, #32]
 8008db2:	492d      	ldr	r1, [pc, #180]	; (8008e68 <I2C_RequestMemoryWrite+0x128>)
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 fa63 	bl	8009280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e04c      	b.n	8008e5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	617b      	str	r3, [r7, #20]
 8008dd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ddc:	6a39      	ldr	r1, [r7, #32]
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 faee 	bl	80093c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00d      	beq.n	8008e06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	d107      	bne.n	8008e02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e02b      	b.n	8008e5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e06:	88fb      	ldrh	r3, [r7, #6]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d105      	bne.n	8008e18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e0c:	893b      	ldrh	r3, [r7, #8]
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	611a      	str	r2, [r3, #16]
 8008e16:	e021      	b.n	8008e5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008e18:	893b      	ldrh	r3, [r7, #8]
 8008e1a:	0a1b      	lsrs	r3, r3, #8
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e28:	6a39      	ldr	r1, [r7, #32]
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 fac8 	bl	80093c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00d      	beq.n	8008e52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d107      	bne.n	8008e4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e005      	b.n	8008e5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e52:	893b      	ldrh	r3, [r7, #8]
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	00010002 	.word	0x00010002

08008e6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af02      	add	r7, sp, #8
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	4608      	mov	r0, r1
 8008e76:	4611      	mov	r1, r2
 8008e78:	461a      	mov	r2, r3
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	817b      	strh	r3, [r7, #10]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	813b      	strh	r3, [r7, #8]
 8008e82:	4613      	mov	r3, r2
 8008e84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ea4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 f96a 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00d      	beq.n	8008eda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ecc:	d103      	bne.n	8008ed6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e0aa      	b.n	8009030 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008eda:	897b      	ldrh	r3, [r7, #10]
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	461a      	mov	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ee8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	6a3a      	ldr	r2, [r7, #32]
 8008eee:	4952      	ldr	r1, [pc, #328]	; (8009038 <I2C_RequestMemoryRead+0x1cc>)
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 f9c5 	bl	8009280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e097      	b.n	8009030 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f00:	2300      	movs	r3, #0
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	617b      	str	r3, [r7, #20]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	617b      	str	r3, [r7, #20]
 8008f14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f18:	6a39      	ldr	r1, [r7, #32]
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 fa50 	bl	80093c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00d      	beq.n	8008f42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	2b04      	cmp	r3, #4
 8008f2c:	d107      	bne.n	8008f3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e076      	b.n	8009030 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f42:	88fb      	ldrh	r3, [r7, #6]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d105      	bne.n	8008f54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f48:	893b      	ldrh	r3, [r7, #8]
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	611a      	str	r2, [r3, #16]
 8008f52:	e021      	b.n	8008f98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008f54:	893b      	ldrh	r3, [r7, #8]
 8008f56:	0a1b      	lsrs	r3, r3, #8
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f64:	6a39      	ldr	r1, [r7, #32]
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f000 fa2a 	bl	80093c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00d      	beq.n	8008f8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d107      	bne.n	8008f8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e050      	b.n	8009030 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f8e:	893b      	ldrh	r3, [r7, #8]
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9a:	6a39      	ldr	r1, [r7, #32]
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fa0f 	bl	80093c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00d      	beq.n	8008fc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	2b04      	cmp	r3, #4
 8008fae:	d107      	bne.n	8008fc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e035      	b.n	8009030 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 f8d3 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00d      	beq.n	8009008 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ffa:	d103      	bne.n	8009004 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009002:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e013      	b.n	8009030 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009008:	897b      	ldrh	r3, [r7, #10]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	f043 0301 	orr.w	r3, r3, #1
 8009010:	b2da      	uxtb	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	6a3a      	ldr	r2, [r7, #32]
 800901c:	4906      	ldr	r1, [pc, #24]	; (8009038 <I2C_RequestMemoryRead+0x1cc>)
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 f92e 	bl	8009280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e000      	b.n	8009030 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3718      	adds	r7, #24
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	00010002 	.word	0x00010002

0800903c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009054:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009056:	4b4b      	ldr	r3, [pc, #300]	; (8009184 <I2C_DMAAbort+0x148>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	08db      	lsrs	r3, r3, #3
 800905c:	4a4a      	ldr	r2, [pc, #296]	; (8009188 <I2C_DMAAbort+0x14c>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	0a1a      	lsrs	r2, r3, #8
 8009064:	4613      	mov	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	00da      	lsls	r2, r3, #3
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d106      	bne.n	8009084 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	f043 0220 	orr.w	r2, r3, #32
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009082:	e00a      	b.n	800909a <I2C_DMAAbort+0x5e>
    }
    count--;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3b01      	subs	r3, #1
 8009088:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009098:	d0ea      	beq.n	8009070 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a6:	2200      	movs	r2, #0
 80090a8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b6:	2200      	movs	r2, #0
 80090b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2200      	movs	r2, #0
 80090ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d003      	beq.n	80090e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090dc:	2200      	movs	r2, #0
 80090de:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ec:	2200      	movs	r2, #0
 80090ee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 0201 	bic.w	r2, r2, #1
 80090fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b60      	cmp	r3, #96	; 0x60
 800910a:	d10e      	bne.n	800912a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2220      	movs	r2, #32
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	2200      	movs	r2, #0
 8009120:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009122:	6978      	ldr	r0, [r7, #20]
 8009124:	f7fe fb41 	bl	80077aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009128:	e027      	b.n	800917a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800912a:	7cfb      	ldrb	r3, [r7, #19]
 800912c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009130:	2b28      	cmp	r3, #40	; 0x28
 8009132:	d117      	bne.n	8009164 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f042 0201 	orr.w	r2, r2, #1
 8009142:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009152:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	2200      	movs	r2, #0
 8009158:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2228      	movs	r2, #40	; 0x28
 800915e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009162:	e007      	b.n	8009174 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2220      	movs	r2, #32
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009174:	6978      	ldr	r0, [r7, #20]
 8009176:	f7fe fb0f 	bl	8007798 <HAL_I2C_ErrorCallback>
}
 800917a:	bf00      	nop
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	20000008 	.word	0x20000008
 8009188:	14f8b589 	.word	0x14f8b589

0800918c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	603b      	str	r3, [r7, #0]
 8009198:	4613      	mov	r3, r2
 800919a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800919c:	e048      	b.n	8009230 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a4:	d044      	beq.n	8009230 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a6:	f7fc fcd3 	bl	8005b50 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d302      	bcc.n	80091bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d139      	bne.n	8009230 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	0c1b      	lsrs	r3, r3, #16
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d10d      	bne.n	80091e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	43da      	mvns	r2, r3
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	4013      	ands	r3, r2
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bf0c      	ite	eq
 80091d8:	2301      	moveq	r3, #1
 80091da:	2300      	movne	r3, #0
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	461a      	mov	r2, r3
 80091e0:	e00c      	b.n	80091fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	43da      	mvns	r2, r3
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	4013      	ands	r3, r2
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	bf0c      	ite	eq
 80091f4:	2301      	moveq	r3, #1
 80091f6:	2300      	movne	r3, #0
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	461a      	mov	r2, r3
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d116      	bne.n	8009230 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2220      	movs	r2, #32
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921c:	f043 0220 	orr.w	r2, r3, #32
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e023      	b.n	8009278 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	0c1b      	lsrs	r3, r3, #16
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b01      	cmp	r3, #1
 8009238:	d10d      	bne.n	8009256 <I2C_WaitOnFlagUntilTimeout+0xca>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	43da      	mvns	r2, r3
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	4013      	ands	r3, r2
 8009246:	b29b      	uxth	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	bf0c      	ite	eq
 800924c:	2301      	moveq	r3, #1
 800924e:	2300      	movne	r3, #0
 8009250:	b2db      	uxtb	r3, r3
 8009252:	461a      	mov	r2, r3
 8009254:	e00c      	b.n	8009270 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	43da      	mvns	r2, r3
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	4013      	ands	r3, r2
 8009262:	b29b      	uxth	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	bf0c      	ite	eq
 8009268:	2301      	moveq	r3, #1
 800926a:	2300      	movne	r3, #0
 800926c:	b2db      	uxtb	r3, r3
 800926e:	461a      	mov	r2, r3
 8009270:	79fb      	ldrb	r3, [r7, #7]
 8009272:	429a      	cmp	r2, r3
 8009274:	d093      	beq.n	800919e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800928e:	e071      	b.n	8009374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800929a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800929e:	d123      	bne.n	80092e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2220      	movs	r2, #32
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d4:	f043 0204 	orr.w	r2, r3, #4
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e067      	b.n	80093b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ee:	d041      	beq.n	8009374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092f0:	f7fc fc2e 	bl	8005b50 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d302      	bcc.n	8009306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d136      	bne.n	8009374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	0c1b      	lsrs	r3, r3, #16
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2b01      	cmp	r3, #1
 800930e:	d10c      	bne.n	800932a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	43da      	mvns	r2, r3
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	4013      	ands	r3, r2
 800931c:	b29b      	uxth	r3, r3
 800931e:	2b00      	cmp	r3, #0
 8009320:	bf14      	ite	ne
 8009322:	2301      	movne	r3, #1
 8009324:	2300      	moveq	r3, #0
 8009326:	b2db      	uxtb	r3, r3
 8009328:	e00b      	b.n	8009342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	43da      	mvns	r2, r3
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	4013      	ands	r3, r2
 8009336:	b29b      	uxth	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	bf14      	ite	ne
 800933c:	2301      	movne	r3, #1
 800933e:	2300      	moveq	r3, #0
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b00      	cmp	r3, #0
 8009344:	d016      	beq.n	8009374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2220      	movs	r2, #32
 8009350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009360:	f043 0220 	orr.w	r2, r3, #32
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e021      	b.n	80093b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	0c1b      	lsrs	r3, r3, #16
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b01      	cmp	r3, #1
 800937c:	d10c      	bne.n	8009398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	43da      	mvns	r2, r3
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	4013      	ands	r3, r2
 800938a:	b29b      	uxth	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	bf14      	ite	ne
 8009390:	2301      	movne	r3, #1
 8009392:	2300      	moveq	r3, #0
 8009394:	b2db      	uxtb	r3, r3
 8009396:	e00b      	b.n	80093b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	43da      	mvns	r2, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	4013      	ands	r3, r2
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	bf14      	ite	ne
 80093aa:	2301      	movne	r3, #1
 80093ac:	2300      	moveq	r3, #0
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f47f af6d 	bne.w	8009290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093cc:	e034      	b.n	8009438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 f915 	bl	80095fe <I2C_IsAcknowledgeFailed>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e034      	b.n	8009448 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e4:	d028      	beq.n	8009438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093e6:	f7fc fbb3 	bl	8005b50 <HAL_GetTick>
 80093ea:	4602      	mov	r2, r0
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d302      	bcc.n	80093fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d11d      	bne.n	8009438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009406:	2b80      	cmp	r3, #128	; 0x80
 8009408:	d016      	beq.n	8009438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2220      	movs	r2, #32
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009424:	f043 0220 	orr.w	r2, r3, #32
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e007      	b.n	8009448 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009442:	2b80      	cmp	r3, #128	; 0x80
 8009444:	d1c3      	bne.n	80093ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800945c:	e034      	b.n	80094c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f8cd 	bl	80095fe <I2C_IsAcknowledgeFailed>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e034      	b.n	80094d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009474:	d028      	beq.n	80094c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009476:	f7fc fb6b 	bl	8005b50 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	429a      	cmp	r2, r3
 8009484:	d302      	bcc.n	800948c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d11d      	bne.n	80094c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	2b04      	cmp	r3, #4
 8009498:	d016      	beq.n	80094c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2220      	movs	r2, #32
 80094a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b4:	f043 0220 	orr.w	r2, r3, #32
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e007      	b.n	80094d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	f003 0304 	and.w	r3, r3, #4
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d1c3      	bne.n	800945e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80094ec:	4b13      	ldr	r3, [pc, #76]	; (800953c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	08db      	lsrs	r3, r3, #3
 80094f2:	4a13      	ldr	r2, [pc, #76]	; (8009540 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80094f4:	fba2 2303 	umull	r2, r3, r2, r3
 80094f8:	0a1a      	lsrs	r2, r3, #8
 80094fa:	4613      	mov	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3b01      	subs	r3, #1
 8009506:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d107      	bne.n	800951e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009512:	f043 0220 	orr.w	r2, r3, #32
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e008      	b.n	8009530 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800952c:	d0e9      	beq.n	8009502 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20000008 	.word	0x20000008
 8009540:	14f8b589 	.word	0x14f8b589

08009544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009550:	e049      	b.n	80095e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	f003 0310 	and.w	r3, r3, #16
 800955c:	2b10      	cmp	r3, #16
 800955e:	d119      	bne.n	8009594 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f06f 0210 	mvn.w	r2, #16
 8009568:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2220      	movs	r2, #32
 8009574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e030      	b.n	80095f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009594:	f7fc fadc 	bl	8005b50 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d302      	bcc.n	80095aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d11d      	bne.n	80095e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b4:	2b40      	cmp	r3, #64	; 0x40
 80095b6:	d016      	beq.n	80095e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	f043 0220 	orr.w	r2, r3, #32
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e007      	b.n	80095f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f0:	2b40      	cmp	r3, #64	; 0x40
 80095f2:	d1ae      	bne.n	8009552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009614:	d11b      	bne.n	800964e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800961e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2220      	movs	r2, #32
 800962a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963a:	f043 0204 	orr.w	r2, r3, #4
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e000      	b.n	8009650 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	bc80      	pop	{r7}
 8009658:	4770      	bx	lr

0800965a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009666:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800966a:	d103      	bne.n	8009674 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009672:	e007      	b.n	8009684 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009678:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800967c:	d102      	bne.n	8009684 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2208      	movs	r2, #8
 8009682:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	bc80      	pop	{r7}
 800968c:	4770      	bx	lr
	...

08009690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e272      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 8087 	beq.w	80097be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80096b0:	4b92      	ldr	r3, [pc, #584]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f003 030c 	and.w	r3, r3, #12
 80096b8:	2b04      	cmp	r3, #4
 80096ba:	d00c      	beq.n	80096d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80096bc:	4b8f      	ldr	r3, [pc, #572]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f003 030c 	and.w	r3, r3, #12
 80096c4:	2b08      	cmp	r3, #8
 80096c6:	d112      	bne.n	80096ee <HAL_RCC_OscConfig+0x5e>
 80096c8:	4b8c      	ldr	r3, [pc, #560]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d4:	d10b      	bne.n	80096ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096d6:	4b89      	ldr	r3, [pc, #548]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d06c      	beq.n	80097bc <HAL_RCC_OscConfig+0x12c>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d168      	bne.n	80097bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e24c      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096f6:	d106      	bne.n	8009706 <HAL_RCC_OscConfig+0x76>
 80096f8:	4b80      	ldr	r3, [pc, #512]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a7f      	ldr	r2, [pc, #508]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80096fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	e02e      	b.n	8009764 <HAL_RCC_OscConfig+0xd4>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10c      	bne.n	8009728 <HAL_RCC_OscConfig+0x98>
 800970e:	4b7b      	ldr	r3, [pc, #492]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a7a      	ldr	r2, [pc, #488]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	4b78      	ldr	r3, [pc, #480]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a77      	ldr	r2, [pc, #476]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	e01d      	b.n	8009764 <HAL_RCC_OscConfig+0xd4>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009730:	d10c      	bne.n	800974c <HAL_RCC_OscConfig+0xbc>
 8009732:	4b72      	ldr	r3, [pc, #456]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a71      	ldr	r2, [pc, #452]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	4b6f      	ldr	r3, [pc, #444]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a6e      	ldr	r2, [pc, #440]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	e00b      	b.n	8009764 <HAL_RCC_OscConfig+0xd4>
 800974c:	4b6b      	ldr	r3, [pc, #428]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a6a      	ldr	r2, [pc, #424]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	4b68      	ldr	r3, [pc, #416]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a67      	ldr	r2, [pc, #412]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 800975e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d013      	beq.n	8009794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800976c:	f7fc f9f0 	bl	8005b50 <HAL_GetTick>
 8009770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009772:	e008      	b.n	8009786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009774:	f7fc f9ec 	bl	8005b50 <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	2b64      	cmp	r3, #100	; 0x64
 8009780:	d901      	bls.n	8009786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e200      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009786:	4b5d      	ldr	r3, [pc, #372]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d0f0      	beq.n	8009774 <HAL_RCC_OscConfig+0xe4>
 8009792:	e014      	b.n	80097be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009794:	f7fc f9dc 	bl	8005b50 <HAL_GetTick>
 8009798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800979a:	e008      	b.n	80097ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800979c:	f7fc f9d8 	bl	8005b50 <HAL_GetTick>
 80097a0:	4602      	mov	r2, r0
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	2b64      	cmp	r3, #100	; 0x64
 80097a8:	d901      	bls.n	80097ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e1ec      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097ae:	4b53      	ldr	r3, [pc, #332]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1f0      	bne.n	800979c <HAL_RCC_OscConfig+0x10c>
 80097ba:	e000      	b.n	80097be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 0302 	and.w	r3, r3, #2
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d063      	beq.n	8009892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80097ca:	4b4c      	ldr	r3, [pc, #304]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f003 030c 	and.w	r3, r3, #12
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00b      	beq.n	80097ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80097d6:	4b49      	ldr	r3, [pc, #292]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f003 030c 	and.w	r3, r3, #12
 80097de:	2b08      	cmp	r3, #8
 80097e0:	d11c      	bne.n	800981c <HAL_RCC_OscConfig+0x18c>
 80097e2:	4b46      	ldr	r3, [pc, #280]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d116      	bne.n	800981c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097ee:	4b43      	ldr	r3, [pc, #268]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d005      	beq.n	8009806 <HAL_RCC_OscConfig+0x176>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d001      	beq.n	8009806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e1c0      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009806:	4b3d      	ldr	r3, [pc, #244]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	4939      	ldr	r1, [pc, #228]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009816:	4313      	orrs	r3, r2
 8009818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800981a:	e03a      	b.n	8009892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d020      	beq.n	8009866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009824:	4b36      	ldr	r3, [pc, #216]	; (8009900 <HAL_RCC_OscConfig+0x270>)
 8009826:	2201      	movs	r2, #1
 8009828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800982a:	f7fc f991 	bl	8005b50 <HAL_GetTick>
 800982e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009830:	e008      	b.n	8009844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009832:	f7fc f98d 	bl	8005b50 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	d901      	bls.n	8009844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e1a1      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009844:	4b2d      	ldr	r3, [pc, #180]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0f0      	beq.n	8009832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009850:	4b2a      	ldr	r3, [pc, #168]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	4927      	ldr	r1, [pc, #156]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009860:	4313      	orrs	r3, r2
 8009862:	600b      	str	r3, [r1, #0]
 8009864:	e015      	b.n	8009892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009866:	4b26      	ldr	r3, [pc, #152]	; (8009900 <HAL_RCC_OscConfig+0x270>)
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800986c:	f7fc f970 	bl	8005b50 <HAL_GetTick>
 8009870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009872:	e008      	b.n	8009886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009874:	f7fc f96c 	bl	8005b50 <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	2b02      	cmp	r3, #2
 8009880:	d901      	bls.n	8009886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e180      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009886:	4b1d      	ldr	r3, [pc, #116]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1f0      	bne.n	8009874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0308 	and.w	r3, r3, #8
 800989a:	2b00      	cmp	r3, #0
 800989c:	d03a      	beq.n	8009914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d019      	beq.n	80098da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098a6:	4b17      	ldr	r3, [pc, #92]	; (8009904 <HAL_RCC_OscConfig+0x274>)
 80098a8:	2201      	movs	r2, #1
 80098aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098ac:	f7fc f950 	bl	8005b50 <HAL_GetTick>
 80098b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80098b2:	e008      	b.n	80098c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098b4:	f7fc f94c 	bl	8005b50 <HAL_GetTick>
 80098b8:	4602      	mov	r2, r0
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d901      	bls.n	80098c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e160      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80098c6:	4b0d      	ldr	r3, [pc, #52]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80098c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ca:	f003 0302 	and.w	r3, r3, #2
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d0f0      	beq.n	80098b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80098d2:	2001      	movs	r0, #1
 80098d4:	f000 face 	bl	8009e74 <RCC_Delay>
 80098d8:	e01c      	b.n	8009914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098da:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <HAL_RCC_OscConfig+0x274>)
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098e0:	f7fc f936 	bl	8005b50 <HAL_GetTick>
 80098e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098e6:	e00f      	b.n	8009908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098e8:	f7fc f932 	bl	8005b50 <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d908      	bls.n	8009908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e146      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
 80098fa:	bf00      	nop
 80098fc:	40021000 	.word	0x40021000
 8009900:	42420000 	.word	0x42420000
 8009904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009908:	4b92      	ldr	r3, [pc, #584]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	f003 0302 	and.w	r3, r3, #2
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e9      	bne.n	80098e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 0304 	and.w	r3, r3, #4
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 80a6 	beq.w	8009a6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009922:	2300      	movs	r3, #0
 8009924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009926:	4b8b      	ldr	r3, [pc, #556]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10d      	bne.n	800994e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009932:	4b88      	ldr	r3, [pc, #544]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009934:	69db      	ldr	r3, [r3, #28]
 8009936:	4a87      	ldr	r2, [pc, #540]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800993c:	61d3      	str	r3, [r2, #28]
 800993e:	4b85      	ldr	r3, [pc, #532]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009946:	60bb      	str	r3, [r7, #8]
 8009948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800994a:	2301      	movs	r3, #1
 800994c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800994e:	4b82      	ldr	r3, [pc, #520]	; (8009b58 <HAL_RCC_OscConfig+0x4c8>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009956:	2b00      	cmp	r3, #0
 8009958:	d118      	bne.n	800998c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800995a:	4b7f      	ldr	r3, [pc, #508]	; (8009b58 <HAL_RCC_OscConfig+0x4c8>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a7e      	ldr	r2, [pc, #504]	; (8009b58 <HAL_RCC_OscConfig+0x4c8>)
 8009960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009966:	f7fc f8f3 	bl	8005b50 <HAL_GetTick>
 800996a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800996c:	e008      	b.n	8009980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800996e:	f7fc f8ef 	bl	8005b50 <HAL_GetTick>
 8009972:	4602      	mov	r2, r0
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	2b64      	cmp	r3, #100	; 0x64
 800997a:	d901      	bls.n	8009980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	e103      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009980:	4b75      	ldr	r3, [pc, #468]	; (8009b58 <HAL_RCC_OscConfig+0x4c8>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009988:	2b00      	cmp	r3, #0
 800998a:	d0f0      	beq.n	800996e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d106      	bne.n	80099a2 <HAL_RCC_OscConfig+0x312>
 8009994:	4b6f      	ldr	r3, [pc, #444]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	4a6e      	ldr	r2, [pc, #440]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 800999a:	f043 0301 	orr.w	r3, r3, #1
 800999e:	6213      	str	r3, [r2, #32]
 80099a0:	e02d      	b.n	80099fe <HAL_RCC_OscConfig+0x36e>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10c      	bne.n	80099c4 <HAL_RCC_OscConfig+0x334>
 80099aa:	4b6a      	ldr	r3, [pc, #424]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	4a69      	ldr	r2, [pc, #420]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099b0:	f023 0301 	bic.w	r3, r3, #1
 80099b4:	6213      	str	r3, [r2, #32]
 80099b6:	4b67      	ldr	r3, [pc, #412]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	4a66      	ldr	r2, [pc, #408]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099bc:	f023 0304 	bic.w	r3, r3, #4
 80099c0:	6213      	str	r3, [r2, #32]
 80099c2:	e01c      	b.n	80099fe <HAL_RCC_OscConfig+0x36e>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	2b05      	cmp	r3, #5
 80099ca:	d10c      	bne.n	80099e6 <HAL_RCC_OscConfig+0x356>
 80099cc:	4b61      	ldr	r3, [pc, #388]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	4a60      	ldr	r2, [pc, #384]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099d2:	f043 0304 	orr.w	r3, r3, #4
 80099d6:	6213      	str	r3, [r2, #32]
 80099d8:	4b5e      	ldr	r3, [pc, #376]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	4a5d      	ldr	r2, [pc, #372]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099de:	f043 0301 	orr.w	r3, r3, #1
 80099e2:	6213      	str	r3, [r2, #32]
 80099e4:	e00b      	b.n	80099fe <HAL_RCC_OscConfig+0x36e>
 80099e6:	4b5b      	ldr	r3, [pc, #364]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	4a5a      	ldr	r2, [pc, #360]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099ec:	f023 0301 	bic.w	r3, r3, #1
 80099f0:	6213      	str	r3, [r2, #32]
 80099f2:	4b58      	ldr	r3, [pc, #352]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	4a57      	ldr	r2, [pc, #348]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099f8:	f023 0304 	bic.w	r3, r3, #4
 80099fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d015      	beq.n	8009a32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a06:	f7fc f8a3 	bl	8005b50 <HAL_GetTick>
 8009a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a0c:	e00a      	b.n	8009a24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a0e:	f7fc f89f 	bl	8005b50 <HAL_GetTick>
 8009a12:	4602      	mov	r2, r0
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d901      	bls.n	8009a24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e0b1      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a24:	4b4b      	ldr	r3, [pc, #300]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	f003 0302 	and.w	r3, r3, #2
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0ee      	beq.n	8009a0e <HAL_RCC_OscConfig+0x37e>
 8009a30:	e014      	b.n	8009a5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a32:	f7fc f88d 	bl	8005b50 <HAL_GetTick>
 8009a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a38:	e00a      	b.n	8009a50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a3a:	f7fc f889 	bl	8005b50 <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d901      	bls.n	8009a50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	e09b      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a50:	4b40      	ldr	r3, [pc, #256]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1ee      	bne.n	8009a3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d105      	bne.n	8009a6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a62:	4b3c      	ldr	r3, [pc, #240]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	4a3b      	ldr	r2, [pc, #236]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 8087 	beq.w	8009b86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a78:	4b36      	ldr	r3, [pc, #216]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f003 030c 	and.w	r3, r3, #12
 8009a80:	2b08      	cmp	r3, #8
 8009a82:	d061      	beq.n	8009b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d146      	bne.n	8009b1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a8c:	4b33      	ldr	r3, [pc, #204]	; (8009b5c <HAL_RCC_OscConfig+0x4cc>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a92:	f7fc f85d 	bl	8005b50 <HAL_GetTick>
 8009a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009a98:	e008      	b.n	8009aac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a9a:	f7fc f859 	bl	8005b50 <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d901      	bls.n	8009aac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e06d      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009aac:	4b29      	ldr	r3, [pc, #164]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1f0      	bne.n	8009a9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ac0:	d108      	bne.n	8009ad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009ac2:	4b24      	ldr	r3, [pc, #144]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	4921      	ldr	r1, [pc, #132]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ad4:	4b1f      	ldr	r3, [pc, #124]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a19      	ldr	r1, [r3, #32]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	430b      	orrs	r3, r1
 8009ae6:	491b      	ldr	r1, [pc, #108]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009aec:	4b1b      	ldr	r3, [pc, #108]	; (8009b5c <HAL_RCC_OscConfig+0x4cc>)
 8009aee:	2201      	movs	r2, #1
 8009af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009af2:	f7fc f82d 	bl	8005b50 <HAL_GetTick>
 8009af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009af8:	e008      	b.n	8009b0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009afa:	f7fc f829 	bl	8005b50 <HAL_GetTick>
 8009afe:	4602      	mov	r2, r0
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d901      	bls.n	8009b0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e03d      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009b0c:	4b11      	ldr	r3, [pc, #68]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d0f0      	beq.n	8009afa <HAL_RCC_OscConfig+0x46a>
 8009b18:	e035      	b.n	8009b86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b1a:	4b10      	ldr	r3, [pc, #64]	; (8009b5c <HAL_RCC_OscConfig+0x4cc>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b20:	f7fc f816 	bl	8005b50 <HAL_GetTick>
 8009b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b26:	e008      	b.n	8009b3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b28:	f7fc f812 	bl	8005b50 <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d901      	bls.n	8009b3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e026      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b3a:	4b06      	ldr	r3, [pc, #24]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1f0      	bne.n	8009b28 <HAL_RCC_OscConfig+0x498>
 8009b46:	e01e      	b.n	8009b86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	69db      	ldr	r3, [r3, #28]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d107      	bne.n	8009b60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e019      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
 8009b54:	40021000 	.word	0x40021000
 8009b58:	40007000 	.word	0x40007000
 8009b5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009b60:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <HAL_RCC_OscConfig+0x500>)
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d106      	bne.n	8009b82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d001      	beq.n	8009b86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e000      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3718      	adds	r7, #24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	40021000 	.word	0x40021000

08009b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d101      	bne.n	8009ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e0d0      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ba8:	4b6a      	ldr	r3, [pc, #424]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0307 	and.w	r3, r3, #7
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d910      	bls.n	8009bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bb6:	4b67      	ldr	r3, [pc, #412]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f023 0207 	bic.w	r2, r3, #7
 8009bbe:	4965      	ldr	r1, [pc, #404]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bc6:	4b63      	ldr	r3, [pc, #396]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0307 	and.w	r3, r3, #7
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d001      	beq.n	8009bd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e0b8      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0302 	and.w	r3, r3, #2
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d020      	beq.n	8009c26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d005      	beq.n	8009bfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009bf0:	4b59      	ldr	r3, [pc, #356]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	4a58      	ldr	r2, [pc, #352]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009bf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009bfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 0308 	and.w	r3, r3, #8
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d005      	beq.n	8009c14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c08:	4b53      	ldr	r3, [pc, #332]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	4a52      	ldr	r2, [pc, #328]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009c12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c14:	4b50      	ldr	r3, [pc, #320]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	494d      	ldr	r1, [pc, #308]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d040      	beq.n	8009cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d107      	bne.n	8009c4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c3a:	4b47      	ldr	r3, [pc, #284]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d115      	bne.n	8009c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e07f      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d107      	bne.n	8009c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c52:	4b41      	ldr	r3, [pc, #260]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d109      	bne.n	8009c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e073      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c62:	4b3d      	ldr	r3, [pc, #244]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0302 	and.w	r3, r3, #2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d101      	bne.n	8009c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e06b      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c72:	4b39      	ldr	r3, [pc, #228]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f023 0203 	bic.w	r2, r3, #3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	4936      	ldr	r1, [pc, #216]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c80:	4313      	orrs	r3, r2
 8009c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c84:	f7fb ff64 	bl	8005b50 <HAL_GetTick>
 8009c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c8a:	e00a      	b.n	8009ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c8c:	f7fb ff60 	bl	8005b50 <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d901      	bls.n	8009ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e053      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ca2:	4b2d      	ldr	r3, [pc, #180]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	f003 020c 	and.w	r2, r3, #12
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d1eb      	bne.n	8009c8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009cb4:	4b27      	ldr	r3, [pc, #156]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0307 	and.w	r3, r3, #7
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d210      	bcs.n	8009ce4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cc2:	4b24      	ldr	r3, [pc, #144]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f023 0207 	bic.w	r2, r3, #7
 8009cca:	4922      	ldr	r1, [pc, #136]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cd2:	4b20      	ldr	r3, [pc, #128]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0307 	and.w	r3, r3, #7
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d001      	beq.n	8009ce4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e032      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d008      	beq.n	8009d02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009cf0:	4b19      	ldr	r3, [pc, #100]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	4916      	ldr	r1, [pc, #88]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0308 	and.w	r3, r3, #8
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d009      	beq.n	8009d22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009d0e:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	00db      	lsls	r3, r3, #3
 8009d1c:	490e      	ldr	r1, [pc, #56]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009d22:	f000 f821 	bl	8009d68 <HAL_RCC_GetSysClockFreq>
 8009d26:	4602      	mov	r2, r0
 8009d28:	4b0b      	ldr	r3, [pc, #44]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	091b      	lsrs	r3, r3, #4
 8009d2e:	f003 030f 	and.w	r3, r3, #15
 8009d32:	490a      	ldr	r1, [pc, #40]	; (8009d5c <HAL_RCC_ClockConfig+0x1c8>)
 8009d34:	5ccb      	ldrb	r3, [r1, r3]
 8009d36:	fa22 f303 	lsr.w	r3, r2, r3
 8009d3a:	4a09      	ldr	r2, [pc, #36]	; (8009d60 <HAL_RCC_ClockConfig+0x1cc>)
 8009d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009d3e:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <HAL_RCC_ClockConfig+0x1d0>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fb fec2 	bl	8005acc <HAL_InitTick>

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	40022000 	.word	0x40022000
 8009d58:	40021000 	.word	0x40021000
 8009d5c:	08015b74 	.word	0x08015b74
 8009d60:	20000008 	.word	0x20000008
 8009d64:	2000000c 	.word	0x2000000c

08009d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]
 8009d72:	2300      	movs	r3, #0
 8009d74:	60bb      	str	r3, [r7, #8]
 8009d76:	2300      	movs	r3, #0
 8009d78:	617b      	str	r3, [r7, #20]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009d82:	4b1e      	ldr	r3, [pc, #120]	; (8009dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f003 030c 	and.w	r3, r3, #12
 8009d8e:	2b04      	cmp	r3, #4
 8009d90:	d002      	beq.n	8009d98 <HAL_RCC_GetSysClockFreq+0x30>
 8009d92:	2b08      	cmp	r3, #8
 8009d94:	d003      	beq.n	8009d9e <HAL_RCC_GetSysClockFreq+0x36>
 8009d96:	e027      	b.n	8009de8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009d98:	4b19      	ldr	r3, [pc, #100]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8009d9a:	613b      	str	r3, [r7, #16]
      break;
 8009d9c:	e027      	b.n	8009dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	0c9b      	lsrs	r3, r3, #18
 8009da2:	f003 030f 	and.w	r3, r3, #15
 8009da6:	4a17      	ldr	r2, [pc, #92]	; (8009e04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009da8:	5cd3      	ldrb	r3, [r2, r3]
 8009daa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d010      	beq.n	8009dd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009db6:	4b11      	ldr	r3, [pc, #68]	; (8009dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	0c5b      	lsrs	r3, r3, #17
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	4a11      	ldr	r2, [pc, #68]	; (8009e08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8009dc2:	5cd3      	ldrb	r3, [r2, r3]
 8009dc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a0d      	ldr	r2, [pc, #52]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8009dca:	fb03 f202 	mul.w	r2, r3, r2
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd4:	617b      	str	r3, [r7, #20]
 8009dd6:	e004      	b.n	8009de2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a0c      	ldr	r2, [pc, #48]	; (8009e0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8009ddc:	fb02 f303 	mul.w	r3, r2, r3
 8009de0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	613b      	str	r3, [r7, #16]
      break;
 8009de6:	e002      	b.n	8009dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009de8:	4b05      	ldr	r3, [pc, #20]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8009dea:	613b      	str	r3, [r7, #16]
      break;
 8009dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009dee:	693b      	ldr	r3, [r7, #16]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	371c      	adds	r7, #28
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bc80      	pop	{r7}
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	40021000 	.word	0x40021000
 8009e00:	007a1200 	.word	0x007a1200
 8009e04:	08015b8c 	.word	0x08015b8c
 8009e08:	08015b9c 	.word	0x08015b9c
 8009e0c:	003d0900 	.word	0x003d0900

08009e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e10:	b480      	push	{r7}
 8009e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e14:	4b02      	ldr	r3, [pc, #8]	; (8009e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8009e16:	681b      	ldr	r3, [r3, #0]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bc80      	pop	{r7}
 8009e1e:	4770      	bx	lr
 8009e20:	20000008 	.word	0x20000008

08009e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009e28:	f7ff fff2 	bl	8009e10 <HAL_RCC_GetHCLKFreq>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	4b05      	ldr	r3, [pc, #20]	; (8009e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	0a1b      	lsrs	r3, r3, #8
 8009e34:	f003 0307 	and.w	r3, r3, #7
 8009e38:	4903      	ldr	r1, [pc, #12]	; (8009e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e3a:	5ccb      	ldrb	r3, [r1, r3]
 8009e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	40021000 	.word	0x40021000
 8009e48:	08015b84 	.word	0x08015b84

08009e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009e50:	f7ff ffde 	bl	8009e10 <HAL_RCC_GetHCLKFreq>
 8009e54:	4602      	mov	r2, r0
 8009e56:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	0adb      	lsrs	r3, r3, #11
 8009e5c:	f003 0307 	and.w	r3, r3, #7
 8009e60:	4903      	ldr	r1, [pc, #12]	; (8009e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e62:	5ccb      	ldrb	r3, [r1, r3]
 8009e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	40021000 	.word	0x40021000
 8009e70:	08015b84 	.word	0x08015b84

08009e74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009e7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ea8 <RCC_Delay+0x34>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a0a      	ldr	r2, [pc, #40]	; (8009eac <RCC_Delay+0x38>)
 8009e82:	fba2 2303 	umull	r2, r3, r2, r3
 8009e86:	0a5b      	lsrs	r3, r3, #9
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	fb02 f303 	mul.w	r3, r2, r3
 8009e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009e90:	bf00      	nop
  }
  while (Delay --);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	1e5a      	subs	r2, r3, #1
 8009e96:	60fa      	str	r2, [r7, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1f9      	bne.n	8009e90 <RCC_Delay+0x1c>
}
 8009e9c:	bf00      	nop
 8009e9e:	bf00      	nop
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bc80      	pop	{r7}
 8009ea6:	4770      	bx	lr
 8009ea8:	20000008 	.word	0x20000008
 8009eac:	10624dd3 	.word	0x10624dd3

08009eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e076      	b.n	8009fb0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d108      	bne.n	8009edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ed2:	d009      	beq.n	8009ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	61da      	str	r2, [r3, #28]
 8009eda:	e005      	b.n	8009ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d106      	bne.n	8009f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7fb fab2 	bl	800546c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009f30:	431a      	orrs	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	431a      	orrs	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	f003 0301 	and.w	r3, r3, #1
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f62:	431a      	orrs	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a1b      	ldr	r3, [r3, #32]
 8009f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f6c:	ea42 0103 	orr.w	r1, r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	0c1a      	lsrs	r2, r3, #16
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f002 0204 	and.w	r2, r2, #4
 8009f8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69da      	ldr	r2, [r3, #28]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d101      	bne.n	8009fda <HAL_SPI_Transmit+0x22>
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	e12d      	b.n	800a236 <HAL_SPI_Transmit+0x27e>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009fe2:	f7fb fdb5 	bl	8005b50 <HAL_GetTick>
 8009fe6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009fe8:	88fb      	ldrh	r3, [r7, #6]
 8009fea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d002      	beq.n	8009ffe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009ffc:	e116      	b.n	800a22c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <HAL_SPI_Transmit+0x52>
 800a004:	88fb      	ldrh	r3, [r7, #6]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d102      	bne.n	800a010 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a00e:	e10d      	b.n	800a22c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2203      	movs	r2, #3
 800a014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	88fa      	ldrh	r2, [r7, #6]
 800a028:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	88fa      	ldrh	r2, [r7, #6]
 800a02e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a056:	d10f      	bne.n	800a078 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a066:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a076:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a082:	2b40      	cmp	r3, #64	; 0x40
 800a084:	d007      	beq.n	800a096 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a09e:	d14f      	bne.n	800a140 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <HAL_SPI_Transmit+0xf6>
 800a0a8:	8afb      	ldrh	r3, [r7, #22]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d142      	bne.n	800a134 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b2:	881a      	ldrh	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0be:	1c9a      	adds	r2, r3, #2
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a0d2:	e02f      	b.n	800a134 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f003 0302 	and.w	r3, r3, #2
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d112      	bne.n	800a108 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e6:	881a      	ldrh	r2, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f2:	1c9a      	adds	r2, r3, #2
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	3b01      	subs	r3, #1
 800a100:	b29a      	uxth	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	86da      	strh	r2, [r3, #54]	; 0x36
 800a106:	e015      	b.n	800a134 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a108:	f7fb fd22 	bl	8005b50 <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	429a      	cmp	r2, r3
 800a116:	d803      	bhi.n	800a120 <HAL_SPI_Transmit+0x168>
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11e:	d102      	bne.n	800a126 <HAL_SPI_Transmit+0x16e>
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d106      	bne.n	800a134 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a132:	e07b      	b.n	800a22c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a138:	b29b      	uxth	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1ca      	bne.n	800a0d4 <HAL_SPI_Transmit+0x11c>
 800a13e:	e050      	b.n	800a1e2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <HAL_SPI_Transmit+0x196>
 800a148:	8afb      	ldrh	r3, [r7, #22]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d144      	bne.n	800a1d8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	330c      	adds	r3, #12
 800a158:	7812      	ldrb	r2, [r2, #0]
 800a15a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	3b01      	subs	r3, #1
 800a16e:	b29a      	uxth	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a174:	e030      	b.n	800a1d8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	f003 0302 	and.w	r3, r3, #2
 800a180:	2b02      	cmp	r3, #2
 800a182:	d113      	bne.n	800a1ac <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	330c      	adds	r3, #12
 800a18e:	7812      	ldrb	r2, [r2, #0]
 800a190:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	86da      	strh	r2, [r3, #54]	; 0x36
 800a1aa:	e015      	b.n	800a1d8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1ac:	f7fb fcd0 	bl	8005b50 <HAL_GetTick>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d803      	bhi.n	800a1c4 <HAL_SPI_Transmit+0x20c>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c2:	d102      	bne.n	800a1ca <HAL_SPI_Transmit+0x212>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d106      	bne.n	800a1d8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a1d6:	e029      	b.n	800a22c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1c9      	bne.n	800a176 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a1e2:	69ba      	ldr	r2, [r7, #24]
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 fa62 	bl	800a6b0 <SPI_EndRxTxTransaction>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a200:	2300      	movs	r3, #0
 800a202:	613b      	str	r3, [r7, #16]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	613b      	str	r3, [r7, #16]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	613b      	str	r3, [r7, #16]
 800a214:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d002      	beq.n	800a224 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	77fb      	strb	r3, [r7, #31]
 800a222:	e003      	b.n	800a22c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a234:	7ffb      	ldrb	r3, [r7, #31]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3720      	adds	r7, #32
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b08c      	sub	sp, #48	; 0x30
 800a242:	af00      	add	r7, sp, #0
 800a244:	60f8      	str	r0, [r7, #12]
 800a246:	60b9      	str	r1, [r7, #8]
 800a248:	607a      	str	r2, [r7, #4]
 800a24a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a24c:	2301      	movs	r3, #1
 800a24e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d101      	bne.n	800a264 <HAL_SPI_TransmitReceive+0x26>
 800a260:	2302      	movs	r3, #2
 800a262:	e198      	b.n	800a596 <HAL_SPI_TransmitReceive+0x358>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a26c:	f7fb fc70 	bl	8005b50 <HAL_GetTick>
 800a270:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a282:	887b      	ldrh	r3, [r7, #2]
 800a284:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a286:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d00f      	beq.n	800a2ae <HAL_SPI_TransmitReceive+0x70>
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a294:	d107      	bne.n	800a2a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d103      	bne.n	800a2a6 <HAL_SPI_TransmitReceive+0x68>
 800a29e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2a2:	2b04      	cmp	r3, #4
 800a2a4:	d003      	beq.n	800a2ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a2ac:	e16d      	b.n	800a58a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d005      	beq.n	800a2c0 <HAL_SPI_TransmitReceive+0x82>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d002      	beq.n	800a2c0 <HAL_SPI_TransmitReceive+0x82>
 800a2ba:	887b      	ldrh	r3, [r7, #2]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d103      	bne.n	800a2c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a2c6:	e160      	b.n	800a58a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b04      	cmp	r3, #4
 800a2d2:	d003      	beq.n	800a2dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2205      	movs	r2, #5
 800a2d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	887a      	ldrh	r2, [r7, #2]
 800a2ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	887a      	ldrh	r2, [r7, #2]
 800a2f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	887a      	ldrh	r2, [r7, #2]
 800a2fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	887a      	ldrh	r2, [r7, #2]
 800a304:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a31c:	2b40      	cmp	r3, #64	; 0x40
 800a31e:	d007      	beq.n	800a330 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a32e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a338:	d17c      	bne.n	800a434 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <HAL_SPI_TransmitReceive+0x10a>
 800a342:	8b7b      	ldrh	r3, [r7, #26]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d16a      	bne.n	800a41e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34c:	881a      	ldrh	r2, [r3, #0]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a358:	1c9a      	adds	r2, r3, #2
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a362:	b29b      	uxth	r3, r3
 800a364:	3b01      	subs	r3, #1
 800a366:	b29a      	uxth	r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a36c:	e057      	b.n	800a41e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f003 0302 	and.w	r3, r3, #2
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d11b      	bne.n	800a3b4 <HAL_SPI_TransmitReceive+0x176>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a380:	b29b      	uxth	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d016      	beq.n	800a3b4 <HAL_SPI_TransmitReceive+0x176>
 800a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d113      	bne.n	800a3b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a390:	881a      	ldrh	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a39c:	1c9a      	adds	r2, r3, #2
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d119      	bne.n	800a3f6 <HAL_SPI_TransmitReceive+0x1b8>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d014      	beq.n	800a3f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68da      	ldr	r2, [r3, #12]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d6:	b292      	uxth	r2, r2
 800a3d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3de:	1c9a      	adds	r2, r3, #2
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a3f6:	f7fb fbab 	bl	8005b50 <HAL_GetTick>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a402:	429a      	cmp	r2, r3
 800a404:	d80b      	bhi.n	800a41e <HAL_SPI_TransmitReceive+0x1e0>
 800a406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40c:	d007      	beq.n	800a41e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800a41c:	e0b5      	b.n	800a58a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a422:	b29b      	uxth	r3, r3
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1a2      	bne.n	800a36e <HAL_SPI_TransmitReceive+0x130>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d19d      	bne.n	800a36e <HAL_SPI_TransmitReceive+0x130>
 800a432:	e080      	b.n	800a536 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <HAL_SPI_TransmitReceive+0x204>
 800a43c:	8b7b      	ldrh	r3, [r7, #26]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d16f      	bne.n	800a522 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	330c      	adds	r3, #12
 800a44c:	7812      	ldrb	r2, [r2, #0]
 800a44e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a454:	1c5a      	adds	r2, r3, #1
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a45e:	b29b      	uxth	r3, r3
 800a460:	3b01      	subs	r3, #1
 800a462:	b29a      	uxth	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a468:	e05b      	b.n	800a522 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f003 0302 	and.w	r3, r3, #2
 800a474:	2b02      	cmp	r3, #2
 800a476:	d11c      	bne.n	800a4b2 <HAL_SPI_TransmitReceive+0x274>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d017      	beq.n	800a4b2 <HAL_SPI_TransmitReceive+0x274>
 800a482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a484:	2b01      	cmp	r3, #1
 800a486:	d114      	bne.n	800a4b2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	330c      	adds	r3, #12
 800a492:	7812      	ldrb	r2, [r2, #0]
 800a494:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49a:	1c5a      	adds	r2, r3, #1
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f003 0301 	and.w	r3, r3, #1
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d119      	bne.n	800a4f4 <HAL_SPI_TransmitReceive+0x2b6>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d014      	beq.n	800a4f4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68da      	ldr	r2, [r3, #12]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d4:	b2d2      	uxtb	r2, r2
 800a4d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4dc:	1c5a      	adds	r2, r3, #1
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a4f4:	f7fb fb2c 	bl	8005b50 <HAL_GetTick>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a500:	429a      	cmp	r2, r3
 800a502:	d803      	bhi.n	800a50c <HAL_SPI_TransmitReceive+0x2ce>
 800a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50a:	d102      	bne.n	800a512 <HAL_SPI_TransmitReceive+0x2d4>
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d107      	bne.n	800a522 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800a520:	e033      	b.n	800a58a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a526:	b29b      	uxth	r3, r3
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d19e      	bne.n	800a46a <HAL_SPI_TransmitReceive+0x22c>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a530:	b29b      	uxth	r3, r3
 800a532:	2b00      	cmp	r3, #0
 800a534:	d199      	bne.n	800a46a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a538:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f000 f8b8 	bl	800a6b0 <SPI_EndRxTxTransaction>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d006      	beq.n	800a554 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2220      	movs	r2, #32
 800a550:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a552:	e01a      	b.n	800a58a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10a      	bne.n	800a572 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a55c:	2300      	movs	r3, #0
 800a55e:	617b      	str	r3, [r7, #20]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	617b      	str	r3, [r7, #20]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	617b      	str	r3, [r7, #20]
 800a570:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a580:	e003      	b.n	800a58a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a592:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a596:	4618      	mov	r0, r3
 800a598:	3730      	adds	r7, #48	; 0x30
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
	...

0800a5a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b088      	sub	sp, #32
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a5b0:	f7fb face 	bl	8005b50 <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b8:	1a9b      	subs	r3, r3, r2
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	4413      	add	r3, r2
 800a5be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a5c0:	f7fb fac6 	bl	8005b50 <HAL_GetTick>
 800a5c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a5c6:	4b39      	ldr	r3, [pc, #228]	; (800a6ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	015b      	lsls	r3, r3, #5
 800a5cc:	0d1b      	lsrs	r3, r3, #20
 800a5ce:	69fa      	ldr	r2, [r7, #28]
 800a5d0:	fb02 f303 	mul.w	r3, r2, r3
 800a5d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5d6:	e054      	b.n	800a682 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5de:	d050      	beq.n	800a682 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5e0:	f7fb fab6 	bl	8005b50 <HAL_GetTick>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	69fa      	ldr	r2, [r7, #28]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d902      	bls.n	800a5f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d13d      	bne.n	800a672 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a604:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a60e:	d111      	bne.n	800a634 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a618:	d004      	beq.n	800a624 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a622:	d107      	bne.n	800a634 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a632:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a63c:	d10f      	bne.n	800a65e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a65c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e017      	b.n	800a6a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a678:	2300      	movs	r3, #0
 800a67a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	3b01      	subs	r3, #1
 800a680:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	689a      	ldr	r2, [r3, #8]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4013      	ands	r3, r2
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	429a      	cmp	r2, r3
 800a690:	bf0c      	ite	eq
 800a692:	2301      	moveq	r3, #1
 800a694:	2300      	movne	r3, #0
 800a696:	b2db      	uxtb	r3, r3
 800a698:	461a      	mov	r2, r3
 800a69a:	79fb      	ldrb	r3, [r7, #7]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d19b      	bne.n	800a5d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3720      	adds	r7, #32
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20000008 	.word	0x20000008

0800a6b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af02      	add	r7, sp, #8
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	2180      	movs	r1, #128	; 0x80
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f7ff ff6a 	bl	800a5a0 <SPI_WaitFlagStateUntilTimeout>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d007      	beq.n	800a6e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d6:	f043 0220 	orr.w	r2, r3, #32
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e000      	b.n	800a6e4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d101      	bne.n	800a6fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e041      	b.n	800a782 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d106      	bne.n	800a718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7fa fef4 	bl	8005500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2202      	movs	r2, #2
 800a71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	3304      	adds	r3, #4
 800a728:	4619      	mov	r1, r3
 800a72a:	4610      	mov	r0, r2
 800a72c:	f000 fd2e 	bl	800b18c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
	...

0800a78c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d001      	beq.n	800a7a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e032      	b.n	800a80a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a18      	ldr	r2, [pc, #96]	; (800a814 <HAL_TIM_Base_Start+0x88>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d00e      	beq.n	800a7d4 <HAL_TIM_Base_Start+0x48>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7be:	d009      	beq.n	800a7d4 <HAL_TIM_Base_Start+0x48>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a14      	ldr	r2, [pc, #80]	; (800a818 <HAL_TIM_Base_Start+0x8c>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d004      	beq.n	800a7d4 <HAL_TIM_Base_Start+0x48>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a13      	ldr	r2, [pc, #76]	; (800a81c <HAL_TIM_Base_Start+0x90>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d111      	bne.n	800a7f8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	f003 0307 	and.w	r3, r3, #7
 800a7de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b06      	cmp	r3, #6
 800a7e4:	d010      	beq.n	800a808 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f042 0201 	orr.w	r2, r2, #1
 800a7f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7f6:	e007      	b.n	800a808 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f042 0201 	orr.w	r2, r2, #1
 800a806:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3714      	adds	r7, #20
 800a80e:	46bd      	mov	sp, r7
 800a810:	bc80      	pop	{r7}
 800a812:	4770      	bx	lr
 800a814:	40012c00 	.word	0x40012c00
 800a818:	40000400 	.word	0x40000400
 800a81c:	40000800 	.word	0x40000800

0800a820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b01      	cmp	r3, #1
 800a832:	d001      	beq.n	800a838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e03a      	b.n	800a8ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2202      	movs	r2, #2
 800a83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68da      	ldr	r2, [r3, #12]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f042 0201 	orr.w	r2, r2, #1
 800a84e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a18      	ldr	r2, [pc, #96]	; (800a8b8 <HAL_TIM_Base_Start_IT+0x98>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d00e      	beq.n	800a878 <HAL_TIM_Base_Start_IT+0x58>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a862:	d009      	beq.n	800a878 <HAL_TIM_Base_Start_IT+0x58>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a14      	ldr	r2, [pc, #80]	; (800a8bc <HAL_TIM_Base_Start_IT+0x9c>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d004      	beq.n	800a878 <HAL_TIM_Base_Start_IT+0x58>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a13      	ldr	r2, [pc, #76]	; (800a8c0 <HAL_TIM_Base_Start_IT+0xa0>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d111      	bne.n	800a89c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	f003 0307 	and.w	r3, r3, #7
 800a882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b06      	cmp	r3, #6
 800a888:	d010      	beq.n	800a8ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f042 0201 	orr.w	r2, r2, #1
 800a898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a89a:	e007      	b.n	800a8ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f042 0201 	orr.w	r2, r2, #1
 800a8aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bc80      	pop	{r7}
 800a8b6:	4770      	bx	lr
 800a8b8:	40012c00 	.word	0x40012c00
 800a8bc:	40000400 	.word	0x40000400
 800a8c0:	40000800 	.word	0x40000800

0800a8c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e041      	b.n	800a95a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d106      	bne.n	800a8f0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f839 	bl	800a962 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3304      	adds	r3, #4
 800a900:	4619      	mov	r1, r3
 800a902:	4610      	mov	r0, r2
 800a904:	f000 fc42 	bl	800b18c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a962:	b480      	push	{r7}
 800a964:	b083      	sub	sp, #12
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a96a:	bf00      	nop
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	bc80      	pop	{r7}
 800a972:	4770      	bx	lr

0800a974 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d101      	bne.n	800a986 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	e041      	b.n	800aa0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d106      	bne.n	800a9a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f839 	bl	800aa12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	f000 fbea 	bl	800b18c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b083      	sub	sp, #12
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa1a:	bf00      	nop
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bc80      	pop	{r7}
 800aa22:	4770      	bx	lr

0800aa24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d109      	bne.n	800aa48 <HAL_TIM_PWM_Start+0x24>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	bf14      	ite	ne
 800aa40:	2301      	movne	r3, #1
 800aa42:	2300      	moveq	r3, #0
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	e022      	b.n	800aa8e <HAL_TIM_PWM_Start+0x6a>
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	2b04      	cmp	r3, #4
 800aa4c:	d109      	bne.n	800aa62 <HAL_TIM_PWM_Start+0x3e>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	bf14      	ite	ne
 800aa5a:	2301      	movne	r3, #1
 800aa5c:	2300      	moveq	r3, #0
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	e015      	b.n	800aa8e <HAL_TIM_PWM_Start+0x6a>
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2b08      	cmp	r3, #8
 800aa66:	d109      	bne.n	800aa7c <HAL_TIM_PWM_Start+0x58>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	bf14      	ite	ne
 800aa74:	2301      	movne	r3, #1
 800aa76:	2300      	moveq	r3, #0
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	e008      	b.n	800aa8e <HAL_TIM_PWM_Start+0x6a>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	bf14      	ite	ne
 800aa88:	2301      	movne	r3, #1
 800aa8a:	2300      	moveq	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e05e      	b.n	800ab54 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d104      	bne.n	800aaa6 <HAL_TIM_PWM_Start+0x82>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aaa4:	e013      	b.n	800aace <HAL_TIM_PWM_Start+0xaa>
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b04      	cmp	r3, #4
 800aaaa:	d104      	bne.n	800aab6 <HAL_TIM_PWM_Start+0x92>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2202      	movs	r2, #2
 800aab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aab4:	e00b      	b.n	800aace <HAL_TIM_PWM_Start+0xaa>
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	2b08      	cmp	r3, #8
 800aaba:	d104      	bne.n	800aac6 <HAL_TIM_PWM_Start+0xa2>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2202      	movs	r2, #2
 800aac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aac4:	e003      	b.n	800aace <HAL_TIM_PWM_Start+0xaa>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2202      	movs	r2, #2
 800aaca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2201      	movs	r2, #1
 800aad4:	6839      	ldr	r1, [r7, #0]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 fdd8 	bl	800b68c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a1e      	ldr	r2, [pc, #120]	; (800ab5c <HAL_TIM_PWM_Start+0x138>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d107      	bne.n	800aaf6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aaf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a18      	ldr	r2, [pc, #96]	; (800ab5c <HAL_TIM_PWM_Start+0x138>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d00e      	beq.n	800ab1e <HAL_TIM_PWM_Start+0xfa>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab08:	d009      	beq.n	800ab1e <HAL_TIM_PWM_Start+0xfa>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a14      	ldr	r2, [pc, #80]	; (800ab60 <HAL_TIM_PWM_Start+0x13c>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d004      	beq.n	800ab1e <HAL_TIM_PWM_Start+0xfa>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a12      	ldr	r2, [pc, #72]	; (800ab64 <HAL_TIM_PWM_Start+0x140>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d111      	bne.n	800ab42 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	f003 0307 	and.w	r3, r3, #7
 800ab28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b06      	cmp	r3, #6
 800ab2e:	d010      	beq.n	800ab52 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f042 0201 	orr.w	r2, r2, #1
 800ab3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab40:	e007      	b.n	800ab52 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f042 0201 	orr.w	r2, r2, #1
 800ab50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	40012c00 	.word	0x40012c00
 800ab60:	40000400 	.word	0x40000400
 800ab64:	40000800 	.word	0x40000800

0800ab68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	f003 0302 	and.w	r3, r3, #2
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d122      	bne.n	800abc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	f003 0302 	and.w	r3, r3, #2
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d11b      	bne.n	800abc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f06f 0202 	mvn.w	r2, #2
 800ab94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	f003 0303 	and.w	r3, r3, #3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fad2 	bl	800b154 <HAL_TIM_IC_CaptureCallback>
 800abb0:	e005      	b.n	800abbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fac5 	bl	800b142 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fad4 	bl	800b166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	f003 0304 	and.w	r3, r3, #4
 800abce:	2b04      	cmp	r3, #4
 800abd0:	d122      	bne.n	800ac18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	f003 0304 	and.w	r3, r3, #4
 800abdc:	2b04      	cmp	r3, #4
 800abde:	d11b      	bne.n	800ac18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f06f 0204 	mvn.w	r2, #4
 800abe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2202      	movs	r2, #2
 800abee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d003      	beq.n	800ac06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 faa8 	bl	800b154 <HAL_TIM_IC_CaptureCallback>
 800ac04:	e005      	b.n	800ac12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fa9b 	bl	800b142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 faaa 	bl	800b166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	f003 0308 	and.w	r3, r3, #8
 800ac22:	2b08      	cmp	r3, #8
 800ac24:	d122      	bne.n	800ac6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f003 0308 	and.w	r3, r3, #8
 800ac30:	2b08      	cmp	r3, #8
 800ac32:	d11b      	bne.n	800ac6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f06f 0208 	mvn.w	r2, #8
 800ac3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2204      	movs	r2, #4
 800ac42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	69db      	ldr	r3, [r3, #28]
 800ac4a:	f003 0303 	and.w	r3, r3, #3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fa7e 	bl	800b154 <HAL_TIM_IC_CaptureCallback>
 800ac58:	e005      	b.n	800ac66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fa71 	bl	800b142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fa80 	bl	800b166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	f003 0310 	and.w	r3, r3, #16
 800ac76:	2b10      	cmp	r3, #16
 800ac78:	d122      	bne.n	800acc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	f003 0310 	and.w	r3, r3, #16
 800ac84:	2b10      	cmp	r3, #16
 800ac86:	d11b      	bne.n	800acc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f06f 0210 	mvn.w	r2, #16
 800ac90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2208      	movs	r2, #8
 800ac96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	69db      	ldr	r3, [r3, #28]
 800ac9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fa54 	bl	800b154 <HAL_TIM_IC_CaptureCallback>
 800acac:	e005      	b.n	800acba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fa47 	bl	800b142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fa56 	bl	800b166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	2b01      	cmp	r3, #1
 800accc:	d10e      	bne.n	800acec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d107      	bne.n	800acec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f06f 0201 	mvn.w	r2, #1
 800ace4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7f9 fc1e 	bl	8004528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf6:	2b80      	cmp	r3, #128	; 0x80
 800acf8:	d10e      	bne.n	800ad18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad04:	2b80      	cmp	r3, #128	; 0x80
 800ad06:	d107      	bne.n	800ad18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fd45 	bl	800b7a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad22:	2b40      	cmp	r3, #64	; 0x40
 800ad24:	d10e      	bne.n	800ad44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad30:	2b40      	cmp	r3, #64	; 0x40
 800ad32:	d107      	bne.n	800ad44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fa1a 	bl	800b178 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	f003 0320 	and.w	r3, r3, #32
 800ad4e:	2b20      	cmp	r3, #32
 800ad50:	d10e      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f003 0320 	and.w	r3, r3, #32
 800ad5c:	2b20      	cmp	r3, #32
 800ad5e:	d107      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f06f 0220 	mvn.w	r2, #32
 800ad68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fd10 	bl	800b790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad84:	2300      	movs	r3, #0
 800ad86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d101      	bne.n	800ad96 <HAL_TIM_OC_ConfigChannel+0x1e>
 800ad92:	2302      	movs	r3, #2
 800ad94:	e048      	b.n	800ae28 <HAL_TIM_OC_ConfigChannel+0xb0>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2b0c      	cmp	r3, #12
 800ada2:	d839      	bhi.n	800ae18 <HAL_TIM_OC_ConfigChannel+0xa0>
 800ada4:	a201      	add	r2, pc, #4	; (adr r2, 800adac <HAL_TIM_OC_ConfigChannel+0x34>)
 800ada6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adaa:	bf00      	nop
 800adac:	0800ade1 	.word	0x0800ade1
 800adb0:	0800ae19 	.word	0x0800ae19
 800adb4:	0800ae19 	.word	0x0800ae19
 800adb8:	0800ae19 	.word	0x0800ae19
 800adbc:	0800adef 	.word	0x0800adef
 800adc0:	0800ae19 	.word	0x0800ae19
 800adc4:	0800ae19 	.word	0x0800ae19
 800adc8:	0800ae19 	.word	0x0800ae19
 800adcc:	0800adfd 	.word	0x0800adfd
 800add0:	0800ae19 	.word	0x0800ae19
 800add4:	0800ae19 	.word	0x0800ae19
 800add8:	0800ae19 	.word	0x0800ae19
 800addc:	0800ae0b 	.word	0x0800ae0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68b9      	ldr	r1, [r7, #8]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 fa32 	bl	800b250 <TIM_OC1_SetConfig>
      break;
 800adec:	e017      	b.n	800ae1e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68b9      	ldr	r1, [r7, #8]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 fa91 	bl	800b31c <TIM_OC2_SetConfig>
      break;
 800adfa:	e010      	b.n	800ae1e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68b9      	ldr	r1, [r7, #8]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 faf4 	bl	800b3f0 <TIM_OC3_SetConfig>
      break;
 800ae08:	e009      	b.n	800ae1e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68b9      	ldr	r1, [r7, #8]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 fb57 	bl	800b4c4 <TIM_OC4_SetConfig>
      break;
 800ae16:	e002      	b.n	800ae1e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	75fb      	strb	r3, [r7, #23]
      break;
 800ae1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d101      	bne.n	800ae4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	e0ae      	b.n	800afac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2201      	movs	r2, #1
 800ae52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2b0c      	cmp	r3, #12
 800ae5a:	f200 809f 	bhi.w	800af9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ae5e:	a201      	add	r2, pc, #4	; (adr r2, 800ae64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae64:	0800ae99 	.word	0x0800ae99
 800ae68:	0800af9d 	.word	0x0800af9d
 800ae6c:	0800af9d 	.word	0x0800af9d
 800ae70:	0800af9d 	.word	0x0800af9d
 800ae74:	0800aed9 	.word	0x0800aed9
 800ae78:	0800af9d 	.word	0x0800af9d
 800ae7c:	0800af9d 	.word	0x0800af9d
 800ae80:	0800af9d 	.word	0x0800af9d
 800ae84:	0800af1b 	.word	0x0800af1b
 800ae88:	0800af9d 	.word	0x0800af9d
 800ae8c:	0800af9d 	.word	0x0800af9d
 800ae90:	0800af9d 	.word	0x0800af9d
 800ae94:	0800af5b 	.word	0x0800af5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68b9      	ldr	r1, [r7, #8]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 f9d6 	bl	800b250 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	699a      	ldr	r2, [r3, #24]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f042 0208 	orr.w	r2, r2, #8
 800aeb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	699a      	ldr	r2, [r3, #24]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f022 0204 	bic.w	r2, r2, #4
 800aec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6999      	ldr	r1, [r3, #24]
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	691a      	ldr	r2, [r3, #16]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	430a      	orrs	r2, r1
 800aed4:	619a      	str	r2, [r3, #24]
      break;
 800aed6:	e064      	b.n	800afa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68b9      	ldr	r1, [r7, #8]
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 fa1c 	bl	800b31c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	699a      	ldr	r2, [r3, #24]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	699a      	ldr	r2, [r3, #24]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6999      	ldr	r1, [r3, #24]
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	021a      	lsls	r2, r3, #8
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	430a      	orrs	r2, r1
 800af16:	619a      	str	r2, [r3, #24]
      break;
 800af18:	e043      	b.n	800afa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68b9      	ldr	r1, [r7, #8]
 800af20:	4618      	mov	r0, r3
 800af22:	f000 fa65 	bl	800b3f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	69da      	ldr	r2, [r3, #28]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f042 0208 	orr.w	r2, r2, #8
 800af34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	69da      	ldr	r2, [r3, #28]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f022 0204 	bic.w	r2, r2, #4
 800af44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	69d9      	ldr	r1, [r3, #28]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	691a      	ldr	r2, [r3, #16]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	430a      	orrs	r2, r1
 800af56:	61da      	str	r2, [r3, #28]
      break;
 800af58:	e023      	b.n	800afa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68b9      	ldr	r1, [r7, #8]
 800af60:	4618      	mov	r0, r3
 800af62:	f000 faaf 	bl	800b4c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	69da      	ldr	r2, [r3, #28]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	69da      	ldr	r2, [r3, #28]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	69d9      	ldr	r1, [r3, #28]
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	021a      	lsls	r2, r3, #8
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	430a      	orrs	r2, r1
 800af98:	61da      	str	r2, [r3, #28]
      break;
 800af9a:	e002      	b.n	800afa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	75fb      	strb	r3, [r7, #23]
      break;
 800afa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800afaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d101      	bne.n	800afd0 <HAL_TIM_ConfigClockSource+0x1c>
 800afcc:	2302      	movs	r3, #2
 800afce:	e0b4      	b.n	800b13a <HAL_TIM_ConfigClockSource+0x186>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2202      	movs	r2, #2
 800afdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800afee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b008:	d03e      	beq.n	800b088 <HAL_TIM_ConfigClockSource+0xd4>
 800b00a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b00e:	f200 8087 	bhi.w	800b120 <HAL_TIM_ConfigClockSource+0x16c>
 800b012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b016:	f000 8086 	beq.w	800b126 <HAL_TIM_ConfigClockSource+0x172>
 800b01a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b01e:	d87f      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x16c>
 800b020:	2b70      	cmp	r3, #112	; 0x70
 800b022:	d01a      	beq.n	800b05a <HAL_TIM_ConfigClockSource+0xa6>
 800b024:	2b70      	cmp	r3, #112	; 0x70
 800b026:	d87b      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x16c>
 800b028:	2b60      	cmp	r3, #96	; 0x60
 800b02a:	d050      	beq.n	800b0ce <HAL_TIM_ConfigClockSource+0x11a>
 800b02c:	2b60      	cmp	r3, #96	; 0x60
 800b02e:	d877      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x16c>
 800b030:	2b50      	cmp	r3, #80	; 0x50
 800b032:	d03c      	beq.n	800b0ae <HAL_TIM_ConfigClockSource+0xfa>
 800b034:	2b50      	cmp	r3, #80	; 0x50
 800b036:	d873      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x16c>
 800b038:	2b40      	cmp	r3, #64	; 0x40
 800b03a:	d058      	beq.n	800b0ee <HAL_TIM_ConfigClockSource+0x13a>
 800b03c:	2b40      	cmp	r3, #64	; 0x40
 800b03e:	d86f      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x16c>
 800b040:	2b30      	cmp	r3, #48	; 0x30
 800b042:	d064      	beq.n	800b10e <HAL_TIM_ConfigClockSource+0x15a>
 800b044:	2b30      	cmp	r3, #48	; 0x30
 800b046:	d86b      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x16c>
 800b048:	2b20      	cmp	r3, #32
 800b04a:	d060      	beq.n	800b10e <HAL_TIM_ConfigClockSource+0x15a>
 800b04c:	2b20      	cmp	r3, #32
 800b04e:	d867      	bhi.n	800b120 <HAL_TIM_ConfigClockSource+0x16c>
 800b050:	2b00      	cmp	r3, #0
 800b052:	d05c      	beq.n	800b10e <HAL_TIM_ConfigClockSource+0x15a>
 800b054:	2b10      	cmp	r3, #16
 800b056:	d05a      	beq.n	800b10e <HAL_TIM_ConfigClockSource+0x15a>
 800b058:	e062      	b.n	800b120 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b06a:	f000 faf0 	bl	800b64e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b07c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	609a      	str	r2, [r3, #8]
      break;
 800b086:	e04f      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b098:	f000 fad9 	bl	800b64e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	689a      	ldr	r2, [r3, #8]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b0aa:	609a      	str	r2, [r3, #8]
      break;
 800b0ac:	e03c      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	f000 fa50 	bl	800b560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2150      	movs	r1, #80	; 0x50
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f000 faa7 	bl	800b61a <TIM_ITRx_SetConfig>
      break;
 800b0cc:	e02c      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0da:	461a      	mov	r2, r3
 800b0dc:	f000 fa6e 	bl	800b5bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2160      	movs	r1, #96	; 0x60
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fa97 	bl	800b61a <TIM_ITRx_SetConfig>
      break;
 800b0ec:	e01c      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	f000 fa30 	bl	800b560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2140      	movs	r1, #64	; 0x40
 800b106:	4618      	mov	r0, r3
 800b108:	f000 fa87 	bl	800b61a <TIM_ITRx_SetConfig>
      break;
 800b10c:	e00c      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4619      	mov	r1, r3
 800b118:	4610      	mov	r0, r2
 800b11a:	f000 fa7e 	bl	800b61a <TIM_ITRx_SetConfig>
      break;
 800b11e:	e003      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	73fb      	strb	r3, [r7, #15]
      break;
 800b124:	e000      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b138:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b142:	b480      	push	{r7}
 800b144:	b083      	sub	sp, #12
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b14a:	bf00      	nop
 800b14c:	370c      	adds	r7, #12
 800b14e:	46bd      	mov	sp, r7
 800b150:	bc80      	pop	{r7}
 800b152:	4770      	bx	lr

0800b154 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b15c:	bf00      	nop
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	bc80      	pop	{r7}
 800b164:	4770      	bx	lr

0800b166 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b16e:	bf00      	nop
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	bc80      	pop	{r7}
 800b176:	4770      	bx	lr

0800b178 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	bc80      	pop	{r7}
 800b188:	4770      	bx	lr
	...

0800b18c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a29      	ldr	r2, [pc, #164]	; (800b244 <TIM_Base_SetConfig+0xb8>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d00b      	beq.n	800b1bc <TIM_Base_SetConfig+0x30>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1aa:	d007      	beq.n	800b1bc <TIM_Base_SetConfig+0x30>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a26      	ldr	r2, [pc, #152]	; (800b248 <TIM_Base_SetConfig+0xbc>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d003      	beq.n	800b1bc <TIM_Base_SetConfig+0x30>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a25      	ldr	r2, [pc, #148]	; (800b24c <TIM_Base_SetConfig+0xc0>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d108      	bne.n	800b1ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a1c      	ldr	r2, [pc, #112]	; (800b244 <TIM_Base_SetConfig+0xb8>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d00b      	beq.n	800b1ee <TIM_Base_SetConfig+0x62>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1dc:	d007      	beq.n	800b1ee <TIM_Base_SetConfig+0x62>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a19      	ldr	r2, [pc, #100]	; (800b248 <TIM_Base_SetConfig+0xbc>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d003      	beq.n	800b1ee <TIM_Base_SetConfig+0x62>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4a18      	ldr	r2, [pc, #96]	; (800b24c <TIM_Base_SetConfig+0xc0>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d108      	bne.n	800b200 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	689a      	ldr	r2, [r3, #8]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a07      	ldr	r2, [pc, #28]	; (800b244 <TIM_Base_SetConfig+0xb8>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d103      	bne.n	800b234 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	691a      	ldr	r2, [r3, #16]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	615a      	str	r2, [r3, #20]
}
 800b23a:	bf00      	nop
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	bc80      	pop	{r7}
 800b242:	4770      	bx	lr
 800b244:	40012c00 	.word	0x40012c00
 800b248:	40000400 	.word	0x40000400
 800b24c:	40000800 	.word	0x40000800

0800b250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b250:	b480      	push	{r7}
 800b252:	b087      	sub	sp, #28
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a1b      	ldr	r3, [r3, #32]
 800b264:	f023 0201 	bic.w	r2, r3, #1
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f023 0303 	bic.w	r3, r3, #3
 800b286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	4313      	orrs	r3, r2
 800b290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f023 0302 	bic.w	r3, r3, #2
 800b298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a1c      	ldr	r2, [pc, #112]	; (800b318 <TIM_OC1_SetConfig+0xc8>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d10c      	bne.n	800b2c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	f023 0308 	bic.w	r3, r3, #8
 800b2b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	f023 0304 	bic.w	r3, r3, #4
 800b2c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a13      	ldr	r2, [pc, #76]	; (800b318 <TIM_OC1_SetConfig+0xc8>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d111      	bne.n	800b2f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	693a      	ldr	r2, [r7, #16]
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	685a      	ldr	r2, [r3, #4]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	697a      	ldr	r2, [r7, #20]
 800b30a:	621a      	str	r2, [r3, #32]
}
 800b30c:	bf00      	nop
 800b30e:	371c      	adds	r7, #28
 800b310:	46bd      	mov	sp, r7
 800b312:	bc80      	pop	{r7}
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	40012c00 	.word	0x40012c00

0800b31c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b087      	sub	sp, #28
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a1b      	ldr	r3, [r3, #32]
 800b32a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a1b      	ldr	r3, [r3, #32]
 800b330:	f023 0210 	bic.w	r2, r3, #16
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	021b      	lsls	r3, r3, #8
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	f023 0320 	bic.w	r3, r3, #32
 800b366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	011b      	lsls	r3, r3, #4
 800b36e:	697a      	ldr	r2, [r7, #20]
 800b370:	4313      	orrs	r3, r2
 800b372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a1d      	ldr	r2, [pc, #116]	; (800b3ec <TIM_OC2_SetConfig+0xd0>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d10d      	bne.n	800b398 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	011b      	lsls	r3, r3, #4
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b396:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a14      	ldr	r2, [pc, #80]	; (800b3ec <TIM_OC2_SetConfig+0xd0>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d113      	bne.n	800b3c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	695b      	ldr	r3, [r3, #20]
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	699b      	ldr	r3, [r3, #24]
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	693a      	ldr	r2, [r7, #16]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	685a      	ldr	r2, [r3, #4]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	621a      	str	r2, [r3, #32]
}
 800b3e2:	bf00      	nop
 800b3e4:	371c      	adds	r7, #28
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bc80      	pop	{r7}
 800b3ea:	4770      	bx	lr
 800b3ec:	40012c00 	.word	0x40012c00

0800b3f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a1b      	ldr	r3, [r3, #32]
 800b404:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	69db      	ldr	r3, [r3, #28]
 800b416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b41e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f023 0303 	bic.w	r3, r3, #3
 800b426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	4313      	orrs	r3, r2
 800b430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	021b      	lsls	r3, r3, #8
 800b440:	697a      	ldr	r2, [r7, #20]
 800b442:	4313      	orrs	r3, r2
 800b444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a1d      	ldr	r2, [pc, #116]	; (800b4c0 <TIM_OC3_SetConfig+0xd0>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d10d      	bne.n	800b46a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	021b      	lsls	r3, r3, #8
 800b45c:	697a      	ldr	r2, [r7, #20]
 800b45e:	4313      	orrs	r3, r2
 800b460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a14      	ldr	r2, [pc, #80]	; (800b4c0 <TIM_OC3_SetConfig+0xd0>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d113      	bne.n	800b49a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	011b      	lsls	r3, r3, #4
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	011b      	lsls	r3, r3, #4
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	4313      	orrs	r3, r2
 800b498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	685a      	ldr	r2, [r3, #4]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	621a      	str	r2, [r3, #32]
}
 800b4b4:	bf00      	nop
 800b4b6:	371c      	adds	r7, #28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bc80      	pop	{r7}
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	40012c00 	.word	0x40012c00

0800b4c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a1b      	ldr	r3, [r3, #32]
 800b4d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	69db      	ldr	r3, [r3, #28]
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	021b      	lsls	r3, r3, #8
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	4313      	orrs	r3, r2
 800b506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b50e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	031b      	lsls	r3, r3, #12
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	4313      	orrs	r3, r2
 800b51a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4a0f      	ldr	r2, [pc, #60]	; (800b55c <TIM_OC4_SetConfig+0x98>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d109      	bne.n	800b538 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b52a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	695b      	ldr	r3, [r3, #20]
 800b530:	019b      	lsls	r3, r3, #6
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	4313      	orrs	r3, r2
 800b536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	697a      	ldr	r2, [r7, #20]
 800b53c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	685a      	ldr	r2, [r3, #4]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	621a      	str	r2, [r3, #32]
}
 800b552:	bf00      	nop
 800b554:	371c      	adds	r7, #28
 800b556:	46bd      	mov	sp, r7
 800b558:	bc80      	pop	{r7}
 800b55a:	4770      	bx	lr
 800b55c:	40012c00 	.word	0x40012c00

0800b560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6a1b      	ldr	r3, [r3, #32]
 800b570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	f023 0201 	bic.w	r2, r3, #1
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b58a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	011b      	lsls	r3, r3, #4
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	4313      	orrs	r3, r2
 800b594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f023 030a 	bic.w	r3, r3, #10
 800b59c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	693a      	ldr	r2, [r7, #16]
 800b5aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	621a      	str	r2, [r3, #32]
}
 800b5b2:	bf00      	nop
 800b5b4:	371c      	adds	r7, #28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bc80      	pop	{r7}
 800b5ba:	4770      	bx	lr

0800b5bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6a1b      	ldr	r3, [r3, #32]
 800b5cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6a1b      	ldr	r3, [r3, #32]
 800b5d2:	f023 0210 	bic.w	r2, r3, #16
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	699b      	ldr	r3, [r3, #24]
 800b5de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b5e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	031b      	lsls	r3, r3, #12
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b5f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	011b      	lsls	r3, r3, #4
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	4313      	orrs	r3, r2
 800b602:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	697a      	ldr	r2, [r7, #20]
 800b60e:	621a      	str	r2, [r3, #32]
}
 800b610:	bf00      	nop
 800b612:	371c      	adds	r7, #28
 800b614:	46bd      	mov	sp, r7
 800b616:	bc80      	pop	{r7}
 800b618:	4770      	bx	lr

0800b61a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b085      	sub	sp, #20
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	4313      	orrs	r3, r2
 800b638:	f043 0307 	orr.w	r3, r3, #7
 800b63c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	609a      	str	r2, [r3, #8]
}
 800b644:	bf00      	nop
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	bc80      	pop	{r7}
 800b64c:	4770      	bx	lr

0800b64e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b64e:	b480      	push	{r7}
 800b650:	b087      	sub	sp, #28
 800b652:	af00      	add	r7, sp, #0
 800b654:	60f8      	str	r0, [r7, #12]
 800b656:	60b9      	str	r1, [r7, #8]
 800b658:	607a      	str	r2, [r7, #4]
 800b65a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b668:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	021a      	lsls	r2, r3, #8
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	431a      	orrs	r2, r3
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	4313      	orrs	r3, r2
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	4313      	orrs	r3, r2
 800b67a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	609a      	str	r2, [r3, #8]
}
 800b682:	bf00      	nop
 800b684:	371c      	adds	r7, #28
 800b686:	46bd      	mov	sp, r7
 800b688:	bc80      	pop	{r7}
 800b68a:	4770      	bx	lr

0800b68c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b087      	sub	sp, #28
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	f003 031f 	and.w	r3, r3, #31
 800b69e:	2201      	movs	r2, #1
 800b6a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6a1a      	ldr	r2, [r3, #32]
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	43db      	mvns	r3, r3
 800b6ae:	401a      	ands	r2, r3
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6a1a      	ldr	r2, [r3, #32]
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	f003 031f 	and.w	r3, r3, #31
 800b6be:	6879      	ldr	r1, [r7, #4]
 800b6c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b6c4:	431a      	orrs	r2, r3
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	621a      	str	r2, [r3, #32]
}
 800b6ca:	bf00      	nop
 800b6cc:	371c      	adds	r7, #28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bc80      	pop	{r7}
 800b6d2:	4770      	bx	lr

0800b6d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d101      	bne.n	800b6ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	e046      	b.n	800b77a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a16      	ldr	r2, [pc, #88]	; (800b784 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d00e      	beq.n	800b74e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b738:	d009      	beq.n	800b74e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a12      	ldr	r2, [pc, #72]	; (800b788 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d004      	beq.n	800b74e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a10      	ldr	r2, [pc, #64]	; (800b78c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d10c      	bne.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	68ba      	ldr	r2, [r7, #8]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2201      	movs	r2, #1
 800b76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	bc80      	pop	{r7}
 800b782:	4770      	bx	lr
 800b784:	40012c00 	.word	0x40012c00
 800b788:	40000400 	.word	0x40000400
 800b78c:	40000800 	.word	0x40000800

0800b790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b798:	bf00      	nop
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bc80      	pop	{r7}
 800b7a0:	4770      	bx	lr

0800b7a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b083      	sub	sp, #12
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7aa:	bf00      	nop
 800b7ac:	370c      	adds	r7, #12
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bc80      	pop	{r7}
 800b7b2:	4770      	bx	lr

0800b7b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d101      	bne.n	800b7c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e042      	b.n	800b84c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d106      	bne.n	800b7e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7f9 ff36 	bl	800564c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2224      	movs	r2, #36	; 0x24
 800b7e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68da      	ldr	r2, [r3, #12]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 fd71 	bl	800c2e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	691a      	ldr	r2, [r3, #16]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b80c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	695a      	ldr	r2, [r3, #20]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b81c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68da      	ldr	r2, [r3, #12]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b82c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2220      	movs	r2, #32
 800b838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2220      	movs	r2, #32
 800b840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	; 0x28
 800b858:	af02      	add	r7, sp, #8
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	603b      	str	r3, [r7, #0]
 800b860:	4613      	mov	r3, r2
 800b862:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	2b20      	cmp	r3, #32
 800b872:	d16d      	bne.n	800b950 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d002      	beq.n	800b880 <HAL_UART_Transmit+0x2c>
 800b87a:	88fb      	ldrh	r3, [r7, #6]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e066      	b.n	800b952 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2200      	movs	r2, #0
 800b888:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2221      	movs	r2, #33	; 0x21
 800b88e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b892:	f7fa f95d 	bl	8005b50 <HAL_GetTick>
 800b896:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	88fa      	ldrh	r2, [r7, #6]
 800b89c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	88fa      	ldrh	r2, [r7, #6]
 800b8a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8ac:	d108      	bne.n	800b8c0 <HAL_UART_Transmit+0x6c>
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d104      	bne.n	800b8c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	61bb      	str	r3, [r7, #24]
 800b8be:	e003      	b.n	800b8c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b8c8:	e02a      	b.n	800b920 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	2180      	movs	r1, #128	; 0x80
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 faf9 	bl	800becc <UART_WaitOnFlagUntilTimeout>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d001      	beq.n	800b8e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e036      	b.n	800b952 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10b      	bne.n	800b902 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	881b      	ldrh	r3, [r3, #0]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	3302      	adds	r3, #2
 800b8fe:	61bb      	str	r3, [r7, #24]
 800b900:	e007      	b.n	800b912 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	781a      	ldrb	r2, [r3, #0]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	3301      	adds	r3, #1
 800b910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b916:	b29b      	uxth	r3, r3
 800b918:	3b01      	subs	r3, #1
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b924:	b29b      	uxth	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1cf      	bne.n	800b8ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2200      	movs	r2, #0
 800b932:	2140      	movs	r1, #64	; 0x40
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f000 fac9 	bl	800becc <UART_WaitOnFlagUntilTimeout>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800b940:	2303      	movs	r3, #3
 800b942:	e006      	b.n	800b952 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2220      	movs	r2, #32
 800b948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	e000      	b.n	800b952 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b950:	2302      	movs	r3, #2
  }
}
 800b952:	4618      	mov	r0, r3
 800b954:	3720      	adds	r7, #32
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
	...

0800b95c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b0ba      	sub	sp, #232	; 0xe8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b982:	2300      	movs	r3, #0
 800b984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b988:	2300      	movs	r3, #0
 800b98a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b992:	f003 030f 	and.w	r3, r3, #15
 800b996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b99a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d10f      	bne.n	800b9c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9a6:	f003 0320 	and.w	r3, r3, #32
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d009      	beq.n	800b9c2 <HAL_UART_IRQHandler+0x66>
 800b9ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9b2:	f003 0320 	and.w	r3, r3, #32
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d003      	beq.n	800b9c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fbd1 	bl	800c162 <UART_Receive_IT>
      return;
 800b9c0:	e25b      	b.n	800be7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b9c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 80de 	beq.w	800bb88 <HAL_UART_IRQHandler+0x22c>
 800b9cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9d0:	f003 0301 	and.w	r3, r3, #1
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d106      	bne.n	800b9e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b9d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 80d1 	beq.w	800bb88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9ea:	f003 0301 	and.w	r3, r3, #1
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00b      	beq.n	800ba0a <HAL_UART_IRQHandler+0xae>
 800b9f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d005      	beq.n	800ba0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba02:	f043 0201 	orr.w	r2, r3, #1
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba0e:	f003 0304 	and.w	r3, r3, #4
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00b      	beq.n	800ba2e <HAL_UART_IRQHandler+0xd2>
 800ba16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d005      	beq.n	800ba2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba26:	f043 0202 	orr.w	r2, r3, #2
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba32:	f003 0302 	and.w	r3, r3, #2
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00b      	beq.n	800ba52 <HAL_UART_IRQHandler+0xf6>
 800ba3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d005      	beq.n	800ba52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba4a:	f043 0204 	orr.w	r2, r3, #4
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba56:	f003 0308 	and.w	r3, r3, #8
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d011      	beq.n	800ba82 <HAL_UART_IRQHandler+0x126>
 800ba5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba62:	f003 0320 	and.w	r3, r3, #32
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d105      	bne.n	800ba76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d005      	beq.n	800ba82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba7a:	f043 0208 	orr.w	r2, r3, #8
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f000 81f2 	beq.w	800be70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba90:	f003 0320 	and.w	r3, r3, #32
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d008      	beq.n	800baaa <HAL_UART_IRQHandler+0x14e>
 800ba98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba9c:	f003 0320 	and.w	r3, r3, #32
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d002      	beq.n	800baaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fb5c 	bl	800c162 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	695b      	ldr	r3, [r3, #20]
 800bab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	bf14      	ite	ne
 800bab8:	2301      	movne	r3, #1
 800baba:	2300      	moveq	r3, #0
 800babc:	b2db      	uxtb	r3, r3
 800babe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac6:	f003 0308 	and.w	r3, r3, #8
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d103      	bne.n	800bad6 <HAL_UART_IRQHandler+0x17a>
 800bace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d04f      	beq.n	800bb76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fa66 	bl	800bfa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d041      	beq.n	800bb6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3314      	adds	r3, #20
 800baf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800baf8:	e853 3f00 	ldrex	r3, [r3]
 800bafc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	3314      	adds	r3, #20
 800bb12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb26:	e841 2300 	strex	r3, r2, [r1]
 800bb2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1d9      	bne.n	800baea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d013      	beq.n	800bb66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb42:	4a7e      	ldr	r2, [pc, #504]	; (800bd3c <HAL_UART_IRQHandler+0x3e0>)
 800bb44:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fa f976 	bl	8005e3c <HAL_DMA_Abort_IT>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d016      	beq.n	800bb84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb60:	4610      	mov	r0, r2
 800bb62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb64:	e00e      	b.n	800bb84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f99c 	bl	800bea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb6c:	e00a      	b.n	800bb84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 f998 	bl	800bea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb74:	e006      	b.n	800bb84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f994 	bl	800bea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bb82:	e175      	b.n	800be70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb84:	bf00      	nop
    return;
 800bb86:	e173      	b.n	800be70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	f040 814f 	bne.w	800be30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bb92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb96:	f003 0310 	and.w	r3, r3, #16
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f000 8148 	beq.w	800be30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bba4:	f003 0310 	and.w	r3, r3, #16
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 8141 	beq.w	800be30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bbae:	2300      	movs	r3, #0
 800bbb0:	60bb      	str	r3, [r7, #8]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	60bb      	str	r3, [r7, #8]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	60bb      	str	r3, [r7, #8]
 800bbc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 80b6 	beq.w	800bd40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f000 8145 	beq.w	800be74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	f080 813e 	bcs.w	800be74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc04:	699b      	ldr	r3, [r3, #24]
 800bc06:	2b20      	cmp	r3, #32
 800bc08:	f000 8088 	beq.w	800bd1c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	330c      	adds	r3, #12
 800bc12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc1a:	e853 3f00 	ldrex	r3, [r3]
 800bc1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	330c      	adds	r3, #12
 800bc34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bc38:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc40:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc48:	e841 2300 	strex	r3, r2, [r1]
 800bc4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1d9      	bne.n	800bc0c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3314      	adds	r3, #20
 800bc5e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc62:	e853 3f00 	ldrex	r3, [r3]
 800bc66:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc6a:	f023 0301 	bic.w	r3, r3, #1
 800bc6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3314      	adds	r3, #20
 800bc78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc7c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc80:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc82:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc88:	e841 2300 	strex	r3, r2, [r1]
 800bc8c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1e1      	bne.n	800bc58 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3314      	adds	r3, #20
 800bc9a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc9e:	e853 3f00 	ldrex	r3, [r3]
 800bca2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3314      	adds	r3, #20
 800bcb4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bcb8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bcba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bcbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bcc0:	e841 2300 	strex	r3, r2, [r1]
 800bcc4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bcc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1e3      	bne.n	800bc94 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2220      	movs	r2, #32
 800bcd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	330c      	adds	r3, #12
 800bce0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce4:	e853 3f00 	ldrex	r3, [r3]
 800bce8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bcea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcec:	f023 0310 	bic.w	r3, r3, #16
 800bcf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	330c      	adds	r3, #12
 800bcfa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bcfe:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd00:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd06:	e841 2300 	strex	r3, r2, [r1]
 800bd0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1e3      	bne.n	800bcda <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fa f855 	bl	8005dc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2202      	movs	r2, #2
 800bd20:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	1ad3      	subs	r3, r2, r3
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	4619      	mov	r1, r3
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 f8bf 	bl	800beb6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd38:	e09c      	b.n	800be74 <HAL_UART_IRQHandler+0x518>
 800bd3a:	bf00      	nop
 800bd3c:	0800c06d 	.word	0x0800c06d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f000 808e 	beq.w	800be78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f000 8089 	beq.w	800be78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	330c      	adds	r3, #12
 800bd6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd70:	e853 3f00 	ldrex	r3, [r3]
 800bd74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	330c      	adds	r3, #12
 800bd86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bd8a:	647a      	str	r2, [r7, #68]	; 0x44
 800bd8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd92:	e841 2300 	strex	r3, r2, [r1]
 800bd96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1e3      	bne.n	800bd66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3314      	adds	r3, #20
 800bda4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda8:	e853 3f00 	ldrex	r3, [r3]
 800bdac:	623b      	str	r3, [r7, #32]
   return(result);
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	f023 0301 	bic.w	r3, r3, #1
 800bdb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3314      	adds	r3, #20
 800bdbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bdc2:	633a      	str	r2, [r7, #48]	; 0x30
 800bdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdca:	e841 2300 	strex	r3, r2, [r1]
 800bdce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1e3      	bne.n	800bd9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2220      	movs	r2, #32
 800bdda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	330c      	adds	r3, #12
 800bdea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	e853 3f00 	ldrex	r3, [r3]
 800bdf2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f023 0310 	bic.w	r3, r3, #16
 800bdfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	330c      	adds	r3, #12
 800be04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800be08:	61fa      	str	r2, [r7, #28]
 800be0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0c:	69b9      	ldr	r1, [r7, #24]
 800be0e:	69fa      	ldr	r2, [r7, #28]
 800be10:	e841 2300 	strex	r3, r2, [r1]
 800be14:	617b      	str	r3, [r7, #20]
   return(result);
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1e3      	bne.n	800bde4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2202      	movs	r2, #2
 800be20:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be26:	4619      	mov	r1, r3
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 f844 	bl	800beb6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be2e:	e023      	b.n	800be78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d009      	beq.n	800be50 <HAL_UART_IRQHandler+0x4f4>
 800be3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be44:	2b00      	cmp	r3, #0
 800be46:	d003      	beq.n	800be50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 f923 	bl	800c094 <UART_Transmit_IT>
    return;
 800be4e:	e014      	b.n	800be7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00e      	beq.n	800be7a <HAL_UART_IRQHandler+0x51e>
 800be5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be64:	2b00      	cmp	r3, #0
 800be66:	d008      	beq.n	800be7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f962 	bl	800c132 <UART_EndTransmit_IT>
    return;
 800be6e:	e004      	b.n	800be7a <HAL_UART_IRQHandler+0x51e>
    return;
 800be70:	bf00      	nop
 800be72:	e002      	b.n	800be7a <HAL_UART_IRQHandler+0x51e>
      return;
 800be74:	bf00      	nop
 800be76:	e000      	b.n	800be7a <HAL_UART_IRQHandler+0x51e>
      return;
 800be78:	bf00      	nop
  }
}
 800be7a:	37e8      	adds	r7, #232	; 0xe8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be80:	b480      	push	{r7}
 800be82:	b083      	sub	sp, #12
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800be88:	bf00      	nop
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bc80      	pop	{r7}
 800be90:	4770      	bx	lr

0800be92 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800be92:	b480      	push	{r7}
 800be94:	b083      	sub	sp, #12
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800be9a:	bf00      	nop
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bc80      	pop	{r7}
 800bea2:	4770      	bx	lr

0800bea4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800beac:	bf00      	nop
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bc80      	pop	{r7}
 800beb4:	4770      	bx	lr

0800beb6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800beb6:	b480      	push	{r7}
 800beb8:	b083      	sub	sp, #12
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	460b      	mov	r3, r1
 800bec0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bec2:	bf00      	nop
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bc80      	pop	{r7}
 800beca:	4770      	bx	lr

0800becc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b090      	sub	sp, #64	; 0x40
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	603b      	str	r3, [r7, #0]
 800bed8:	4613      	mov	r3, r2
 800beda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bedc:	e050      	b.n	800bf80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee4:	d04c      	beq.n	800bf80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d007      	beq.n	800befc <UART_WaitOnFlagUntilTimeout+0x30>
 800beec:	f7f9 fe30 	bl	8005b50 <HAL_GetTick>
 800bef0:	4602      	mov	r2, r0
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bef8:	429a      	cmp	r2, r3
 800befa:	d241      	bcs.n	800bf80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	330c      	adds	r3, #12
 800bf02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf06:	e853 3f00 	ldrex	r3, [r3]
 800bf0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	330c      	adds	r3, #12
 800bf1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf1c:	637a      	str	r2, [r7, #52]	; 0x34
 800bf1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf24:	e841 2300 	strex	r3, r2, [r1]
 800bf28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1e5      	bne.n	800befc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	3314      	adds	r3, #20
 800bf36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	e853 3f00 	ldrex	r3, [r3]
 800bf3e:	613b      	str	r3, [r7, #16]
   return(result);
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	f023 0301 	bic.w	r3, r3, #1
 800bf46:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3314      	adds	r3, #20
 800bf4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf50:	623a      	str	r2, [r7, #32]
 800bf52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf54:	69f9      	ldr	r1, [r7, #28]
 800bf56:	6a3a      	ldr	r2, [r7, #32]
 800bf58:	e841 2300 	strex	r3, r2, [r1]
 800bf5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf5e:	69bb      	ldr	r3, [r7, #24]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d1e5      	bne.n	800bf30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2220      	movs	r2, #32
 800bf68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2220      	movs	r2, #32
 800bf70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800bf7c:	2303      	movs	r3, #3
 800bf7e:	e00f      	b.n	800bfa0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	4013      	ands	r3, r2
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	bf0c      	ite	eq
 800bf90:	2301      	moveq	r3, #1
 800bf92:	2300      	movne	r3, #0
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	461a      	mov	r2, r3
 800bf98:	79fb      	ldrb	r3, [r7, #7]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d09f      	beq.n	800bede <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3740      	adds	r7, #64	; 0x40
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b095      	sub	sp, #84	; 0x54
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	330c      	adds	r3, #12
 800bfb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfba:	e853 3f00 	ldrex	r3, [r3]
 800bfbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	330c      	adds	r3, #12
 800bfce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bfd0:	643a      	str	r2, [r7, #64]	; 0x40
 800bfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfd8:	e841 2300 	strex	r3, r2, [r1]
 800bfdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d1e5      	bne.n	800bfb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3314      	adds	r3, #20
 800bfea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	6a3b      	ldr	r3, [r7, #32]
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	f023 0301 	bic.w	r3, r3, #1
 800bffa:	64bb      	str	r3, [r7, #72]	; 0x48
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	3314      	adds	r3, #20
 800c002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c004:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c00a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c00c:	e841 2300 	strex	r3, r2, [r1]
 800c010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e5      	bne.n	800bfe4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d119      	bne.n	800c054 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	330c      	adds	r3, #12
 800c026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	e853 3f00 	ldrex	r3, [r3]
 800c02e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	f023 0310 	bic.w	r3, r3, #16
 800c036:	647b      	str	r3, [r7, #68]	; 0x44
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	330c      	adds	r3, #12
 800c03e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c040:	61ba      	str	r2, [r7, #24]
 800c042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c044:	6979      	ldr	r1, [r7, #20]
 800c046:	69ba      	ldr	r2, [r7, #24]
 800c048:	e841 2300 	strex	r3, r2, [r1]
 800c04c:	613b      	str	r3, [r7, #16]
   return(result);
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1e5      	bne.n	800c020 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2220      	movs	r2, #32
 800c058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c062:	bf00      	nop
 800c064:	3754      	adds	r7, #84	; 0x54
 800c066:	46bd      	mov	sp, r7
 800c068:	bc80      	pop	{r7}
 800c06a:	4770      	bx	lr

0800c06c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c078:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2200      	movs	r2, #0
 800c084:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f7ff ff0c 	bl	800bea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c08c:	bf00      	nop
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	2b21      	cmp	r3, #33	; 0x21
 800c0a6:	d13e      	bne.n	800c126 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0b0:	d114      	bne.n	800c0dc <UART_Transmit_IT+0x48>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d110      	bne.n	800c0dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6a1b      	ldr	r3, [r3, #32]
 800c0be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	881b      	ldrh	r3, [r3, #0]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6a1b      	ldr	r3, [r3, #32]
 800c0d4:	1c9a      	adds	r2, r3, #2
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	621a      	str	r2, [r3, #32]
 800c0da:	e008      	b.n	800c0ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	1c59      	adds	r1, r3, #1
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	6211      	str	r1, [r2, #32]
 800c0e6:	781a      	ldrb	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10f      	bne.n	800c122 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c110:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	68da      	ldr	r2, [r3, #12]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c120:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	e000      	b.n	800c128 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c126:	2302      	movs	r3, #2
  }
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3714      	adds	r7, #20
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bc80      	pop	{r7}
 800c130:	4770      	bx	lr

0800c132 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b082      	sub	sp, #8
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68da      	ldr	r2, [r3, #12]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c148:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2220      	movs	r2, #32
 800c14e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7ff fe94 	bl	800be80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b08c      	sub	sp, #48	; 0x30
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c170:	b2db      	uxtb	r3, r3
 800c172:	2b22      	cmp	r3, #34	; 0x22
 800c174:	f040 80ae 	bne.w	800c2d4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c180:	d117      	bne.n	800c1b2 <UART_Receive_IT+0x50>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d113      	bne.n	800c1b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c18a:	2300      	movs	r3, #0
 800c18c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c192:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1aa:	1c9a      	adds	r2, r3, #2
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	629a      	str	r2, [r3, #40]	; 0x28
 800c1b0:	e026      	b.n	800c200 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1c4:	d007      	beq.n	800c1d6 <UART_Receive_IT+0x74>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10a      	bne.n	800c1e4 <UART_Receive_IT+0x82>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d106      	bne.n	800c1e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e0:	701a      	strb	r2, [r3, #0]
 800c1e2:	e008      	b.n	800c1f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1fa:	1c5a      	adds	r2, r3, #1
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c204:	b29b      	uxth	r3, r3
 800c206:	3b01      	subs	r3, #1
 800c208:	b29b      	uxth	r3, r3
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	4619      	mov	r1, r3
 800c20e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c210:	2b00      	cmp	r3, #0
 800c212:	d15d      	bne.n	800c2d0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68da      	ldr	r2, [r3, #12]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f022 0220 	bic.w	r2, r2, #32
 800c222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	68da      	ldr	r2, [r3, #12]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c232:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	695a      	ldr	r2, [r3, #20]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f022 0201 	bic.w	r2, r2, #1
 800c242:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2220      	movs	r2, #32
 800c248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c256:	2b01      	cmp	r3, #1
 800c258:	d135      	bne.n	800c2c6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	330c      	adds	r3, #12
 800c266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	e853 3f00 	ldrex	r3, [r3]
 800c26e:	613b      	str	r3, [r7, #16]
   return(result);
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	f023 0310 	bic.w	r3, r3, #16
 800c276:	627b      	str	r3, [r7, #36]	; 0x24
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	330c      	adds	r3, #12
 800c27e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c280:	623a      	str	r2, [r7, #32]
 800c282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c284:	69f9      	ldr	r1, [r7, #28]
 800c286:	6a3a      	ldr	r2, [r7, #32]
 800c288:	e841 2300 	strex	r3, r2, [r1]
 800c28c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1e5      	bne.n	800c260 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 0310 	and.w	r3, r3, #16
 800c29e:	2b10      	cmp	r3, #16
 800c2a0:	d10a      	bne.n	800c2b8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	60fb      	str	r3, [r7, #12]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	60fb      	str	r3, [r7, #12]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	60fb      	str	r3, [r7, #12]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c2bc:	4619      	mov	r1, r3
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7ff fdf9 	bl	800beb6 <HAL_UARTEx_RxEventCallback>
 800c2c4:	e002      	b.n	800c2cc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f7ff fde3 	bl	800be92 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	e002      	b.n	800c2d6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e000      	b.n	800c2d6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c2d4:	2302      	movs	r3, #2
  }
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3730      	adds	r7, #48	; 0x30
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
	...

0800c2e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	68da      	ldr	r2, [r3, #12]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	430a      	orrs	r2, r1
 800c2fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	689a      	ldr	r2, [r3, #8]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	691b      	ldr	r3, [r3, #16]
 800c306:	431a      	orrs	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	695b      	ldr	r3, [r3, #20]
 800c30c:	4313      	orrs	r3, r2
 800c30e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c31a:	f023 030c 	bic.w	r3, r3, #12
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	6812      	ldr	r2, [r2, #0]
 800c322:	68b9      	ldr	r1, [r7, #8]
 800c324:	430b      	orrs	r3, r1
 800c326:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	695b      	ldr	r3, [r3, #20]
 800c32e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	699a      	ldr	r2, [r3, #24]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	430a      	orrs	r2, r1
 800c33c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a2c      	ldr	r2, [pc, #176]	; (800c3f4 <UART_SetConfig+0x114>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d103      	bne.n	800c350 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c348:	f7fd fd80 	bl	8009e4c <HAL_RCC_GetPCLK2Freq>
 800c34c:	60f8      	str	r0, [r7, #12]
 800c34e:	e002      	b.n	800c356 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c350:	f7fd fd68 	bl	8009e24 <HAL_RCC_GetPCLK1Freq>
 800c354:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	4613      	mov	r3, r2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	4413      	add	r3, r2
 800c35e:	009a      	lsls	r2, r3, #2
 800c360:	441a      	add	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	fbb2 f3f3 	udiv	r3, r2, r3
 800c36c:	4a22      	ldr	r2, [pc, #136]	; (800c3f8 <UART_SetConfig+0x118>)
 800c36e:	fba2 2303 	umull	r2, r3, r2, r3
 800c372:	095b      	lsrs	r3, r3, #5
 800c374:	0119      	lsls	r1, r3, #4
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	4613      	mov	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	009a      	lsls	r2, r3, #2
 800c380:	441a      	add	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	fbb2 f2f3 	udiv	r2, r2, r3
 800c38c:	4b1a      	ldr	r3, [pc, #104]	; (800c3f8 <UART_SetConfig+0x118>)
 800c38e:	fba3 0302 	umull	r0, r3, r3, r2
 800c392:	095b      	lsrs	r3, r3, #5
 800c394:	2064      	movs	r0, #100	; 0x64
 800c396:	fb00 f303 	mul.w	r3, r0, r3
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	011b      	lsls	r3, r3, #4
 800c39e:	3332      	adds	r3, #50	; 0x32
 800c3a0:	4a15      	ldr	r2, [pc, #84]	; (800c3f8 <UART_SetConfig+0x118>)
 800c3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a6:	095b      	lsrs	r3, r3, #5
 800c3a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3ac:	4419      	add	r1, r3
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009a      	lsls	r2, r3, #2
 800c3b8:	441a      	add	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3c4:	4b0c      	ldr	r3, [pc, #48]	; (800c3f8 <UART_SetConfig+0x118>)
 800c3c6:	fba3 0302 	umull	r0, r3, r3, r2
 800c3ca:	095b      	lsrs	r3, r3, #5
 800c3cc:	2064      	movs	r0, #100	; 0x64
 800c3ce:	fb00 f303 	mul.w	r3, r0, r3
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	011b      	lsls	r3, r3, #4
 800c3d6:	3332      	adds	r3, #50	; 0x32
 800c3d8:	4a07      	ldr	r2, [pc, #28]	; (800c3f8 <UART_SetConfig+0x118>)
 800c3da:	fba2 2303 	umull	r2, r3, r2, r3
 800c3de:	095b      	lsrs	r3, r3, #5
 800c3e0:	f003 020f 	and.w	r2, r3, #15
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	440a      	add	r2, r1
 800c3ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c3ec:	bf00      	nop
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	40013800 	.word	0x40013800
 800c3f8:	51eb851f 	.word	0x51eb851f

0800c3fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c400:	4904      	ldr	r1, [pc, #16]	; (800c414 <MX_FATFS_Init+0x18>)
 800c402:	4805      	ldr	r0, [pc, #20]	; (800c418 <MX_FATFS_Init+0x1c>)
 800c404:	f003 fc82 	bl	800fd0c <FATFS_LinkDriver>
 800c408:	4603      	mov	r3, r0
 800c40a:	461a      	mov	r2, r3
 800c40c:	4b03      	ldr	r3, [pc, #12]	; (800c41c <MX_FATFS_Init+0x20>)
 800c40e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c410:	bf00      	nop
 800c412:	bd80      	pop	{r7, pc}
 800c414:	200025a4 	.word	0x200025a4
 800c418:	20000014 	.word	0x20000014
 800c41c:	200025a0 	.word	0x200025a0

0800c420 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c420:	b480      	push	{r7}
 800c422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c424:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c426:	4618      	mov	r0, r3
 800c428:	46bd      	mov	sp, r7
 800c42a:	bc80      	pop	{r7}
 800c42c:	4770      	bx	lr

0800c42e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b082      	sub	sp, #8
 800c432:	af00      	add	r7, sp, #0
 800c434:	4603      	mov	r3, r0
 800c436:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize (pdrv);
 800c438:	79fb      	ldrb	r3, [r7, #7]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7f5 fc52 	bl	8001ce4 <SD_disk_initialize>
 800c440:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c442:	4618      	mov	r0, r3
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b082      	sub	sp, #8
 800c44e:	af00      	add	r7, sp, #0
 800c450:	4603      	mov	r3, r0
 800c452:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status (pdrv);
 800c454:	79fb      	ldrb	r3, [r7, #7]
 800c456:	4618      	mov	r0, r3
 800c458:	f7f5 fd30 	bl	8001ebc <SD_disk_status>
 800c45c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b084      	sub	sp, #16
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
 800c470:	603b      	str	r3, [r7, #0]
 800c472:	4603      	mov	r3, r0
 800c474:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read (pdrv, buff, sector, count);
 800c476:	7bf8      	ldrb	r0, [r7, #15]
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	68b9      	ldr	r1, [r7, #8]
 800c47e:	f7f5 fd31 	bl	8001ee4 <SD_disk_read>
 800c482:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c484:	4618      	mov	r0, r3
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	60b9      	str	r1, [r7, #8]
 800c494:	607a      	str	r2, [r7, #4]
 800c496:	603b      	str	r3, [r7, #0]
 800c498:	4603      	mov	r3, r0
 800c49a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 800c49c:	7bf8      	ldrb	r0, [r7, #15]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	68b9      	ldr	r1, [r7, #8]
 800c4a4:	f7f5 fd88 	bl	8001fb8 <SD_disk_write>
 800c4a8:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b082      	sub	sp, #8
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	603a      	str	r2, [r7, #0]
 800c4bc:	71fb      	strb	r3, [r7, #7]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl (pdrv, cmd, buff);
 800c4c2:	79b9      	ldrb	r1, [r7, #6]
 800c4c4:	79fb      	ldrb	r3, [r7, #7]
 800c4c6:	683a      	ldr	r2, [r7, #0]
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7f5 fdf9 	bl	80020c0 <SD_disk_ioctl>
 800c4ce:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c4e2:	79fb      	ldrb	r3, [r7, #7]
 800c4e4:	4a08      	ldr	r2, [pc, #32]	; (800c508 <disk_status+0x30>)
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	4413      	add	r3, r2
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	79fa      	ldrb	r2, [r7, #7]
 800c4f0:	4905      	ldr	r1, [pc, #20]	; (800c508 <disk_status+0x30>)
 800c4f2:	440a      	add	r2, r1
 800c4f4:	7a12      	ldrb	r2, [r2, #8]
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	4798      	blx	r3
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	200027c8 	.word	0x200027c8

0800c50c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	4603      	mov	r3, r0
 800c514:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c516:	2300      	movs	r3, #0
 800c518:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800c51a:	79fb      	ldrb	r3, [r7, #7]
 800c51c:	4a0d      	ldr	r2, [pc, #52]	; (800c554 <disk_initialize+0x48>)
 800c51e:	5cd3      	ldrb	r3, [r2, r3]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d111      	bne.n	800c548 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800c524:	79fb      	ldrb	r3, [r7, #7]
 800c526:	4a0b      	ldr	r2, [pc, #44]	; (800c554 <disk_initialize+0x48>)
 800c528:	2101      	movs	r1, #1
 800c52a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c52c:	79fb      	ldrb	r3, [r7, #7]
 800c52e:	4a09      	ldr	r2, [pc, #36]	; (800c554 <disk_initialize+0x48>)
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4413      	add	r3, r2
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	79fa      	ldrb	r2, [r7, #7]
 800c53a:	4906      	ldr	r1, [pc, #24]	; (800c554 <disk_initialize+0x48>)
 800c53c:	440a      	add	r2, r1
 800c53e:	7a12      	ldrb	r2, [r2, #8]
 800c540:	4610      	mov	r0, r2
 800c542:	4798      	blx	r3
 800c544:	4603      	mov	r3, r0
 800c546:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c548:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	200027c8 	.word	0x200027c8

0800c558 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c558:	b590      	push	{r4, r7, lr}
 800c55a:	b087      	sub	sp, #28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60b9      	str	r1, [r7, #8]
 800c560:	607a      	str	r2, [r7, #4]
 800c562:	603b      	str	r3, [r7, #0]
 800c564:	4603      	mov	r3, r0
 800c566:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c568:	7bfb      	ldrb	r3, [r7, #15]
 800c56a:	4a0a      	ldr	r2, [pc, #40]	; (800c594 <disk_read+0x3c>)
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	4413      	add	r3, r2
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	689c      	ldr	r4, [r3, #8]
 800c574:	7bfb      	ldrb	r3, [r7, #15]
 800c576:	4a07      	ldr	r2, [pc, #28]	; (800c594 <disk_read+0x3c>)
 800c578:	4413      	add	r3, r2
 800c57a:	7a18      	ldrb	r0, [r3, #8]
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	68b9      	ldr	r1, [r7, #8]
 800c582:	47a0      	blx	r4
 800c584:	4603      	mov	r3, r0
 800c586:	75fb      	strb	r3, [r7, #23]
  return res;
 800c588:	7dfb      	ldrb	r3, [r7, #23]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	371c      	adds	r7, #28
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd90      	pop	{r4, r7, pc}
 800c592:	bf00      	nop
 800c594:	200027c8 	.word	0x200027c8

0800c598 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c598:	b590      	push	{r4, r7, lr}
 800c59a:	b087      	sub	sp, #28
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60b9      	str	r1, [r7, #8]
 800c5a0:	607a      	str	r2, [r7, #4]
 800c5a2:	603b      	str	r3, [r7, #0]
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c5a8:	7bfb      	ldrb	r3, [r7, #15]
 800c5aa:	4a0a      	ldr	r2, [pc, #40]	; (800c5d4 <disk_write+0x3c>)
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	68dc      	ldr	r4, [r3, #12]
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
 800c5b6:	4a07      	ldr	r2, [pc, #28]	; (800c5d4 <disk_write+0x3c>)
 800c5b8:	4413      	add	r3, r2
 800c5ba:	7a18      	ldrb	r0, [r3, #8]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	68b9      	ldr	r1, [r7, #8]
 800c5c2:	47a0      	blx	r4
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	371c      	adds	r7, #28
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd90      	pop	{r4, r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	200027c8 	.word	0x200027c8

0800c5d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	4603      	mov	r3, r0
 800c5e0:	603a      	str	r2, [r7, #0]
 800c5e2:	71fb      	strb	r3, [r7, #7]
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c5e8:	79fb      	ldrb	r3, [r7, #7]
 800c5ea:	4a09      	ldr	r2, [pc, #36]	; (800c610 <disk_ioctl+0x38>)
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	4413      	add	r3, r2
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	691b      	ldr	r3, [r3, #16]
 800c5f4:	79fa      	ldrb	r2, [r7, #7]
 800c5f6:	4906      	ldr	r1, [pc, #24]	; (800c610 <disk_ioctl+0x38>)
 800c5f8:	440a      	add	r2, r1
 800c5fa:	7a10      	ldrb	r0, [r2, #8]
 800c5fc:	79b9      	ldrb	r1, [r7, #6]
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	4798      	blx	r3
 800c602:	4603      	mov	r3, r0
 800c604:	73fb      	strb	r3, [r7, #15]
  return res;
 800c606:	7bfb      	ldrb	r3, [r7, #15]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	200027c8 	.word	0x200027c8

0800c614 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c614:	b480      	push	{r7}
 800c616:	b087      	sub	sp, #28
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800c628:	e007      	b.n	800c63a <mem_cpy+0x26>
		*d++ = *s++;
 800c62a:	693a      	ldr	r2, [r7, #16]
 800c62c:	1c53      	adds	r3, r2, #1
 800c62e:	613b      	str	r3, [r7, #16]
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	1c59      	adds	r1, r3, #1
 800c634:	6179      	str	r1, [r7, #20]
 800c636:	7812      	ldrb	r2, [r2, #0]
 800c638:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	1e5a      	subs	r2, r3, #1
 800c63e:	607a      	str	r2, [r7, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d1f2      	bne.n	800c62a <mem_cpy+0x16>
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop
 800c648:	371c      	adds	r7, #28
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bc80      	pop	{r7}
 800c64e:	4770      	bx	lr

0800c650 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c650:	b480      	push	{r7}
 800c652:	b087      	sub	sp, #28
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800c660:	e005      	b.n	800c66e <mem_set+0x1e>
		*d++ = (BYTE)val;
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	1c5a      	adds	r2, r3, #1
 800c666:	617a      	str	r2, [r7, #20]
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	b2d2      	uxtb	r2, r2
 800c66c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	1e5a      	subs	r2, r3, #1
 800c672:	607a      	str	r2, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1f4      	bne.n	800c662 <mem_set+0x12>
}
 800c678:	bf00      	nop
 800c67a:	bf00      	nop
 800c67c:	371c      	adds	r7, #28
 800c67e:	46bd      	mov	sp, r7
 800c680:	bc80      	pop	{r7}
 800c682:	4770      	bx	lr

0800c684 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800c684:	b480      	push	{r7}
 800c686:	b089      	sub	sp, #36	; 0x24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	61fb      	str	r3, [r7, #28]
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c698:	2300      	movs	r3, #0
 800c69a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800c69c:	bf00      	nop
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	1e5a      	subs	r2, r3, #1
 800c6a2:	607a      	str	r2, [r7, #4]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00d      	beq.n	800c6c4 <mem_cmp+0x40>
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	1c5a      	adds	r2, r3, #1
 800c6ac:	61fa      	str	r2, [r7, #28]
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	1c5a      	adds	r2, r3, #1
 800c6b6:	61ba      	str	r2, [r7, #24]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	1acb      	subs	r3, r1, r3
 800c6bc:	617b      	str	r3, [r7, #20]
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d0ec      	beq.n	800c69e <mem_cmp+0x1a>
	return r;
 800c6c4:	697b      	ldr	r3, [r7, #20]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3724      	adds	r7, #36	; 0x24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bc80      	pop	{r7}
 800c6ce:	4770      	bx	lr

0800c6d0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800c6d0:	b480      	push	{r7}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c6da:	e002      	b.n	800c6e2 <chk_chr+0x12>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	607b      	str	r3, [r7, #4]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d005      	beq.n	800c6f6 <chk_chr+0x26>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d1f2      	bne.n	800c6dc <chk_chr+0xc>
	return *str;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	781b      	ldrb	r3, [r3, #0]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bc80      	pop	{r7}
 800c702:	4770      	bx	lr

0800c704 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c70e:	2300      	movs	r3, #0
 800c710:	60bb      	str	r3, [r7, #8]
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	60fb      	str	r3, [r7, #12]
 800c716:	e03b      	b.n	800c790 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 800c718:	4931      	ldr	r1, [pc, #196]	; (800c7e0 <chk_lock+0xdc>)
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	4613      	mov	r3, r2
 800c71e:	005b      	lsls	r3, r3, #1
 800c720:	4413      	add	r3, r2
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	440b      	add	r3, r1
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d02c      	beq.n	800c786 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800c72c:	492c      	ldr	r1, [pc, #176]	; (800c7e0 <chk_lock+0xdc>)
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	4613      	mov	r3, r2
 800c732:	005b      	lsls	r3, r3, #1
 800c734:	4413      	add	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	440b      	add	r3, r1
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	429a      	cmp	r2, r3
 800c746:	d120      	bne.n	800c78a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 800c748:	4925      	ldr	r1, [pc, #148]	; (800c7e0 <chk_lock+0xdc>)
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	4613      	mov	r3, r2
 800c74e:	005b      	lsls	r3, r3, #1
 800c750:	4413      	add	r3, r2
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	440b      	add	r3, r1
 800c756:	3304      	adds	r3, #4
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c760:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800c762:	429a      	cmp	r2, r3
 800c764:	d111      	bne.n	800c78a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800c766:	491e      	ldr	r1, [pc, #120]	; (800c7e0 <chk_lock+0xdc>)
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	4613      	mov	r3, r2
 800c76c:	005b      	lsls	r3, r3, #1
 800c76e:	4413      	add	r3, r2
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	440b      	add	r3, r1
 800c774:	3308      	adds	r3, #8
 800c776:	881a      	ldrh	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c77e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800c780:	429a      	cmp	r2, r3
 800c782:	d102      	bne.n	800c78a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800c784:	e007      	b.n	800c796 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800c786:	2301      	movs	r3, #1
 800c788:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	3301      	adds	r3, #1
 800c78e:	60fb      	str	r3, [r7, #12]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b01      	cmp	r3, #1
 800c794:	d9c0      	bls.n	800c718 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d109      	bne.n	800c7b0 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d102      	bne.n	800c7a8 <chk_lock+0xa4>
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d101      	bne.n	800c7ac <chk_lock+0xa8>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	e013      	b.n	800c7d4 <chk_lock+0xd0>
 800c7ac:	2312      	movs	r3, #18
 800c7ae:	e011      	b.n	800c7d4 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10b      	bne.n	800c7ce <chk_lock+0xca>
 800c7b6:	490a      	ldr	r1, [pc, #40]	; (800c7e0 <chk_lock+0xdc>)
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	005b      	lsls	r3, r3, #1
 800c7be:	4413      	add	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	440b      	add	r3, r1
 800c7c4:	330a      	adds	r3, #10
 800c7c6:	881b      	ldrh	r3, [r3, #0]
 800c7c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7cc:	d101      	bne.n	800c7d2 <chk_lock+0xce>
 800c7ce:	2310      	movs	r3, #16
 800c7d0:	e000      	b.n	800c7d4 <chk_lock+0xd0>
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3714      	adds	r7, #20
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bc80      	pop	{r7}
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	200025b0 	.word	0x200025b0

0800c7e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	607b      	str	r3, [r7, #4]
 800c7ee:	e002      	b.n	800c7f6 <enq_lock+0x12>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	607b      	str	r3, [r7, #4]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d809      	bhi.n	800c810 <enq_lock+0x2c>
 800c7fc:	490a      	ldr	r1, [pc, #40]	; (800c828 <enq_lock+0x44>)
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	4613      	mov	r3, r2
 800c802:	005b      	lsls	r3, r3, #1
 800c804:	4413      	add	r3, r2
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	440b      	add	r3, r1
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1ef      	bne.n	800c7f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b02      	cmp	r3, #2
 800c814:	bf14      	ite	ne
 800c816:	2301      	movne	r3, #1
 800c818:	2300      	moveq	r3, #0
 800c81a:	b2db      	uxtb	r3, r3
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	bc80      	pop	{r7}
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	200025b0 	.word	0x200025b0

0800c82c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c836:	2300      	movs	r3, #0
 800c838:	60fb      	str	r3, [r7, #12]
 800c83a:	e02e      	b.n	800c89a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800c83c:	4958      	ldr	r1, [pc, #352]	; (800c9a0 <inc_lock+0x174>)
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	4613      	mov	r3, r2
 800c842:	005b      	lsls	r3, r3, #1
 800c844:	4413      	add	r3, r2
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	440b      	add	r3, r1
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	429a      	cmp	r2, r3
 800c856:	d11d      	bne.n	800c894 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 800c858:	4951      	ldr	r1, [pc, #324]	; (800c9a0 <inc_lock+0x174>)
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	4613      	mov	r3, r2
 800c85e:	005b      	lsls	r3, r3, #1
 800c860:	4413      	add	r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	440b      	add	r3, r1
 800c866:	3304      	adds	r3, #4
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c870:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800c872:	429a      	cmp	r2, r3
 800c874:	d10e      	bne.n	800c894 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800c876:	494a      	ldr	r1, [pc, #296]	; (800c9a0 <inc_lock+0x174>)
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	4613      	mov	r3, r2
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	4413      	add	r3, r2
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	440b      	add	r3, r1
 800c884:	3308      	adds	r3, #8
 800c886:	881a      	ldrh	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c88e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800c890:	429a      	cmp	r2, r3
 800c892:	d006      	beq.n	800c8a2 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	3301      	adds	r3, #1
 800c898:	60fb      	str	r3, [r7, #12]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d9cd      	bls.n	800c83c <inc_lock+0x10>
 800c8a0:	e000      	b.n	800c8a4 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800c8a2:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d148      	bne.n	800c93c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60fb      	str	r3, [r7, #12]
 800c8ae:	e002      	b.n	800c8b6 <inc_lock+0x8a>
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	60fb      	str	r3, [r7, #12]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d809      	bhi.n	800c8d0 <inc_lock+0xa4>
 800c8bc:	4938      	ldr	r1, [pc, #224]	; (800c9a0 <inc_lock+0x174>)
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	005b      	lsls	r3, r3, #1
 800c8c4:	4413      	add	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	440b      	add	r3, r1
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1ef      	bne.n	800c8b0 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d101      	bne.n	800c8da <inc_lock+0xae>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	e05d      	b.n	800c996 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8e0:	6819      	ldr	r1, [r3, #0]
 800c8e2:	482f      	ldr	r0, [pc, #188]	; (800c9a0 <inc_lock+0x174>)
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	005b      	lsls	r3, r3, #1
 800c8ea:	4413      	add	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4403      	add	r3, r0
 800c8f0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8f8:	6899      	ldr	r1, [r3, #8]
 800c8fa:	4829      	ldr	r0, [pc, #164]	; (800c9a0 <inc_lock+0x174>)
 800c8fc:	68fa      	ldr	r2, [r7, #12]
 800c8fe:	4613      	mov	r3, r2
 800c900:	005b      	lsls	r3, r3, #1
 800c902:	4413      	add	r3, r2
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	4403      	add	r3, r0
 800c908:	3304      	adds	r3, #4
 800c90a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c912:	88d8      	ldrh	r0, [r3, #6]
 800c914:	4922      	ldr	r1, [pc, #136]	; (800c9a0 <inc_lock+0x174>)
 800c916:	68fa      	ldr	r2, [r7, #12]
 800c918:	4613      	mov	r3, r2
 800c91a:	005b      	lsls	r3, r3, #1
 800c91c:	4413      	add	r3, r2
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	440b      	add	r3, r1
 800c922:	3308      	adds	r3, #8
 800c924:	4602      	mov	r2, r0
 800c926:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800c928:	491d      	ldr	r1, [pc, #116]	; (800c9a0 <inc_lock+0x174>)
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	4613      	mov	r3, r2
 800c92e:	005b      	lsls	r3, r3, #1
 800c930:	4413      	add	r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	440b      	add	r3, r1
 800c936:	330a      	adds	r3, #10
 800c938:	2200      	movs	r2, #0
 800c93a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00c      	beq.n	800c95c <inc_lock+0x130>
 800c942:	4917      	ldr	r1, [pc, #92]	; (800c9a0 <inc_lock+0x174>)
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	4613      	mov	r3, r2
 800c948:	005b      	lsls	r3, r3, #1
 800c94a:	4413      	add	r3, r2
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	440b      	add	r3, r1
 800c950:	330a      	adds	r3, #10
 800c952:	881b      	ldrh	r3, [r3, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <inc_lock+0x130>
 800c958:	2300      	movs	r3, #0
 800c95a:	e01c      	b.n	800c996 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10b      	bne.n	800c97a <inc_lock+0x14e>
 800c962:	490f      	ldr	r1, [pc, #60]	; (800c9a0 <inc_lock+0x174>)
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	4613      	mov	r3, r2
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	4413      	add	r3, r2
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	440b      	add	r3, r1
 800c970:	330a      	adds	r3, #10
 800c972:	881b      	ldrh	r3, [r3, #0]
 800c974:	3301      	adds	r3, #1
 800c976:	b299      	uxth	r1, r3
 800c978:	e001      	b.n	800c97e <inc_lock+0x152>
 800c97a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c97e:	4808      	ldr	r0, [pc, #32]	; (800c9a0 <inc_lock+0x174>)
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	4613      	mov	r3, r2
 800c984:	005b      	lsls	r3, r3, #1
 800c986:	4413      	add	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4403      	add	r3, r0
 800c98c:	330a      	adds	r3, #10
 800c98e:	460a      	mov	r2, r1
 800c990:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	3301      	adds	r3, #1
}
 800c996:	4618      	mov	r0, r3
 800c998:	3714      	adds	r7, #20
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bc80      	pop	{r7}
 800c99e:	4770      	bx	lr
 800c9a0:	200025b0 	.word	0x200025b0

0800c9a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	607b      	str	r3, [r7, #4]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d82e      	bhi.n	800ca16 <dec_lock+0x72>
		n = Files[i].ctr;
 800c9b8:	491b      	ldr	r1, [pc, #108]	; (800ca28 <dec_lock+0x84>)
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	4613      	mov	r3, r2
 800c9be:	005b      	lsls	r3, r3, #1
 800c9c0:	4413      	add	r3, r2
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	440b      	add	r3, r1
 800c9c6:	330a      	adds	r3, #10
 800c9c8:	881b      	ldrh	r3, [r3, #0]
 800c9ca:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c9cc:	89fb      	ldrh	r3, [r7, #14]
 800c9ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9d2:	d101      	bne.n	800c9d8 <dec_lock+0x34>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800c9d8:	89fb      	ldrh	r3, [r7, #14]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <dec_lock+0x40>
 800c9de:	89fb      	ldrh	r3, [r7, #14]
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c9e4:	4910      	ldr	r1, [pc, #64]	; (800ca28 <dec_lock+0x84>)
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	005b      	lsls	r3, r3, #1
 800c9ec:	4413      	add	r3, r2
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	440b      	add	r3, r1
 800c9f2:	330a      	adds	r3, #10
 800c9f4:	89fa      	ldrh	r2, [r7, #14]
 800c9f6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c9f8:	89fb      	ldrh	r3, [r7, #14]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d108      	bne.n	800ca10 <dec_lock+0x6c>
 800c9fe:	490a      	ldr	r1, [pc, #40]	; (800ca28 <dec_lock+0x84>)
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	4613      	mov	r3, r2
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	4413      	add	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	440b      	add	r3, r1
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ca10:	2300      	movs	r3, #0
 800ca12:	737b      	strb	r3, [r7, #13]
 800ca14:	e001      	b.n	800ca1a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ca16:	2302      	movs	r3, #2
 800ca18:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ca1a:	7b7b      	ldrb	r3, [r7, #13]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bc80      	pop	{r7}
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	200025b0 	.word	0x200025b0

0800ca2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ca34:	2300      	movs	r3, #0
 800ca36:	60fb      	str	r3, [r7, #12]
 800ca38:	e016      	b.n	800ca68 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ca3a:	4910      	ldr	r1, [pc, #64]	; (800ca7c <clear_lock+0x50>)
 800ca3c:	68fa      	ldr	r2, [r7, #12]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	005b      	lsls	r3, r3, #1
 800ca42:	4413      	add	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	440b      	add	r3, r1
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d108      	bne.n	800ca62 <clear_lock+0x36>
 800ca50:	490a      	ldr	r1, [pc, #40]	; (800ca7c <clear_lock+0x50>)
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	4613      	mov	r3, r2
 800ca56:	005b      	lsls	r3, r3, #1
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	440b      	add	r3, r1
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	3301      	adds	r3, #1
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d9e5      	bls.n	800ca3a <clear_lock+0xe>
	}
}
 800ca6e:	bf00      	nop
 800ca70:	bf00      	nop
 800ca72:	3714      	adds	r7, #20
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bc80      	pop	{r7}
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	200025b0 	.word	0x200025b0

0800ca80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca92:	791b      	ldrb	r3, [r3, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d040      	beq.n	800cb1a <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caa8:	7858      	ldrb	r0, [r3, #1]
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	2301      	movs	r3, #1
 800caae:	697a      	ldr	r2, [r7, #20]
 800cab0:	f7ff fd72 	bl	800c598 <disk_write>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d002      	beq.n	800cac0 <sync_window+0x40>
			res = FR_DISK_ERR;
 800caba:	2301      	movs	r3, #1
 800cabc:	73fb      	strb	r3, [r7, #15]
 800cabe:	e02c      	b.n	800cb1a <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cac6:	2200      	movs	r2, #0
 800cac8:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cad0:	6a1b      	ldr	r3, [r3, #32]
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	1ad2      	subs	r2, r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cadc:	699b      	ldr	r3, [r3, #24]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d21b      	bcs.n	800cb1a <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cae8:	78db      	ldrb	r3, [r3, #3]
 800caea:	613b      	str	r3, [r7, #16]
 800caec:	e012      	b.n	800cb14 <sync_window+0x94>
					wsect += fs->fsize;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caf4:	699b      	ldr	r3, [r3, #24]
 800caf6:	697a      	ldr	r2, [r7, #20]
 800caf8:	4413      	add	r3, r2
 800cafa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb02:	7858      	ldrb	r0, [r3, #1]
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	2301      	movs	r3, #1
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	f7ff fd45 	bl	800c598 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	3b01      	subs	r3, #1
 800cb12:	613b      	str	r3, [r7, #16]
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d8e9      	bhi.n	800caee <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800cb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3718      	adds	r7, #24
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3a:	683a      	ldr	r2, [r7, #0]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d01e      	beq.n	800cb7e <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f7ff ff9d 	bl	800ca80 <sync_window>
 800cb46:	4603      	mov	r3, r0
 800cb48:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cb4a:	7bfb      	ldrb	r3, [r7, #15]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d116      	bne.n	800cb7e <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb56:	7858      	ldrb	r0, [r3, #1]
 800cb58:	6879      	ldr	r1, [r7, #4]
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	f7ff fcfb 	bl	800c558 <disk_read>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d004      	beq.n	800cb72 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cb68:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb78:	461a      	mov	r2, r3
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f7ff ff75 	bl	800ca80 <sync_window>
 800cb96:	4603      	mov	r3, r0
 800cb98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cb9a:	7bfb      	ldrb	r3, [r7, #15]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f040 80ad 	bne.w	800ccfc <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b03      	cmp	r3, #3
 800cbac:	f040 8098 	bne.w	800cce0 <sync_fs+0x158>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbb6:	795b      	ldrb	r3, [r3, #5]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	f040 8091 	bne.w	800cce0 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbc6:	895b      	ldrh	r3, [r3, #10]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	2100      	movs	r1, #0
 800cbcc:	f7ff fd40 	bl	800c650 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2255      	movs	r2, #85	; 0x55
 800cbd4:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	22aa      	movs	r2, #170	; 0xaa
 800cbdc:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2252      	movs	r2, #82	; 0x52
 800cbe4:	701a      	strb	r2, [r3, #0]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2252      	movs	r2, #82	; 0x52
 800cbea:	705a      	strb	r2, [r3, #1]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2261      	movs	r2, #97	; 0x61
 800cbf0:	709a      	strb	r2, [r3, #2]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2241      	movs	r2, #65	; 0x41
 800cbf6:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2272      	movs	r2, #114	; 0x72
 800cbfc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2272      	movs	r2, #114	; 0x72
 800cc04:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2241      	movs	r2, #65	; 0x41
 800cc0c:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2261      	movs	r2, #97	; 0x61
 800cc14:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	b2da      	uxtb	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc2e:	691b      	ldr	r3, [r3, #16]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	0a1b      	lsrs	r3, r3, #8
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	b2da      	uxtb	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	0c1b      	lsrs	r3, r3, #16
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	0e1b      	lsrs	r3, r3, #24
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	b2da      	uxtb	r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	0a1b      	lsrs	r3, r3, #8
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	0c1b      	lsrs	r3, r3, #16
 800cc92:	b2da      	uxtb	r2, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	0e1b      	lsrs	r3, r3, #24
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccb2:	69db      	ldr	r3, [r3, #28]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ccbc:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccc4:	7858      	ldrb	r0, [r3, #1]
 800ccc6:	6879      	ldr	r1, [r7, #4]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	f7ff fc61 	bl	800c598 <disk_write>
			fs->fsi_flag = 0;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccdc:	2200      	movs	r2, #0
 800ccde:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cce6:	785b      	ldrb	r3, [r3, #1]
 800cce8:	2200      	movs	r2, #0
 800ccea:	2100      	movs	r1, #0
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff fc73 	bl	800c5d8 <disk_ioctl>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <sync_fs+0x174>
			res = FR_DISK_ERR;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cd06:	b480      	push	{r7}
 800cd08:	b083      	sub	sp, #12
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	3b02      	subs	r3, #2
 800cd14:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	3b02      	subs	r3, #2
 800cd20:	683a      	ldr	r2, [r7, #0]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d301      	bcc.n	800cd2a <clust2sect+0x24>
 800cd26:	2300      	movs	r3, #0
 800cd28:	e00c      	b.n	800cd44 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd30:	789b      	ldrb	r3, [r3, #2]
 800cd32:	461a      	mov	r2, r3
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	fb03 f202 	mul.w	r2, r3, r2
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd42:	4413      	add	r3, r2
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	370c      	adds	r7, #12
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bc80      	pop	{r7}
 800cd4c:	4770      	bx	lr

0800cd4e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b086      	sub	sp, #24
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
 800cd56:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d906      	bls.n	800cd6c <get_fat+0x1e>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd64:	695b      	ldr	r3, [r3, #20]
 800cd66:	683a      	ldr	r2, [r7, #0]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d302      	bcc.n	800cd72 <get_fat+0x24>
		val = 1;	/* Internal error */
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	617b      	str	r3, [r7, #20]
 800cd70:	e0e4      	b.n	800cf3c <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cd72:	f04f 33ff 	mov.w	r3, #4294967295
 800cd76:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	2b03      	cmp	r3, #3
 800cd82:	f000 8098 	beq.w	800ceb6 <get_fat+0x168>
 800cd86:	2b03      	cmp	r3, #3
 800cd88:	f300 80ce 	bgt.w	800cf28 <get_fat+0x1da>
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d002      	beq.n	800cd96 <get_fat+0x48>
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d05f      	beq.n	800ce54 <get_fat+0x106>
 800cd94:	e0c8      	b.n	800cf28 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	60fb      	str	r3, [r7, #12]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	085b      	lsrs	r3, r3, #1
 800cd9e:	68fa      	ldr	r2, [r7, #12]
 800cda0:	4413      	add	r3, r2
 800cda2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdaa:	6a1a      	ldr	r2, [r3, #32]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdb2:	895b      	ldrh	r3, [r3, #10]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	fbb3 f3f1 	udiv	r3, r3, r1
 800cdbc:	4413      	add	r3, r2
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f7ff feaf 	bl	800cb24 <move_window>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f040 80b0 	bne.w	800cf2e <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	1c5a      	adds	r2, r3, #1
 800cdd2:	60fa      	str	r2, [r7, #12]
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cdda:	8952      	ldrh	r2, [r2, #10]
 800cddc:	fbb3 f1f2 	udiv	r1, r3, r2
 800cde0:	fb01 f202 	mul.w	r2, r1, r2
 800cde4:	1a9b      	subs	r3, r3, r2
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	5cd3      	ldrb	r3, [r2, r3]
 800cdea:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdf2:	6a1a      	ldr	r2, [r3, #32]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdfa:	895b      	ldrh	r3, [r3, #10]
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce04:	4413      	add	r3, r2
 800ce06:	4619      	mov	r1, r3
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff fe8b 	bl	800cb24 <move_window>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f040 808e 	bne.w	800cf32 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce1c:	895b      	ldrh	r3, [r3, #10]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce26:	fb01 f202 	mul.w	r2, r1, r2
 800ce2a:	1a9b      	subs	r3, r3, r2
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	5cd3      	ldrb	r3, [r2, r3]
 800ce30:	021b      	lsls	r3, r3, #8
 800ce32:	461a      	mov	r2, r3
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	f003 0301 	and.w	r3, r3, #1
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d002      	beq.n	800ce4a <get_fat+0xfc>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	091b      	lsrs	r3, r3, #4
 800ce48:	e002      	b.n	800ce50 <get_fat+0x102>
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce50:	617b      	str	r3, [r7, #20]
			break;
 800ce52:	e073      	b.n	800cf3c <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce5a:	6a1a      	ldr	r2, [r3, #32]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce62:	895b      	ldrh	r3, [r3, #10]
 800ce64:	085b      	lsrs	r3, r3, #1
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	4619      	mov	r1, r3
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce70:	4413      	add	r3, r2
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7ff fe55 	bl	800cb24 <move_window>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d15a      	bne.n	800cf36 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	005b      	lsls	r3, r3, #1
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ce8a:	8952      	ldrh	r2, [r2, #10]
 800ce8c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce90:	fb01 f202 	mul.w	r2, r1, r2
 800ce94:	1a9b      	subs	r3, r3, r2
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	4413      	add	r3, r2
 800ce9a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	021b      	lsls	r3, r3, #8
 800cea4:	b21a      	sxth	r2, r3
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	b21b      	sxth	r3, r3
 800ceac:	4313      	orrs	r3, r2
 800ceae:	b21b      	sxth	r3, r3
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	617b      	str	r3, [r7, #20]
			break;
 800ceb4:	e042      	b.n	800cf3c <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cebc:	6a1a      	ldr	r2, [r3, #32]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cec4:	895b      	ldrh	r3, [r3, #10]
 800cec6:	089b      	lsrs	r3, r3, #2
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	4619      	mov	r1, r3
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	fbb3 f3f1 	udiv	r3, r3, r1
 800ced2:	4413      	add	r3, r2
 800ced4:	4619      	mov	r1, r3
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7ff fe24 	bl	800cb24 <move_window>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d12b      	bne.n	800cf3a <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ceec:	8952      	ldrh	r2, [r2, #10]
 800ceee:	fbb3 f1f2 	udiv	r1, r3, r2
 800cef2:	fb01 f202 	mul.w	r2, r1, r2
 800cef6:	1a9b      	subs	r3, r3, r2
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	4413      	add	r3, r2
 800cefc:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	3303      	adds	r3, #3
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	061a      	lsls	r2, r3, #24
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	3302      	adds	r3, #2
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	041b      	lsls	r3, r3, #16
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	693a      	ldr	r2, [r7, #16]
 800cf12:	3201      	adds	r2, #1
 800cf14:	7812      	ldrb	r2, [r2, #0]
 800cf16:	0212      	lsls	r2, r2, #8
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	7812      	ldrb	r2, [r2, #0]
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cf24:	617b      	str	r3, [r7, #20]
			break;
 800cf26:	e009      	b.n	800cf3c <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800cf28:	2301      	movs	r3, #1
 800cf2a:	617b      	str	r3, [r7, #20]
 800cf2c:	e006      	b.n	800cf3c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf2e:	bf00      	nop
 800cf30:	e004      	b.n	800cf3c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf32:	bf00      	nop
 800cf34:	e002      	b.n	800cf3c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cf36:	bf00      	nop
 800cf38:	e000      	b.n	800cf3c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf3a:	bf00      	nop
		}
	}

	return val;
 800cf3c:	697b      	ldr	r3, [r7, #20]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3718      	adds	r7, #24
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b088      	sub	sp, #32
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	60f8      	str	r0, [r7, #12]
 800cf4e:	60b9      	str	r1, [r7, #8]
 800cf50:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d906      	bls.n	800cf66 <put_fat+0x20>
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf5e:	695b      	ldr	r3, [r3, #20]
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d302      	bcc.n	800cf6c <put_fat+0x26>
		res = FR_INT_ERR;
 800cf66:	2302      	movs	r3, #2
 800cf68:	77fb      	strb	r3, [r7, #31]
 800cf6a:	e13a      	b.n	800d1e2 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	2b03      	cmp	r3, #3
 800cf76:	f000 80d0 	beq.w	800d11a <put_fat+0x1d4>
 800cf7a:	2b03      	cmp	r3, #3
 800cf7c:	f300 8127 	bgt.w	800d1ce <put_fat+0x288>
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d003      	beq.n	800cf8c <put_fat+0x46>
 800cf84:	2b02      	cmp	r3, #2
 800cf86:	f000 808f 	beq.w	800d0a8 <put_fat+0x162>
 800cf8a:	e120      	b.n	800d1ce <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	617b      	str	r3, [r7, #20]
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	085b      	lsrs	r3, r3, #1
 800cf94:	697a      	ldr	r2, [r7, #20]
 800cf96:	4413      	add	r3, r2
 800cf98:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfa0:	6a1a      	ldr	r2, [r3, #32]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfa8:	895b      	ldrh	r3, [r3, #10]
 800cfaa:	4619      	mov	r1, r3
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	fbb3 f3f1 	udiv	r3, r3, r1
 800cfb2:	4413      	add	r3, r2
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	f7ff fdb4 	bl	800cb24 <move_window>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cfc0:	7ffb      	ldrb	r3, [r7, #31]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f040 8106 	bne.w	800d1d4 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	617a      	str	r2, [r7, #20]
 800cfce:	68fa      	ldr	r2, [r7, #12]
 800cfd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cfd4:	8952      	ldrh	r2, [r2, #10]
 800cfd6:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfda:	fb01 f202 	mul.w	r2, r1, r2
 800cfde:	1a9b      	subs	r3, r3, r2
 800cfe0:	68fa      	ldr	r2, [r7, #12]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	f003 0301 	and.w	r3, r3, #1
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00d      	beq.n	800d00c <put_fat+0xc6>
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	b25b      	sxtb	r3, r3
 800cff6:	f003 030f 	and.w	r3, r3, #15
 800cffa:	b25a      	sxtb	r2, r3
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	011b      	lsls	r3, r3, #4
 800d002:	b25b      	sxtb	r3, r3
 800d004:	4313      	orrs	r3, r2
 800d006:	b25b      	sxtb	r3, r3
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	e001      	b.n	800d010 <put_fat+0xca>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	69ba      	ldr	r2, [r7, #24]
 800d012:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d01a:	2201      	movs	r2, #1
 800d01c:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d024:	6a1a      	ldr	r2, [r3, #32]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d02c:	895b      	ldrh	r3, [r3, #10]
 800d02e:	4619      	mov	r1, r3
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	fbb3 f3f1 	udiv	r3, r3, r1
 800d036:	4413      	add	r3, r2
 800d038:	4619      	mov	r1, r3
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f7ff fd72 	bl	800cb24 <move_window>
 800d040:	4603      	mov	r3, r0
 800d042:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d044:	7ffb      	ldrb	r3, [r7, #31]
 800d046:	2b00      	cmp	r3, #0
 800d048:	f040 80c6 	bne.w	800d1d8 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d052:	895b      	ldrh	r3, [r3, #10]
 800d054:	461a      	mov	r2, r3
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	fbb3 f1f2 	udiv	r1, r3, r2
 800d05c:	fb01 f202 	mul.w	r2, r1, r2
 800d060:	1a9b      	subs	r3, r3, r2
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	4413      	add	r3, r2
 800d066:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	f003 0301 	and.w	r3, r3, #1
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d003      	beq.n	800d07a <put_fat+0x134>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	091b      	lsrs	r3, r3, #4
 800d076:	b2db      	uxtb	r3, r3
 800d078:	e00e      	b.n	800d098 <put_fat+0x152>
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	b25b      	sxtb	r3, r3
 800d080:	f023 030f 	bic.w	r3, r3, #15
 800d084:	b25a      	sxtb	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	0a1b      	lsrs	r3, r3, #8
 800d08a:	b25b      	sxtb	r3, r3
 800d08c:	f003 030f 	and.w	r3, r3, #15
 800d090:	b25b      	sxtb	r3, r3
 800d092:	4313      	orrs	r3, r2
 800d094:	b25b      	sxtb	r3, r3
 800d096:	b2db      	uxtb	r3, r3
 800d098:	69ba      	ldr	r2, [r7, #24]
 800d09a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	711a      	strb	r2, [r3, #4]
			break;
 800d0a6:	e09c      	b.n	800d1e2 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0ae:	6a1a      	ldr	r2, [r3, #32]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0b6:	895b      	ldrh	r3, [r3, #10]
 800d0b8:	085b      	lsrs	r3, r3, #1
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	4619      	mov	r1, r3
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d0c4:	4413      	add	r3, r2
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	68f8      	ldr	r0, [r7, #12]
 800d0ca:	f7ff fd2b 	bl	800cb24 <move_window>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0d2:	7ffb      	ldrb	r3, [r7, #31]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	f040 8081 	bne.w	800d1dc <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	005b      	lsls	r3, r3, #1
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d0e4:	8952      	ldrh	r2, [r2, #10]
 800d0e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0ea:	fb01 f202 	mul.w	r2, r1, r2
 800d0ee:	1a9b      	subs	r3, r3, r2
 800d0f0:	68fa      	ldr	r2, [r7, #12]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	b2da      	uxtb	r2, r3
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	701a      	strb	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	b29b      	uxth	r3, r3
 800d102:	0a1b      	lsrs	r3, r3, #8
 800d104:	b29a      	uxth	r2, r3
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	3301      	adds	r3, #1
 800d10a:	b2d2      	uxtb	r2, r2
 800d10c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d114:	2201      	movs	r2, #1
 800d116:	711a      	strb	r2, [r3, #4]
			break;
 800d118:	e063      	b.n	800d1e2 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d120:	6a1a      	ldr	r2, [r3, #32]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d128:	895b      	ldrh	r3, [r3, #10]
 800d12a:	089b      	lsrs	r3, r3, #2
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	4619      	mov	r1, r3
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	fbb3 f3f1 	udiv	r3, r3, r1
 800d136:	4413      	add	r3, r2
 800d138:	4619      	mov	r1, r3
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f7ff fcf2 	bl	800cb24 <move_window>
 800d140:	4603      	mov	r3, r0
 800d142:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d144:	7ffb      	ldrb	r3, [r7, #31]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d14a      	bne.n	800d1e0 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	68fa      	ldr	r2, [r7, #12]
 800d150:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d154:	8952      	ldrh	r2, [r2, #10]
 800d156:	fbb3 f1f2 	udiv	r1, r3, r2
 800d15a:	fb01 f202 	mul.w	r2, r1, r2
 800d15e:	1a9b      	subs	r3, r3, r2
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	4413      	add	r3, r2
 800d164:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	3303      	adds	r3, #3
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	061a      	lsls	r2, r3, #24
 800d16e:	69bb      	ldr	r3, [r7, #24]
 800d170:	3302      	adds	r3, #2
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	041b      	lsls	r3, r3, #16
 800d176:	4313      	orrs	r3, r2
 800d178:	69ba      	ldr	r2, [r7, #24]
 800d17a:	3201      	adds	r2, #1
 800d17c:	7812      	ldrb	r2, [r2, #0]
 800d17e:	0212      	lsls	r2, r2, #8
 800d180:	4313      	orrs	r3, r2
 800d182:	69ba      	ldr	r2, [r7, #24]
 800d184:	7812      	ldrb	r2, [r2, #0]
 800d186:	4313      	orrs	r3, r2
 800d188:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	4313      	orrs	r3, r2
 800d190:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	b2da      	uxtb	r2, r3
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	701a      	strb	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	0a1b      	lsrs	r3, r3, #8
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	b2d2      	uxtb	r2, r2
 800d1a8:	701a      	strb	r2, [r3, #0]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	0c1a      	lsrs	r2, r3, #16
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	3302      	adds	r3, #2
 800d1b2:	b2d2      	uxtb	r2, r2
 800d1b4:	701a      	strb	r2, [r3, #0]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	0e1a      	lsrs	r2, r3, #24
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	3303      	adds	r3, #3
 800d1be:	b2d2      	uxtb	r2, r2
 800d1c0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	711a      	strb	r2, [r3, #4]
			break;
 800d1cc:	e009      	b.n	800d1e2 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800d1ce:	2302      	movs	r3, #2
 800d1d0:	77fb      	strb	r3, [r7, #31]
 800d1d2:	e006      	b.n	800d1e2 <put_fat+0x29c>
			if (res != FR_OK) break;
 800d1d4:	bf00      	nop
 800d1d6:	e004      	b.n	800d1e2 <put_fat+0x29c>
			if (res != FR_OK) break;
 800d1d8:	bf00      	nop
 800d1da:	e002      	b.n	800d1e2 <put_fat+0x29c>
			if (res != FR_OK) break;
 800d1dc:	bf00      	nop
 800d1de:	e000      	b.n	800d1e2 <put_fat+0x29c>
			if (res != FR_OK) break;
 800d1e0:	bf00      	nop
		}
	}

	return res;
 800d1e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3720      	adds	r7, #32
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d906      	bls.n	800d20a <remove_chain+0x1e>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	429a      	cmp	r2, r3
 800d208:	d302      	bcc.n	800d210 <remove_chain+0x24>
		res = FR_INT_ERR;
 800d20a:	2302      	movs	r3, #2
 800d20c:	73fb      	strb	r3, [r7, #15]
 800d20e:	e049      	b.n	800d2a4 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800d210:	2300      	movs	r3, #0
 800d212:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800d214:	e03b      	b.n	800d28e <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800d216:	6839      	ldr	r1, [r7, #0]
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f7ff fd98 	bl	800cd4e <get_fat>
 800d21e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d03b      	beq.n	800d29e <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d102      	bne.n	800d232 <remove_chain+0x46>
 800d22c:	2302      	movs	r3, #2
 800d22e:	73fb      	strb	r3, [r7, #15]
 800d230:	e038      	b.n	800d2a4 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d238:	d102      	bne.n	800d240 <remove_chain+0x54>
 800d23a:	2301      	movs	r3, #1
 800d23c:	73fb      	strb	r3, [r7, #15]
 800d23e:	e031      	b.n	800d2a4 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800d240:	2200      	movs	r2, #0
 800d242:	6839      	ldr	r1, [r7, #0]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7ff fe7e 	bl	800cf46 <put_fat>
 800d24a:	4603      	mov	r3, r0
 800d24c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800d24e:	7bfb      	ldrb	r3, [r7, #15]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d126      	bne.n	800d2a2 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d260:	d013      	beq.n	800d28a <remove_chain+0x9e>
				fs->free_clust++;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	3301      	adds	r3, #1
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d272:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d27a:	795b      	ldrb	r3, [r3, #5]
 800d27c:	f043 0301 	orr.w	r3, r3, #1
 800d280:	b2da      	uxtb	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d288:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d294:	695b      	ldr	r3, [r3, #20]
 800d296:	683a      	ldr	r2, [r7, #0]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d3bc      	bcc.n	800d216 <remove_chain+0x2a>
 800d29c:	e002      	b.n	800d2a4 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800d29e:	bf00      	nop
 800d2a0:	e000      	b.n	800d2a4 <remove_chain+0xb8>
			if (res != FR_OK) break;
 800d2a2:	bf00      	nop
		}
	}

	return res;
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b086      	sub	sp, #24
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
 800d2b6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d111      	bne.n	800d2e2 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d006      	beq.n	800d2dc <create_chain+0x2e>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2d4:	695b      	ldr	r3, [r3, #20]
 800d2d6:	693a      	ldr	r2, [r7, #16]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d31d      	bcc.n	800d318 <create_chain+0x6a>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	613b      	str	r3, [r7, #16]
 800d2e0:	e01a      	b.n	800d318 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff fd32 	bl	800cd4e <get_fat>
 800d2ea:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d801      	bhi.n	800d2f6 <create_chain+0x48>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e07f      	b.n	800d3f6 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2fc:	d101      	bne.n	800d302 <create_chain+0x54>
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	e079      	b.n	800d3f6 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d308:	695b      	ldr	r3, [r3, #20]
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d201      	bcs.n	800d314 <create_chain+0x66>
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	e070      	b.n	800d3f6 <create_chain+0x148>
		scl = clst;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	3301      	adds	r3, #1
 800d320:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d328:	695b      	ldr	r3, [r3, #20]
 800d32a:	697a      	ldr	r2, [r7, #20]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d307      	bcc.n	800d340 <create_chain+0x92>
			ncl = 2;
 800d330:	2302      	movs	r3, #2
 800d332:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800d334:	697a      	ldr	r2, [r7, #20]
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d901      	bls.n	800d340 <create_chain+0x92>
 800d33c:	2300      	movs	r3, #0
 800d33e:	e05a      	b.n	800d3f6 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800d340:	6979      	ldr	r1, [r7, #20]
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7ff fd03 	bl	800cd4e <get_fat>
 800d348:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00e      	beq.n	800d36e <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d356:	d002      	beq.n	800d35e <create_chain+0xb0>
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d101      	bne.n	800d362 <create_chain+0xb4>
			return cs;
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	e049      	b.n	800d3f6 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800d362:	697a      	ldr	r2, [r7, #20]
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	429a      	cmp	r2, r3
 800d368:	d1d8      	bne.n	800d31c <create_chain+0x6e>
 800d36a:	2300      	movs	r3, #0
 800d36c:	e043      	b.n	800d3f6 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800d36e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800d370:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800d374:	6979      	ldr	r1, [r7, #20]
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7ff fde5 	bl	800cf46 <put_fat>
 800d37c:	4603      	mov	r3, r0
 800d37e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800d380:	7bfb      	ldrb	r3, [r7, #15]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d109      	bne.n	800d39a <create_chain+0xec>
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d006      	beq.n	800d39a <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800d38c:	697a      	ldr	r2, [r7, #20]
 800d38e:	6839      	ldr	r1, [r7, #0]
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f7ff fdd8 	bl	800cf46 <put_fat>
 800d396:	4603      	mov	r3, r0
 800d398:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800d39a:	7bfb      	ldrb	r3, [r7, #15]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d121      	bne.n	800d3e4 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b8:	d01c      	beq.n	800d3f4 <create_chain+0x146>
			fs->free_clust--;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d3ca:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3d2:	795b      	ldrb	r3, [r3, #5]
 800d3d4:	f043 0301 	orr.w	r3, r3, #1
 800d3d8:	b2da      	uxtb	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3e0:	715a      	strb	r2, [r3, #5]
 800d3e2:	e007      	b.n	800d3f4 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800d3e4:	7bfb      	ldrb	r3, [r7, #15]
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d102      	bne.n	800d3f0 <create_chain+0x142>
 800d3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ee:	e000      	b.n	800d3f2 <create_chain+0x144>
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800d3f4:	697b      	ldr	r3, [r7, #20]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3718      	adds	r7, #24
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}

0800d3fe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800d3fe:	b480      	push	{r7}
 800d400:	b087      	sub	sp, #28
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d410:	3304      	adds	r3, #4
 800d412:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d420:	895b      	ldrh	r3, [r3, #10]
 800d422:	461a      	mov	r2, r3
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	fbb3 f3f2 	udiv	r3, r3, r2
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d430:	6812      	ldr	r2, [r2, #0]
 800d432:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d436:	7892      	ldrb	r2, [r2, #2]
 800d438:	fbb3 f3f2 	udiv	r3, r3, r2
 800d43c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	1d1a      	adds	r2, r3, #4
 800d442:	613a      	str	r2, [r7, #16]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d101      	bne.n	800d452 <clmt_clust+0x54>
 800d44e:	2300      	movs	r3, #0
 800d450:	e010      	b.n	800d474 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800d452:	697a      	ldr	r2, [r7, #20]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	429a      	cmp	r2, r3
 800d458:	d307      	bcc.n	800d46a <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800d45a:	697a      	ldr	r2, [r7, #20]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	1ad3      	subs	r3, r2, r3
 800d460:	617b      	str	r3, [r7, #20]
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	3304      	adds	r3, #4
 800d466:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d468:	e7e9      	b.n	800d43e <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800d46a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	4413      	add	r3, r2
}
 800d474:	4618      	mov	r0, r3
 800d476:	371c      	adds	r7, #28
 800d478:	46bd      	mov	sp, r7
 800d47a:	bc80      	pop	{r7}
 800d47c:	4770      	bx	lr

0800d47e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b086      	sub	sp, #24
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
 800d486:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	b29a      	uxth	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d492:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d009      	beq.n	800d4b8 <dir_sdi+0x3a>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4b0:	695b      	ldr	r3, [r3, #20]
 800d4b2:	697a      	ldr	r2, [r7, #20]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d301      	bcc.n	800d4bc <dir_sdi+0x3e>
		return FR_INT_ERR;
 800d4b8:	2302      	movs	r3, #2
 800d4ba:	e0aa      	b.n	800d612 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d110      	bne.n	800d4e4 <dir_sdi+0x66>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	d107      	bne.n	800d4e4 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e2:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d115      	bne.n	800d516 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4f6:	891b      	ldrh	r3, [r3, #8]
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d301      	bcc.n	800d504 <dir_sdi+0x86>
			return FR_INT_ERR;
 800d500:	2302      	movs	r3, #2
 800d502:	e086      	b.n	800d612 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d512:	613b      	str	r3, [r7, #16]
 800d514:	e043      	b.n	800d59e <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d522:	895b      	ldrh	r3, [r3, #10]
 800d524:	095b      	lsrs	r3, r3, #5
 800d526:	b29b      	uxth	r3, r3
 800d528:	461a      	mov	r2, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d536:	789b      	ldrb	r3, [r3, #2]
 800d538:	fb02 f303 	mul.w	r3, r2, r3
 800d53c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800d53e:	e021      	b.n	800d584 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	6979      	ldr	r1, [r7, #20]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7ff fbff 	bl	800cd4e <get_fat>
 800d550:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d558:	d101      	bne.n	800d55e <dir_sdi+0xe0>
 800d55a:	2301      	movs	r3, #1
 800d55c:	e059      	b.n	800d612 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d909      	bls.n	800d578 <dir_sdi+0xfa>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	429a      	cmp	r2, r3
 800d576:	d301      	bcc.n	800d57c <dir_sdi+0xfe>
				return FR_INT_ERR;
 800d578:	2302      	movs	r3, #2
 800d57a:	e04a      	b.n	800d612 <dir_sdi+0x194>
			idx -= ic;
 800d57c:	683a      	ldr	r2, [r7, #0]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	1ad3      	subs	r3, r2, r3
 800d582:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800d584:	683a      	ldr	r2, [r7, #0]
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d2d9      	bcs.n	800d540 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6979      	ldr	r1, [r7, #20]
 800d596:	4618      	mov	r0, r3
 800d598:	f7ff fbb5 	bl	800cd06 <clust2sect>
 800d59c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d101      	bne.n	800d5b4 <dir_sdi+0x136>
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	e02e      	b.n	800d612 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5c0:	895b      	ldrh	r3, [r3, #10]
 800d5c2:	095b      	lsrs	r3, r3, #5
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d5d8:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5f0:	895b      	ldrh	r3, [r3, #10]
 800d5f2:	095b      	lsrs	r3, r3, #5
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5fe:	fb01 f202 	mul.w	r2, r1, r2
 800d602:	1a9b      	subs	r3, r3, r2
 800d604:	015b      	lsls	r3, r3, #5
 800d606:	4403      	add	r3, r0
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d60e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	3718      	adds	r7, #24
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d61a:	b590      	push	{r4, r7, lr}
 800d61c:	b087      	sub	sp, #28
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d62a:	88db      	ldrh	r3, [r3, #6]
 800d62c:	3301      	adds	r3, #1
 800d62e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	b29b      	uxth	r3, r3
 800d634:	2b00      	cmp	r3, #0
 800d636:	d005      	beq.n	800d644 <dir_next+0x2a>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d63e:	691b      	ldr	r3, [r3, #16]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d101      	bne.n	800d648 <dir_next+0x2e>
		return FR_NO_FILE;
 800d644:	2304      	movs	r3, #4
 800d646:	e12e      	b.n	800d8a6 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d654:	895b      	ldrh	r3, [r3, #10]
 800d656:	095b      	lsrs	r3, r3, #5
 800d658:	b29b      	uxth	r3, r3
 800d65a:	461a      	mov	r2, r3
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d662:	fb01 f202 	mul.w	r2, r1, r2
 800d666:	1a9b      	subs	r3, r3, r2
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f040 80fa 	bne.w	800d862 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d674:	691b      	ldr	r3, [r3, #16]
 800d676:	3301      	adds	r3, #1
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d67e:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d686:	68db      	ldr	r3, [r3, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10d      	bne.n	800d6a8 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d698:	891b      	ldrh	r3, [r3, #8]
 800d69a:	461a      	mov	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	f0c0 80df 	bcc.w	800d862 <dir_next+0x248>
				return FR_NO_FILE;
 800d6a4:	2304      	movs	r3, #4
 800d6a6:	e0fe      	b.n	800d8a6 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b4:	895b      	ldrh	r3, [r3, #10]
 800d6b6:	095b      	lsrs	r3, r3, #5
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d6c8:	6812      	ldr	r2, [r2, #0]
 800d6ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d6ce:	7892      	ldrb	r2, [r2, #2]
 800d6d0:	3a01      	subs	r2, #1
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f040 80c4 	bne.w	800d862 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	4610      	mov	r0, r2
 800d6ee:	f7ff fb2e 	bl	800cd4e <get_fat>
 800d6f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d801      	bhi.n	800d6fe <dir_next+0xe4>
 800d6fa:	2302      	movs	r3, #2
 800d6fc:	e0d3      	b.n	800d8a6 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d704:	d101      	bne.n	800d70a <dir_next+0xf0>
 800d706:	2301      	movs	r3, #1
 800d708:	e0cd      	b.n	800d8a6 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d716:	695b      	ldr	r3, [r3, #20]
 800d718:	697a      	ldr	r2, [r7, #20]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	f0c0 808e 	bcc.w	800d83c <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d101      	bne.n	800d72a <dir_next+0x110>
 800d726:	2304      	movs	r3, #4
 800d728:	e0bd      	b.n	800d8a6 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	4619      	mov	r1, r3
 800d73c:	4610      	mov	r0, r2
 800d73e:	f7ff fdb6 	bl	800d2ae <create_chain>
 800d742:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d101      	bne.n	800d74e <dir_next+0x134>
 800d74a:	2307      	movs	r3, #7
 800d74c:	e0ab      	b.n	800d8a6 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	2b01      	cmp	r3, #1
 800d752:	d101      	bne.n	800d758 <dir_next+0x13e>
 800d754:	2302      	movs	r3, #2
 800d756:	e0a6      	b.n	800d8a6 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d75e:	d101      	bne.n	800d764 <dir_next+0x14a>
 800d760:	2301      	movs	r3, #1
 800d762:	e0a0      	b.n	800d8a6 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7ff f987 	bl	800ca80 <sync_window>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d001      	beq.n	800d77c <dir_next+0x162>
 800d778:	2301      	movs	r3, #1
 800d77a:	e094      	b.n	800d8a6 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4618      	mov	r0, r3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d792:	895b      	ldrh	r3, [r3, #10]
 800d794:	461a      	mov	r2, r3
 800d796:	2100      	movs	r1, #0
 800d798:	f7fe ff5a 	bl	800c650 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7aa:	681c      	ldr	r4, [r3, #0]
 800d7ac:	6979      	ldr	r1, [r7, #20]
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	f7ff faa9 	bl	800cd06 <clust2sect>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800d7ba:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800d7bc:	2300      	movs	r3, #0
 800d7be:	613b      	str	r3, [r7, #16]
 800d7c0:	e021      	b.n	800d806 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7ff f950 	bl	800ca80 <sync_window>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d001      	beq.n	800d7ea <dir_next+0x1d0>
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e05d      	b.n	800d8a6 <dir_next+0x28c>
						dp->fs->winsect++;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800d7f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d7f8:	3201      	adds	r2, #1
 800d7fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7fe:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	3301      	adds	r3, #1
 800d804:	613b      	str	r3, [r7, #16]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d812:	789b      	ldrb	r3, [r3, #2]
 800d814:	461a      	mov	r2, r3
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	4293      	cmp	r3, r2
 800d81a:	d3d2      	bcc.n	800d7c2 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	1acb      	subs	r3, r1, r3
 800d836:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d83a:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d842:	461a      	mov	r2, r3
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	6979      	ldr	r1, [r7, #20]
 800d852:	4618      	mov	r0, r3
 800d854:	f7ff fa57 	bl	800cd06 <clust2sect>
 800d858:	4602      	mov	r2, r0
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d860:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	b29a      	uxth	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d86c:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4618      	mov	r0, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d884:	895b      	ldrh	r3, [r3, #10]
 800d886:	095b      	lsrs	r3, r3, #5
 800d888:	b29b      	uxth	r3, r3
 800d88a:	461a      	mov	r2, r3
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d892:	fb01 f202 	mul.w	r2, r1, r2
 800d896:	1a9b      	subs	r3, r3, r2
 800d898:	015b      	lsls	r3, r3, #5
 800d89a:	4403      	add	r3, r0
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d8a2:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	371c      	adds	r7, #28
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd90      	pop	{r4, r7, pc}

0800d8ae <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b084      	sub	sp, #16
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
 800d8b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7ff fddf 	bl	800d47e <dir_sdi>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d8c4:	7bfb      	ldrb	r3, [r7, #15]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d135      	bne.n	800d936 <dir_alloc+0x88>
		n = 0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8dc:	691b      	ldr	r3, [r3, #16]
 800d8de:	4619      	mov	r1, r3
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	f7ff f91f 	bl	800cb24 <move_window>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800d8ea:	7bfb      	ldrb	r3, [r7, #15]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d121      	bne.n	800d934 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2be5      	cmp	r3, #229	; 0xe5
 800d8fc:	d006      	beq.n	800d90c <dir_alloc+0x5e>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d107      	bne.n	800d91c <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	3301      	adds	r3, #1
 800d910:	60bb      	str	r3, [r7, #8]
 800d912:	68ba      	ldr	r2, [r7, #8]
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	429a      	cmp	r2, r3
 800d918:	d102      	bne.n	800d920 <dir_alloc+0x72>
 800d91a:	e00c      	b.n	800d936 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d91c:	2300      	movs	r3, #0
 800d91e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800d920:	2101      	movs	r1, #1
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f7ff fe79 	bl	800d61a <dir_next>
 800d928:	4603      	mov	r3, r0
 800d92a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800d92c:	7bfb      	ldrb	r3, [r7, #15]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d0cd      	beq.n	800d8ce <dir_alloc+0x20>
 800d932:	e000      	b.n	800d936 <dir_alloc+0x88>
			if (res != FR_OK) break;
 800d934:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d936:	7bfb      	ldrb	r3, [r7, #15]
 800d938:	2b04      	cmp	r3, #4
 800d93a:	d101      	bne.n	800d940 <dir_alloc+0x92>
 800d93c:	2307      	movs	r3, #7
 800d93e:	73fb      	strb	r3, [r7, #15]
	return res;
 800d940:	7bfb      	ldrb	r3, [r7, #15]
}
 800d942:	4618      	mov	r0, r3
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800d94a:	b480      	push	{r7}
 800d94c:	b085      	sub	sp, #20
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	331b      	adds	r3, #27
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	021b      	lsls	r3, r3, #8
 800d95c:	b21a      	sxth	r2, r3
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	331a      	adds	r3, #26
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	b21b      	sxth	r3, r3
 800d966:	4313      	orrs	r3, r2
 800d968:	b21b      	sxth	r3, r3
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	2b03      	cmp	r3, #3
 800d978:	d10f      	bne.n	800d99a <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	3315      	adds	r3, #21
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	021b      	lsls	r3, r3, #8
 800d982:	b21a      	sxth	r2, r3
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	3314      	adds	r3, #20
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	b21b      	sxth	r3, r3
 800d98c:	4313      	orrs	r3, r2
 800d98e:	b21b      	sxth	r3, r3
 800d990:	b29b      	uxth	r3, r3
 800d992:	041b      	lsls	r3, r3, #16
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	4313      	orrs	r3, r2
 800d998:	60fb      	str	r3, [r7, #12]

	return cl;
 800d99a:	68fb      	ldr	r3, [r7, #12]
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3714      	adds	r7, #20
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bc80      	pop	{r7}
 800d9a4:	4770      	bx	lr

0800d9a6 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	b083      	sub	sp, #12
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
 800d9ae:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	331a      	adds	r3, #26
 800d9b4:	683a      	ldr	r2, [r7, #0]
 800d9b6:	b2d2      	uxtb	r2, r2
 800d9b8:	701a      	strb	r2, [r3, #0]
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	0a1b      	lsrs	r3, r3, #8
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	331b      	adds	r3, #27
 800d9c6:	b2d2      	uxtb	r2, r2
 800d9c8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	0c1a      	lsrs	r2, r3, #16
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	3314      	adds	r3, #20
 800d9d2:	b2d2      	uxtb	r2, r2
 800d9d4:	701a      	strb	r2, [r3, #0]
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	0c1b      	lsrs	r3, r3, #16
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	0a1b      	lsrs	r3, r3, #8
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	3315      	adds	r3, #21
 800d9e4:	b2d2      	uxtb	r2, r2
 800d9e6:	701a      	strb	r2, [r3, #0]
}
 800d9e8:	bf00      	nop
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bc80      	pop	{r7}
 800d9f0:	4770      	bx	lr
	...

0800d9f4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b086      	sub	sp, #24
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da06:	1e5a      	subs	r2, r3, #1
 800da08:	4613      	mov	r3, r2
 800da0a:	005b      	lsls	r3, r3, #1
 800da0c:	4413      	add	r3, r2
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4413      	add	r3, r2
 800da12:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800da14:	2300      	movs	r3, #0
 800da16:	613b      	str	r3, [r7, #16]
 800da18:	2301      	movs	r3, #1
 800da1a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800da1c:	4a2b      	ldr	r2, [pc, #172]	; (800dacc <cmp_lfn+0xd8>)
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	4413      	add	r3, r2
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	3301      	adds	r3, #1
 800da26:	683a      	ldr	r2, [r7, #0]
 800da28:	4413      	add	r3, r2
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	021b      	lsls	r3, r3, #8
 800da2e:	b21a      	sxth	r2, r3
 800da30:	4926      	ldr	r1, [pc, #152]	; (800dacc <cmp_lfn+0xd8>)
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	440b      	add	r3, r1
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	4619      	mov	r1, r3
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	440b      	add	r3, r1
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	b21b      	sxth	r3, r3
 800da42:	4313      	orrs	r3, r2
 800da44:	b21b      	sxth	r3, r3
 800da46:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800da48:	89fb      	ldrh	r3, [r7, #14]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d019      	beq.n	800da82 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800da4e:	89bb      	ldrh	r3, [r7, #12]
 800da50:	4618      	mov	r0, r3
 800da52:	f002 f9a5 	bl	800fda0 <ff_wtoupper>
 800da56:	4603      	mov	r3, r0
 800da58:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	2bfe      	cmp	r3, #254	; 0xfe
 800da5e:	d80e      	bhi.n	800da7e <cmp_lfn+0x8a>
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	1c5a      	adds	r2, r3, #1
 800da64:	617a      	str	r2, [r7, #20]
 800da66:	005b      	lsls	r3, r3, #1
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	4413      	add	r3, r2
 800da6c:	881b      	ldrh	r3, [r3, #0]
 800da6e:	4618      	mov	r0, r3
 800da70:	f002 f996 	bl	800fda0 <ff_wtoupper>
 800da74:	4603      	mov	r3, r0
 800da76:	461a      	mov	r2, r3
 800da78:	89fb      	ldrh	r3, [r7, #14]
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d008      	beq.n	800da90 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800da7e:	2300      	movs	r3, #0
 800da80:	e01f      	b.n	800dac2 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800da82:	89bb      	ldrh	r3, [r7, #12]
 800da84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da88:	4293      	cmp	r3, r2
 800da8a:	d001      	beq.n	800da90 <cmp_lfn+0x9c>
 800da8c:	2300      	movs	r3, #0
 800da8e:	e018      	b.n	800dac2 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	3301      	adds	r3, #1
 800da94:	613b      	str	r3, [r7, #16]
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	2b0c      	cmp	r3, #12
 800da9a:	d9bf      	bls.n	800da1c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d00b      	beq.n	800dac0 <cmp_lfn+0xcc>
 800daa8:	89fb      	ldrh	r3, [r7, #14]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d008      	beq.n	800dac0 <cmp_lfn+0xcc>
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	005b      	lsls	r3, r3, #1
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	4413      	add	r3, r2
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d001      	beq.n	800dac0 <cmp_lfn+0xcc>
		return 0;
 800dabc:	2300      	movs	r3, #0
 800dabe:	e000      	b.n	800dac2 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800dac0:	2301      	movs	r3, #1
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3718      	adds	r7, #24
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	08015c20 	.word	0x08015c20

0800dad0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b089      	sub	sp, #36	; 0x24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	4611      	mov	r1, r2
 800dadc:	461a      	mov	r2, r3
 800dade:	460b      	mov	r3, r1
 800dae0:	71fb      	strb	r3, [r7, #7]
 800dae2:	4613      	mov	r3, r2
 800dae4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	330d      	adds	r3, #13
 800daea:	79ba      	ldrb	r2, [r7, #6]
 800daec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	330b      	adds	r3, #11
 800daf2:	220f      	movs	r2, #15
 800daf4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	330c      	adds	r3, #12
 800dafa:	2200      	movs	r2, #0
 800dafc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	331a      	adds	r3, #26
 800db02:	2200      	movs	r2, #0
 800db04:	701a      	strb	r2, [r3, #0]
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	331b      	adds	r3, #27
 800db0a:	2200      	movs	r2, #0
 800db0c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800db0e:	79fb      	ldrb	r3, [r7, #7]
 800db10:	1e5a      	subs	r2, r3, #1
 800db12:	4613      	mov	r3, r2
 800db14:	005b      	lsls	r3, r3, #1
 800db16:	4413      	add	r3, r2
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	4413      	add	r3, r2
 800db1c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800db1e:	2300      	movs	r3, #0
 800db20:	82fb      	strh	r3, [r7, #22]
 800db22:	2300      	movs	r3, #0
 800db24:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800db26:	8afb      	ldrh	r3, [r7, #22]
 800db28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d007      	beq.n	800db40 <fit_lfn+0x70>
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	1c5a      	adds	r2, r3, #1
 800db34:	61fa      	str	r2, [r7, #28]
 800db36:	005b      	lsls	r3, r3, #1
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	4413      	add	r3, r2
 800db3c:	881b      	ldrh	r3, [r3, #0]
 800db3e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800db40:	4a1c      	ldr	r2, [pc, #112]	; (800dbb4 <fit_lfn+0xe4>)
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	4413      	add	r3, r2
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	461a      	mov	r2, r3
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	4413      	add	r3, r2
 800db4e:	8afa      	ldrh	r2, [r7, #22]
 800db50:	b2d2      	uxtb	r2, r2
 800db52:	701a      	strb	r2, [r3, #0]
 800db54:	8afb      	ldrh	r3, [r7, #22]
 800db56:	0a1b      	lsrs	r3, r3, #8
 800db58:	b299      	uxth	r1, r3
 800db5a:	4a16      	ldr	r2, [pc, #88]	; (800dbb4 <fit_lfn+0xe4>)
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	4413      	add	r3, r2
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	3301      	adds	r3, #1
 800db64:	68ba      	ldr	r2, [r7, #8]
 800db66:	4413      	add	r3, r2
 800db68:	b2ca      	uxtb	r2, r1
 800db6a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800db6c:	8afb      	ldrh	r3, [r7, #22]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d102      	bne.n	800db78 <fit_lfn+0xa8>
 800db72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db76:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	3301      	adds	r3, #1
 800db7c:	61bb      	str	r3, [r7, #24]
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	2b0c      	cmp	r3, #12
 800db82:	d9d0      	bls.n	800db26 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800db84:	8afb      	ldrh	r3, [r7, #22]
 800db86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d006      	beq.n	800db9c <fit_lfn+0xcc>
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	005b      	lsls	r3, r3, #1
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	4413      	add	r3, r2
 800db96:	881b      	ldrh	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d103      	bne.n	800dba4 <fit_lfn+0xd4>
 800db9c:	79fb      	ldrb	r3, [r7, #7]
 800db9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dba2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	79fa      	ldrb	r2, [r7, #7]
 800dba8:	701a      	strb	r2, [r3, #0]
}
 800dbaa:	bf00      	nop
 800dbac:	3724      	adds	r7, #36	; 0x24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bc80      	pop	{r7}
 800dbb2:	4770      	bx	lr
 800dbb4:	08015c20 	.word	0x08015c20

0800dbb8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b08c      	sub	sp, #48	; 0x30
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	607a      	str	r2, [r7, #4]
 800dbc4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800dbc6:	220b      	movs	r2, #11
 800dbc8:	68b9      	ldr	r1, [r7, #8]
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f7fe fd22 	bl	800c614 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	2b05      	cmp	r3, #5
 800dbd4:	d92b      	bls.n	800dc2e <gen_numname+0x76>
		sr = seq;
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800dbda:	e022      	b.n	800dc22 <gen_numname+0x6a>
			wc = *lfn++;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	1c9a      	adds	r2, r3, #2
 800dbe0:	607a      	str	r2, [r7, #4]
 800dbe2:	881b      	ldrh	r3, [r3, #0]
 800dbe4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbea:	e017      	b.n	800dc1c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	005a      	lsls	r2, r3, #1
 800dbf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbf2:	f003 0301 	and.w	r3, r3, #1
 800dbf6:	4413      	add	r3, r2
 800dbf8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800dbfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbfc:	085b      	lsrs	r3, r3, #1
 800dbfe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d005      	beq.n	800dc16 <gen_numname+0x5e>
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800dc10:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800dc14:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800dc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc18:	3301      	adds	r3, #1
 800dc1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1e:	2b0f      	cmp	r3, #15
 800dc20:	d9e4      	bls.n	800dbec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	881b      	ldrh	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1d8      	bne.n	800dbdc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dc2e:	2307      	movs	r3, #7
 800dc30:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	f003 030f 	and.w	r3, r3, #15
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	3330      	adds	r3, #48	; 0x30
 800dc3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800dc42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc46:	2b39      	cmp	r3, #57	; 0x39
 800dc48:	d904      	bls.n	800dc54 <gen_numname+0x9c>
 800dc4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc4e:	3307      	adds	r3, #7
 800dc50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800dc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc56:	1e5a      	subs	r2, r3, #1
 800dc58:	62ba      	str	r2, [r7, #40]	; 0x28
 800dc5a:	3330      	adds	r3, #48	; 0x30
 800dc5c:	443b      	add	r3, r7
 800dc5e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dc62:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	091b      	lsrs	r3, r3, #4
 800dc6a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1df      	bne.n	800dc32 <gen_numname+0x7a>
	ns[i] = '~';
 800dc72:	f107 0214 	add.w	r2, r7, #20
 800dc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc78:	4413      	add	r3, r2
 800dc7a:	227e      	movs	r2, #126	; 0x7e
 800dc7c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800dc7e:	2300      	movs	r3, #0
 800dc80:	627b      	str	r3, [r7, #36]	; 0x24
 800dc82:	e002      	b.n	800dc8a <gen_numname+0xd2>
 800dc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc86:	3301      	adds	r3, #1
 800dc88:	627b      	str	r3, [r7, #36]	; 0x24
 800dc8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d205      	bcs.n	800dc9e <gen_numname+0xe6>
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc96:	4413      	add	r3, r2
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	2b20      	cmp	r3, #32
 800dc9c:	d1f2      	bne.n	800dc84 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca0:	2b07      	cmp	r3, #7
 800dca2:	d807      	bhi.n	800dcb4 <gen_numname+0xfc>
 800dca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	62ba      	str	r2, [r7, #40]	; 0x28
 800dcaa:	3330      	adds	r3, #48	; 0x30
 800dcac:	443b      	add	r3, r7
 800dcae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800dcb2:	e000      	b.n	800dcb6 <gen_numname+0xfe>
 800dcb4:	2120      	movs	r1, #32
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb8:	1c5a      	adds	r2, r3, #1
 800dcba:	627a      	str	r2, [r7, #36]	; 0x24
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	460a      	mov	r2, r1
 800dcc2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800dcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc6:	2b07      	cmp	r3, #7
 800dcc8:	d9e9      	bls.n	800dc9e <gen_numname+0xe6>
}
 800dcca:	bf00      	nop
 800dccc:	bf00      	nop
 800dcce:	3730      	adds	r7, #48	; 0x30
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800dce0:	230b      	movs	r3, #11
 800dce2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800dce4:	7bfb      	ldrb	r3, [r7, #15]
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	0852      	lsrs	r2, r2, #1
 800dcea:	01db      	lsls	r3, r3, #7
 800dcec:	4313      	orrs	r3, r2
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	1c59      	adds	r1, r3, #1
 800dcf4:	6079      	str	r1, [r7, #4]
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	73fb      	strb	r3, [r7, #15]
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	60bb      	str	r3, [r7, #8]
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d1ed      	bne.n	800dce4 <sum_sfn+0x10>
	return sum;
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3714      	adds	r7, #20
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bc80      	pop	{r7}
 800dd12:	4770      	bx	lr

0800dd14 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b086      	sub	sp, #24
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7ff fbad 	bl	800d47e <dir_sdi>
 800dd24:	4603      	mov	r3, r0
 800dd26:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dd28:	7dfb      	ldrb	r3, [r7, #23]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d001      	beq.n	800dd32 <dir_find+0x1e>
 800dd2e:	7dfb      	ldrb	r3, [r7, #23]
 800dd30:	e0b8      	b.n	800dea4 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800dd32:	23ff      	movs	r3, #255	; 0xff
 800dd34:	753b      	strb	r3, [r7, #20]
 800dd36:	7d3b      	ldrb	r3, [r7, #20]
 800dd38:	757b      	strb	r3, [r7, #21]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd44:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	4619      	mov	r1, r3
 800dd58:	4610      	mov	r0, r2
 800dd5a:	f7fe fee3 	bl	800cb24 <move_window>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dd62:	7dfb      	ldrb	r3, [r7, #23]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f040 8097 	bne.w	800de98 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd70:	695b      	ldr	r3, [r3, #20]
 800dd72:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dd7a:	7dbb      	ldrb	r3, [r7, #22]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d102      	bne.n	800dd86 <dir_find+0x72>
 800dd80:	2304      	movs	r3, #4
 800dd82:	75fb      	strb	r3, [r7, #23]
 800dd84:	e08d      	b.n	800dea2 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	330b      	adds	r3, #11
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd90:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dd92:	7dbb      	ldrb	r3, [r7, #22]
 800dd94:	2be5      	cmp	r3, #229	; 0xe5
 800dd96:	d007      	beq.n	800dda8 <dir_find+0x94>
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
 800dd9a:	f003 0308 	and.w	r3, r3, #8
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00b      	beq.n	800ddba <dir_find+0xa6>
 800dda2:	7bfb      	ldrb	r3, [r7, #15]
 800dda4:	2b0f      	cmp	r3, #15
 800dda6:	d008      	beq.n	800ddba <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800dda8:	23ff      	movs	r3, #255	; 0xff
 800ddaa:	757b      	strb	r3, [r7, #21]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddb6:	849a      	strh	r2, [r3, #36]	; 0x24
 800ddb8:	e063      	b.n	800de82 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ddba:	7bfb      	ldrb	r3, [r7, #15]
 800ddbc:	2b0f      	cmp	r3, #15
 800ddbe:	d137      	bne.n	800de30 <dir_find+0x11c>
				if (dp->lfn) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddc6:	6a1b      	ldr	r3, [r3, #32]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d05a      	beq.n	800de82 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ddcc:	7dbb      	ldrb	r3, [r7, #22]
 800ddce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d010      	beq.n	800ddf8 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	7b5b      	ldrb	r3, [r3, #13]
 800ddda:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800dddc:	7dbb      	ldrb	r3, [r7, #22]
 800ddde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dde2:	75bb      	strb	r3, [r7, #22]
 800dde4:	7dbb      	ldrb	r3, [r7, #22]
 800dde6:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddee:	88da      	ldrh	r2, [r3, #6]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddf6:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ddf8:	7dba      	ldrb	r2, [r7, #22]
 800ddfa:	7d7b      	ldrb	r3, [r7, #21]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d114      	bne.n	800de2a <dir_find+0x116>
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	330d      	adds	r3, #13
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	7d3a      	ldrb	r2, [r7, #20]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d10e      	bne.n	800de2a <dir_find+0x116>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de12:	6a1b      	ldr	r3, [r3, #32]
 800de14:	6939      	ldr	r1, [r7, #16]
 800de16:	4618      	mov	r0, r3
 800de18:	f7ff fdec 	bl	800d9f4 <cmp_lfn>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d003      	beq.n	800de2a <dir_find+0x116>
 800de22:	7d7b      	ldrb	r3, [r7, #21]
 800de24:	3b01      	subs	r3, #1
 800de26:	b2db      	uxtb	r3, r3
 800de28:	e000      	b.n	800de2c <dir_find+0x118>
 800de2a:	23ff      	movs	r3, #255	; 0xff
 800de2c:	757b      	strb	r3, [r7, #21]
 800de2e:	e028      	b.n	800de82 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800de30:	7d7b      	ldrb	r3, [r7, #21]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d107      	bne.n	800de46 <dir_find+0x132>
 800de36:	6938      	ldr	r0, [r7, #16]
 800de38:	f7ff ff4c 	bl	800dcd4 <sum_sfn>
 800de3c:	4603      	mov	r3, r0
 800de3e:	461a      	mov	r2, r3
 800de40:	7d3b      	ldrb	r3, [r7, #20]
 800de42:	4293      	cmp	r3, r2
 800de44:	d02a      	beq.n	800de9c <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de4c:	699b      	ldr	r3, [r3, #24]
 800de4e:	330b      	adds	r3, #11
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	f003 0301 	and.w	r3, r3, #1
 800de56:	2b00      	cmp	r3, #0
 800de58:	d10b      	bne.n	800de72 <dir_find+0x15e>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de60:	699b      	ldr	r3, [r3, #24]
 800de62:	220b      	movs	r2, #11
 800de64:	4619      	mov	r1, r3
 800de66:	6938      	ldr	r0, [r7, #16]
 800de68:	f7fe fc0c 	bl	800c684 <mem_cmp>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d016      	beq.n	800dea0 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800de72:	23ff      	movs	r3, #255	; 0xff
 800de74:	757b      	strb	r3, [r7, #21]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de80:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800de82:	2100      	movs	r1, #0
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7ff fbc8 	bl	800d61a <dir_next>
 800de8a:	4603      	mov	r3, r0
 800de8c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800de8e:	7dfb      	ldrb	r3, [r7, #23]
 800de90:	2b00      	cmp	r3, #0
 800de92:	f43f af58 	beq.w	800dd46 <dir_find+0x32>
 800de96:	e004      	b.n	800dea2 <dir_find+0x18e>
		if (res != FR_OK) break;
 800de98:	bf00      	nop
 800de9a:	e002      	b.n	800dea2 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800de9c:	bf00      	nop
 800de9e:	e000      	b.n	800dea2 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800dea0:	bf00      	nop

	return res;
 800dea2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3718      	adds	r7, #24
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b08c      	sub	sp, #48	; 0x30
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deba:	699b      	ldr	r3, [r3, #24]
 800debc:	623b      	str	r3, [r7, #32]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dec4:	6a1b      	ldr	r3, [r3, #32]
 800dec6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800dec8:	f107 030c 	add.w	r3, r7, #12
 800decc:	220c      	movs	r2, #12
 800dece:	6a39      	ldr	r1, [r7, #32]
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fe fb9f 	bl	800c614 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ded6:	7dfb      	ldrb	r3, [r7, #23]
 800ded8:	f003 0301 	and.w	r3, r3, #1
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d03b      	beq.n	800df58 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800dee0:	6a3b      	ldr	r3, [r7, #32]
 800dee2:	330b      	adds	r3, #11
 800dee4:	2200      	movs	r2, #0
 800dee6:	701a      	strb	r2, [r3, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deee:	461a      	mov	r2, r3
 800def0:	2300      	movs	r3, #0
 800def2:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800def4:	2301      	movs	r3, #1
 800def6:	62bb      	str	r3, [r7, #40]	; 0x28
 800def8:	e013      	b.n	800df22 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800defa:	f107 010c 	add.w	r1, r7, #12
 800defe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df00:	69fa      	ldr	r2, [r7, #28]
 800df02:	6a38      	ldr	r0, [r7, #32]
 800df04:	f7ff fe58 	bl	800dbb8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f7ff ff03 	bl	800dd14 <dir_find>
 800df0e:	4603      	mov	r3, r0
 800df10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800df14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d106      	bne.n	800df2a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1e:	3301      	adds	r3, #1
 800df20:	62bb      	str	r3, [r7, #40]	; 0x28
 800df22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df24:	2b63      	cmp	r3, #99	; 0x63
 800df26:	d9e8      	bls.n	800defa <dir_register+0x4e>
 800df28:	e000      	b.n	800df2c <dir_register+0x80>
			if (res != FR_OK) break;
 800df2a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	2b64      	cmp	r3, #100	; 0x64
 800df30:	d101      	bne.n	800df36 <dir_register+0x8a>
 800df32:	2307      	movs	r3, #7
 800df34:	e0d8      	b.n	800e0e8 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800df36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df3a:	2b04      	cmp	r3, #4
 800df3c:	d002      	beq.n	800df44 <dir_register+0x98>
 800df3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df42:	e0d1      	b.n	800e0e8 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800df44:	6a3b      	ldr	r3, [r7, #32]
 800df46:	330b      	adds	r3, #11
 800df48:	7dfa      	ldrb	r2, [r7, #23]
 800df4a:	701a      	strb	r2, [r3, #0]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df52:	461a      	mov	r2, r3
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800df58:	7dfb      	ldrb	r3, [r7, #23]
 800df5a:	f003 0302 	and.w	r3, r3, #2
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d014      	beq.n	800df8c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800df62:	2300      	movs	r3, #0
 800df64:	62bb      	str	r3, [r7, #40]	; 0x28
 800df66:	e002      	b.n	800df6e <dir_register+0xc2>
 800df68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6a:	3301      	adds	r3, #1
 800df6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800df6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df70:	005b      	lsls	r3, r3, #1
 800df72:	69fa      	ldr	r2, [r7, #28]
 800df74:	4413      	add	r3, r2
 800df76:	881b      	ldrh	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d1f5      	bne.n	800df68 <dir_register+0xbc>
		nent = (n + 25) / 13;
 800df7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7e:	3319      	adds	r3, #25
 800df80:	4a5b      	ldr	r2, [pc, #364]	; (800e0f0 <dir_register+0x244>)
 800df82:	fba2 2303 	umull	r2, r3, r2, r3
 800df86:	089b      	lsrs	r3, r3, #2
 800df88:	627b      	str	r3, [r7, #36]	; 0x24
 800df8a:	e001      	b.n	800df90 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800df8c:	2301      	movs	r3, #1
 800df8e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800df90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7ff fc8b 	bl	800d8ae <dir_alloc>
 800df98:	4603      	mov	r3, r0
 800df9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800df9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d15b      	bne.n	800e05e <dir_register+0x1b2>
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	627b      	str	r3, [r7, #36]	; 0x24
 800dfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d055      	beq.n	800e05e <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfb8:	88db      	ldrh	r3, [r3, #6]
 800dfba:	461a      	mov	r2, r3
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f7ff fa5b 	bl	800d47e <dir_sdi>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dfce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d143      	bne.n	800e05e <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfdc:	699b      	ldr	r3, [r3, #24]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7ff fe78 	bl	800dcd4 <sum_sfn>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dff6:	691b      	ldr	r3, [r3, #16]
 800dff8:	4619      	mov	r1, r3
 800dffa:	4610      	mov	r0, r2
 800dffc:	f7fe fd92 	bl	800cb24 <move_window>
 800e000:	4603      	mov	r3, r0
 800e002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d126      	bne.n	800e05c <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e014:	6a18      	ldr	r0, [r3, #32]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e01c:	6959      	ldr	r1, [r3, #20]
 800e01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e020:	b2da      	uxtb	r2, r3
 800e022:	7efb      	ldrb	r3, [r7, #27]
 800e024:	f7ff fd54 	bl	800dad0 <fit_lfn>
				dp->fs->wflag = 1;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e034:	2201      	movs	r2, #1
 800e036:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800e038:	2100      	movs	r1, #0
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7ff faed 	bl	800d61a <dir_next>
 800e040:	4603      	mov	r3, r0
 800e042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e046:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d107      	bne.n	800e05e <dir_register+0x1b2>
 800e04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e050:	3b01      	subs	r3, #1
 800e052:	627b      	str	r3, [r7, #36]	; 0x24
 800e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1c6      	bne.n	800dfe8 <dir_register+0x13c>
 800e05a:	e000      	b.n	800e05e <dir_register+0x1b2>
				if (res != FR_OK) break;
 800e05c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800e05e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e062:	2b00      	cmp	r3, #0
 800e064:	d13e      	bne.n	800e0e4 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e074:	691b      	ldr	r3, [r3, #16]
 800e076:	4619      	mov	r1, r3
 800e078:	4610      	mov	r0, r2
 800e07a:	f7fe fd53 	bl	800cb24 <move_window>
 800e07e:	4603      	mov	r3, r0
 800e080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d12b      	bne.n	800e0e4 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e092:	695b      	ldr	r3, [r3, #20]
 800e094:	2220      	movs	r2, #32
 800e096:	2100      	movs	r1, #0
 800e098:	4618      	mov	r0, r3
 800e09a:	f7fe fad9 	bl	800c650 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0a4:	6958      	ldr	r0, [r3, #20]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0ac:	699b      	ldr	r3, [r3, #24]
 800e0ae:	220b      	movs	r2, #11
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	f7fe faaf 	bl	800c614 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0bc:	699b      	ldr	r3, [r3, #24]
 800e0be:	330b      	adds	r3, #11
 800e0c0:	781a      	ldrb	r2, [r3, #0]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0c8:	695b      	ldr	r3, [r3, #20]
 800e0ca:	330c      	adds	r3, #12
 800e0cc:	f002 0218 	and.w	r2, r2, #24
 800e0d0:	b2d2      	uxtb	r2, r2
 800e0d2:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800e0e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3730      	adds	r7, #48	; 0x30
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	4ec4ec4f 	.word	0x4ec4ec4f

0800e0f4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b08a      	sub	sp, #40	; 0x28
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	613b      	str	r3, [r7, #16]
 800e104:	e002      	b.n	800e10c <create_name+0x18>
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	3301      	adds	r3, #1
 800e10a:	613b      	str	r3, [r7, #16]
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	2b2f      	cmp	r3, #47	; 0x2f
 800e112:	d0f8      	beq.n	800e106 <create_name+0x12>
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	2b5c      	cmp	r3, #92	; 0x5c
 800e11a:	d0f4      	beq.n	800e106 <create_name+0x12>
	lfn = dp->lfn;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e122:	6a1b      	ldr	r3, [r3, #32]
 800e124:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800e126:	2300      	movs	r3, #0
 800e128:	617b      	str	r3, [r7, #20]
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	1c5a      	adds	r2, r3, #1
 800e132:	61ba      	str	r2, [r7, #24]
 800e134:	693a      	ldr	r2, [r7, #16]
 800e136:	4413      	add	r3, r2
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800e13c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e13e:	2b1f      	cmp	r3, #31
 800e140:	d92f      	bls.n	800e1a2 <create_name+0xae>
 800e142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e144:	2b2f      	cmp	r3, #47	; 0x2f
 800e146:	d02c      	beq.n	800e1a2 <create_name+0xae>
 800e148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e14a:	2b5c      	cmp	r3, #92	; 0x5c
 800e14c:	d029      	beq.n	800e1a2 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	2bfe      	cmp	r3, #254	; 0xfe
 800e152:	d901      	bls.n	800e158 <create_name+0x64>
			return FR_INVALID_NAME;
 800e154:	2306      	movs	r3, #6
 800e156:	e186      	b.n	800e466 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e15e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e160:	2101      	movs	r1, #1
 800e162:	4618      	mov	r0, r3
 800e164:	f001 fde2 	bl	800fd2c <ff_convert>
 800e168:	4603      	mov	r3, r0
 800e16a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e16c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d101      	bne.n	800e176 <create_name+0x82>
 800e172:	2306      	movs	r3, #6
 800e174:	e177      	b.n	800e466 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800e176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e178:	2b7f      	cmp	r3, #127	; 0x7f
 800e17a:	d809      	bhi.n	800e190 <create_name+0x9c>
 800e17c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e17e:	4619      	mov	r1, r3
 800e180:	488e      	ldr	r0, [pc, #568]	; (800e3bc <create_name+0x2c8>)
 800e182:	f7fe faa5 	bl	800c6d0 <chk_chr>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d001      	beq.n	800e190 <create_name+0x9c>
			return FR_INVALID_NAME;
 800e18c:	2306      	movs	r3, #6
 800e18e:	e16a      	b.n	800e466 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	1c5a      	adds	r2, r3, #1
 800e194:	617a      	str	r2, [r7, #20]
 800e196:	005b      	lsls	r3, r3, #1
 800e198:	68fa      	ldr	r2, [r7, #12]
 800e19a:	4413      	add	r3, r2
 800e19c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e19e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e1a0:	e7c5      	b.n	800e12e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e1a2:	693a      	ldr	r2, [r7, #16]
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	441a      	add	r2, r3
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800e1ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1ae:	2b1f      	cmp	r3, #31
 800e1b0:	d801      	bhi.n	800e1b6 <create_name+0xc2>
 800e1b2:	2304      	movs	r3, #4
 800e1b4:	e000      	b.n	800e1b8 <create_name+0xc4>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800e1bc:	e011      	b.n	800e1e2 <create_name+0xee>
		w = lfn[di - 1];
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e1c4:	3b01      	subs	r3, #1
 800e1c6:	005b      	lsls	r3, r3, #1
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	881b      	ldrh	r3, [r3, #0]
 800e1ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e1d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1d2:	2b20      	cmp	r3, #32
 800e1d4:	d002      	beq.n	800e1dc <create_name+0xe8>
 800e1d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1d8:	2b2e      	cmp	r3, #46	; 0x2e
 800e1da:	d106      	bne.n	800e1ea <create_name+0xf6>
		di--;
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	3b01      	subs	r3, #1
 800e1e0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d1ea      	bne.n	800e1be <create_name+0xca>
 800e1e8:	e000      	b.n	800e1ec <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800e1ea:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d101      	bne.n	800e1f6 <create_name+0x102>
 800e1f2:	2306      	movs	r3, #6
 800e1f4:	e137      	b.n	800e466 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	005b      	lsls	r3, r3, #1
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	2200      	movs	r2, #0
 800e200:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e208:	699b      	ldr	r3, [r3, #24]
 800e20a:	220b      	movs	r2, #11
 800e20c:	2120      	movs	r1, #32
 800e20e:	4618      	mov	r0, r3
 800e210:	f7fe fa1e 	bl	800c650 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e214:	2300      	movs	r3, #0
 800e216:	61bb      	str	r3, [r7, #24]
 800e218:	e002      	b.n	800e220 <create_name+0x12c>
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	3301      	adds	r3, #1
 800e21e:	61bb      	str	r3, [r7, #24]
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	005b      	lsls	r3, r3, #1
 800e224:	68fa      	ldr	r2, [r7, #12]
 800e226:	4413      	add	r3, r2
 800e228:	881b      	ldrh	r3, [r3, #0]
 800e22a:	2b20      	cmp	r3, #32
 800e22c:	d0f5      	beq.n	800e21a <create_name+0x126>
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	005b      	lsls	r3, r3, #1
 800e232:	68fa      	ldr	r2, [r7, #12]
 800e234:	4413      	add	r3, r2
 800e236:	881b      	ldrh	r3, [r3, #0]
 800e238:	2b2e      	cmp	r3, #46	; 0x2e
 800e23a:	d0ee      	beq.n	800e21a <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d009      	beq.n	800e256 <create_name+0x162>
 800e242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e246:	f043 0303 	orr.w	r3, r3, #3
 800e24a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e24e:	e002      	b.n	800e256 <create_name+0x162>
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	3b01      	subs	r3, #1
 800e254:	617b      	str	r3, [r7, #20]
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d009      	beq.n	800e270 <create_name+0x17c>
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e262:	3b01      	subs	r3, #1
 800e264:	005b      	lsls	r3, r3, #1
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	4413      	add	r3, r2
 800e26a:	881b      	ldrh	r3, [r3, #0]
 800e26c:	2b2e      	cmp	r3, #46	; 0x2e
 800e26e:	d1ef      	bne.n	800e250 <create_name+0x15c>

	b = i = 0; ni = 8;
 800e270:	2300      	movs	r3, #0
 800e272:	623b      	str	r3, [r7, #32]
 800e274:	2300      	movs	r3, #0
 800e276:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e27a:	2308      	movs	r3, #8
 800e27c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	1c5a      	adds	r2, r3, #1
 800e282:	61ba      	str	r2, [r7, #24]
 800e284:	005b      	lsls	r3, r3, #1
 800e286:	68fa      	ldr	r2, [r7, #12]
 800e288:	4413      	add	r3, r2
 800e28a:	881b      	ldrh	r3, [r3, #0]
 800e28c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e28e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e290:	2b00      	cmp	r3, #0
 800e292:	f000 8091 	beq.w	800e3b8 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e298:	2b20      	cmp	r3, #32
 800e29a:	d006      	beq.n	800e2aa <create_name+0x1b6>
 800e29c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e29e:	2b2e      	cmp	r3, #46	; 0x2e
 800e2a0:	d10a      	bne.n	800e2b8 <create_name+0x1c4>
 800e2a2:	69ba      	ldr	r2, [r7, #24]
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d006      	beq.n	800e2b8 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800e2aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2ae:	f043 0303 	orr.w	r3, r3, #3
 800e2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2b6:	e07e      	b.n	800e3b6 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e2b8:	6a3a      	ldr	r2, [r7, #32]
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d203      	bcs.n	800e2c8 <create_name+0x1d4>
 800e2c0:	69ba      	ldr	r2, [r7, #24]
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d123      	bne.n	800e310 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	2b0b      	cmp	r3, #11
 800e2cc:	d106      	bne.n	800e2dc <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800e2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2d2:	f043 0303 	orr.w	r3, r3, #3
 800e2d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2da:	e076      	b.n	800e3ca <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e2dc:	69ba      	ldr	r2, [r7, #24]
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d005      	beq.n	800e2f0 <create_name+0x1fc>
 800e2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2e8:	f043 0303 	orr.w	r3, r3, #3
 800e2ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e2f0:	69ba      	ldr	r2, [r7, #24]
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d867      	bhi.n	800e3c8 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	61bb      	str	r3, [r7, #24]
 800e2fc:	2308      	movs	r3, #8
 800e2fe:	623b      	str	r3, [r7, #32]
 800e300:	230b      	movs	r3, #11
 800e302:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e30e:	e052      	b.n	800e3b6 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e312:	2b7f      	cmp	r3, #127	; 0x7f
 800e314:	d914      	bls.n	800e340 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e318:	2100      	movs	r1, #0
 800e31a:	4618      	mov	r0, r3
 800e31c:	f001 fd06 	bl	800fd2c <ff_convert>
 800e320:	4603      	mov	r3, r0
 800e322:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e326:	2b00      	cmp	r3, #0
 800e328:	d004      	beq.n	800e334 <create_name+0x240>
 800e32a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e32c:	3b80      	subs	r3, #128	; 0x80
 800e32e:	4a24      	ldr	r2, [pc, #144]	; (800e3c0 <create_name+0x2cc>)
 800e330:	5cd3      	ldrb	r3, [r2, r3]
 800e332:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e338:	f043 0302 	orr.w	r3, r3, #2
 800e33c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e342:	2b00      	cmp	r3, #0
 800e344:	d007      	beq.n	800e356 <create_name+0x262>
 800e346:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e348:	4619      	mov	r1, r3
 800e34a:	481e      	ldr	r0, [pc, #120]	; (800e3c4 <create_name+0x2d0>)
 800e34c:	f7fe f9c0 	bl	800c6d0 <chk_chr>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d008      	beq.n	800e368 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e356:	235f      	movs	r3, #95	; 0x5f
 800e358:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e35a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e35e:	f043 0303 	orr.w	r3, r3, #3
 800e362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e366:	e01b      	b.n	800e3a0 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e36a:	2b40      	cmp	r3, #64	; 0x40
 800e36c:	d909      	bls.n	800e382 <create_name+0x28e>
 800e36e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e370:	2b5a      	cmp	r3, #90	; 0x5a
 800e372:	d806      	bhi.n	800e382 <create_name+0x28e>
					b |= 2;
 800e374:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e378:	f043 0302 	orr.w	r3, r3, #2
 800e37c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e380:	e00e      	b.n	800e3a0 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e384:	2b60      	cmp	r3, #96	; 0x60
 800e386:	d90b      	bls.n	800e3a0 <create_name+0x2ac>
 800e388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e38a:	2b7a      	cmp	r3, #122	; 0x7a
 800e38c:	d808      	bhi.n	800e3a0 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800e38e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e392:	f043 0301 	orr.w	r3, r3, #1
 800e396:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e39a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e39c:	3b20      	subs	r3, #32
 800e39e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3a6:	699a      	ldr	r2, [r3, #24]
 800e3a8:	6a3b      	ldr	r3, [r7, #32]
 800e3aa:	1c59      	adds	r1, r3, #1
 800e3ac:	6239      	str	r1, [r7, #32]
 800e3ae:	4413      	add	r3, r2
 800e3b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3b2:	b2d2      	uxtb	r2, r2
 800e3b4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800e3b6:	e762      	b.n	800e27e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800e3b8:	bf00      	nop
 800e3ba:	e006      	b.n	800e3ca <create_name+0x2d6>
 800e3bc:	08015b2c 	.word	0x08015b2c
 800e3c0:	08015ba0 	.word	0x08015ba0
 800e3c4:	08015b38 	.word	0x08015b38
			if (si > di) break;			/* No extension */
 800e3c8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3d0:	699b      	ldr	r3, [r3, #24]
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	2be5      	cmp	r3, #229	; 0xe5
 800e3d6:	d105      	bne.n	800e3e4 <create_name+0x2f0>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3de:	699b      	ldr	r3, [r3, #24]
 800e3e0:	2205      	movs	r2, #5
 800e3e2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	2b08      	cmp	r3, #8
 800e3e8:	d104      	bne.n	800e3f4 <create_name+0x300>
 800e3ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800e3f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3f8:	f003 030c 	and.w	r3, r3, #12
 800e3fc:	2b0c      	cmp	r3, #12
 800e3fe:	d005      	beq.n	800e40c <create_name+0x318>
 800e400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e404:	f003 0303 	and.w	r3, r3, #3
 800e408:	2b03      	cmp	r3, #3
 800e40a:	d105      	bne.n	800e418 <create_name+0x324>
		cf |= NS_LFN;
 800e40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e410:	f043 0302 	orr.w	r3, r3, #2
 800e414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e41c:	f003 0302 	and.w	r3, r3, #2
 800e420:	2b00      	cmp	r3, #0
 800e422:	d117      	bne.n	800e454 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e428:	f003 0303 	and.w	r3, r3, #3
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d105      	bne.n	800e43c <create_name+0x348>
 800e430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e434:	f043 0310 	orr.w	r3, r3, #16
 800e438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e43c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e440:	f003 030c 	and.w	r3, r3, #12
 800e444:	2b04      	cmp	r3, #4
 800e446:	d105      	bne.n	800e454 <create_name+0x360>
 800e448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e44c:	f043 0308 	orr.w	r3, r3, #8
 800e450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e45a:	699b      	ldr	r3, [r3, #24]
 800e45c:	330b      	adds	r3, #11
 800e45e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e462:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e464:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800e466:	4618      	mov	r0, r3
 800e468:	3728      	adds	r7, #40	; 0x28
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop

0800e470 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	2b2f      	cmp	r3, #47	; 0x2f
 800e480:	d003      	beq.n	800e48a <follow_path+0x1a>
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	2b5c      	cmp	r3, #92	; 0x5c
 800e488:	d102      	bne.n	800e490 <follow_path+0x20>
		path++;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	3301      	adds	r3, #1
 800e48e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e496:	461a      	mov	r2, r3
 800e498:	2300      	movs	r3, #0
 800e49a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	2b1f      	cmp	r3, #31
 800e4a2:	d80c      	bhi.n	800e4be <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f7fe ffe9 	bl	800d47e <dir_sdi>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	6153      	str	r3, [r2, #20]
 800e4bc:	e049      	b.n	800e552 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e4be:	463b      	mov	r3, r7
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f7ff fe16 	bl	800e0f4 <create_name>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800e4cc:	7bfb      	ldrb	r3, [r7, #15]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d13a      	bne.n	800e548 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f7ff fc1e 	bl	800dd14 <dir_find>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4e2:	699b      	ldr	r3, [r3, #24]
 800e4e4:	7adb      	ldrb	r3, [r3, #11]
 800e4e6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800e4e8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d00a      	beq.n	800e504 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e4ee:	7bfb      	ldrb	r3, [r7, #15]
 800e4f0:	2b04      	cmp	r3, #4
 800e4f2:	d12b      	bne.n	800e54c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e4f4:	7bbb      	ldrb	r3, [r7, #14]
 800e4f6:	f003 0304 	and.w	r3, r3, #4
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d126      	bne.n	800e54c <follow_path+0xdc>
 800e4fe:	2305      	movs	r3, #5
 800e500:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800e502:	e023      	b.n	800e54c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e504:	7bbb      	ldrb	r3, [r7, #14]
 800e506:	f003 0304 	and.w	r3, r3, #4
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d120      	bne.n	800e550 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e514:	695b      	ldr	r3, [r3, #20]
 800e516:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	330b      	adds	r3, #11
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	f003 0310 	and.w	r3, r3, #16
 800e522:	2b00      	cmp	r3, #0
 800e524:	d102      	bne.n	800e52c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800e526:	2305      	movs	r3, #5
 800e528:	73fb      	strb	r3, [r7, #15]
 800e52a:	e012      	b.n	800e552 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	68b9      	ldr	r1, [r7, #8]
 800e536:	4618      	mov	r0, r3
 800e538:	f7ff fa07 	bl	800d94a <ld_clust>
 800e53c:	4602      	mov	r2, r0
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e544:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e546:	e7ba      	b.n	800e4be <follow_path+0x4e>
			if (res != FR_OK) break;
 800e548:	bf00      	nop
 800e54a:	e002      	b.n	800e552 <follow_path+0xe2>
				break;
 800e54c:	bf00      	nop
 800e54e:	e000      	b.n	800e552 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e550:	bf00      	nop
		}
	}

	return res;
 800e552:	7bfb      	ldrb	r3, [r7, #15]
}
 800e554:	4618      	mov	r0, r3
 800e556:	3710      	adds	r7, #16
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b087      	sub	sp, #28
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e564:	f04f 33ff 	mov.w	r3, #4294967295
 800e568:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d031      	beq.n	800e5d6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	617b      	str	r3, [r7, #20]
 800e578:	e002      	b.n	800e580 <get_ldnumber+0x24>
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	3301      	adds	r3, #1
 800e57e:	617b      	str	r3, [r7, #20]
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	2b1f      	cmp	r3, #31
 800e586:	d903      	bls.n	800e590 <get_ldnumber+0x34>
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	2b3a      	cmp	r3, #58	; 0x3a
 800e58e:	d1f4      	bne.n	800e57a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	2b3a      	cmp	r3, #58	; 0x3a
 800e596:	d11c      	bne.n	800e5d2 <get_ldnumber+0x76>
			tp = *path;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	1c5a      	adds	r2, r3, #1
 800e5a2:	60fa      	str	r2, [r7, #12]
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	3b30      	subs	r3, #48	; 0x30
 800e5a8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	2b09      	cmp	r3, #9
 800e5ae:	d80e      	bhi.n	800e5ce <get_ldnumber+0x72>
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d10a      	bne.n	800e5ce <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d107      	bne.n	800e5ce <get_ldnumber+0x72>
					vol = (int)i;
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	617b      	str	r3, [r7, #20]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	697a      	ldr	r2, [r7, #20]
 800e5cc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	e002      	b.n	800e5d8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e5d6:	693b      	ldr	r3, [r7, #16]
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	371c      	adds	r7, #28
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bc80      	pop	{r7}
 800e5e0:	4770      	bx	lr
	...

0800e5e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	711a      	strb	r2, [r3, #4]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5fe:	461a      	mov	r2, r3
 800e600:	f04f 33ff 	mov.w	r3, #4294967295
 800e604:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800e606:	6839      	ldr	r1, [r7, #0]
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7fe fa8b 	bl	800cb24 <move_window>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d001      	beq.n	800e618 <check_fs+0x34>
		return 3;
 800e614:	2303      	movs	r3, #3
 800e616:	e04a      	b.n	800e6ae <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e61e:	3301      	adds	r3, #1
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	021b      	lsls	r3, r3, #8
 800e624:	b21a      	sxth	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800e62c:	b21b      	sxth	r3, r3
 800e62e:	4313      	orrs	r3, r2
 800e630:	b21b      	sxth	r3, r3
 800e632:	4a21      	ldr	r2, [pc, #132]	; (800e6b8 <check_fs+0xd4>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d001      	beq.n	800e63c <check_fs+0x58>
		return 2;
 800e638:	2302      	movs	r3, #2
 800e63a:	e038      	b.n	800e6ae <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	3336      	adds	r3, #54	; 0x36
 800e640:	3303      	adds	r3, #3
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	061a      	lsls	r2, r3, #24
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	3336      	adds	r3, #54	; 0x36
 800e64a:	3302      	adds	r3, #2
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	041b      	lsls	r3, r3, #16
 800e650:	4313      	orrs	r3, r2
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	3236      	adds	r2, #54	; 0x36
 800e656:	3201      	adds	r2, #1
 800e658:	7812      	ldrb	r2, [r2, #0]
 800e65a:	0212      	lsls	r2, r2, #8
 800e65c:	4313      	orrs	r3, r2
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800e664:	4313      	orrs	r3, r2
 800e666:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e66a:	4a14      	ldr	r2, [pc, #80]	; (800e6bc <check_fs+0xd8>)
 800e66c:	4293      	cmp	r3, r2
 800e66e:	d101      	bne.n	800e674 <check_fs+0x90>
		return 0;
 800e670:	2300      	movs	r3, #0
 800e672:	e01c      	b.n	800e6ae <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	3352      	adds	r3, #82	; 0x52
 800e678:	3303      	adds	r3, #3
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	061a      	lsls	r2, r3, #24
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	3352      	adds	r3, #82	; 0x52
 800e682:	3302      	adds	r3, #2
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	041b      	lsls	r3, r3, #16
 800e688:	4313      	orrs	r3, r2
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	3252      	adds	r2, #82	; 0x52
 800e68e:	3201      	adds	r2, #1
 800e690:	7812      	ldrb	r2, [r2, #0]
 800e692:	0212      	lsls	r2, r2, #8
 800e694:	4313      	orrs	r3, r2
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800e69c:	4313      	orrs	r3, r2
 800e69e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e6a2:	4a06      	ldr	r2, [pc, #24]	; (800e6bc <check_fs+0xd8>)
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d101      	bne.n	800e6ac <check_fs+0xc8>
		return 0;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	e000      	b.n	800e6ae <check_fs+0xca>

	return 1;
 800e6ac:	2301      	movs	r3, #1
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	ffffaa55 	.word	0xffffaa55
 800e6bc:	00544146 	.word	0x00544146

0800e6c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b096      	sub	sp, #88	; 0x58
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e6d4:	68b8      	ldr	r0, [r7, #8]
 800e6d6:	f7ff ff41 	bl	800e55c <get_ldnumber>
 800e6da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	da01      	bge.n	800e6e6 <find_volume+0x26>
 800e6e2:	230b      	movs	r3, #11
 800e6e4:	e311      	b.n	800ed0a <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e6e6:	4a98      	ldr	r2, [pc, #608]	; (800e948 <find_volume+0x288>)
 800e6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d101      	bne.n	800e6fa <find_volume+0x3a>
 800e6f6:	230c      	movs	r3, #12
 800e6f8:	e307      	b.n	800ed0a <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6fe:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800e700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d01c      	beq.n	800e746 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e712:	785b      	ldrb	r3, [r3, #1]
 800e714:	4618      	mov	r0, r3
 800e716:	f7fd fedf 	bl	800c4d8 <disk_status>
 800e71a:	4603      	mov	r3, r0
 800e71c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e720:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e724:	f003 0301 	and.w	r3, r3, #1
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10c      	bne.n	800e746 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800e72c:	79fb      	ldrb	r3, [r7, #7]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d007      	beq.n	800e742 <find_volume+0x82>
 800e732:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e736:	f003 0304 	and.w	r3, r3, #4
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d001      	beq.n	800e742 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e73e:	230a      	movs	r3, #10
 800e740:	e2e3      	b.n	800ed0a <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800e742:	2300      	movs	r3, #0
 800e744:	e2e1      	b.n	800ed0a <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e74c:	2200      	movs	r2, #0
 800e74e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e752:	b2da      	uxtb	r2, r3
 800e754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e75a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e762:	785b      	ldrb	r3, [r3, #1]
 800e764:	4618      	mov	r0, r3
 800e766:	f7fd fed1 	bl	800c50c <disk_initialize>
 800e76a:	4603      	mov	r3, r0
 800e76c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800e770:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e774:	f003 0301 	and.w	r3, r3, #1
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d001      	beq.n	800e780 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e77c:	2303      	movs	r3, #3
 800e77e:	e2c4      	b.n	800ed0a <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800e780:	79fb      	ldrb	r3, [r7, #7]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d007      	beq.n	800e796 <find_volume+0xd6>
 800e786:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e78a:	f003 0304 	and.w	r3, r3, #4
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800e792:	230a      	movs	r3, #10
 800e794:	e2b9      	b.n	800ed0a <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800e796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e79c:	7858      	ldrb	r0, [r3, #1]
 800e79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7a4:	330a      	adds	r3, #10
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	2102      	movs	r1, #2
 800e7aa:	f7fd ff15 	bl	800c5d8 <disk_ioctl>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d10d      	bne.n	800e7d0 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800e7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7ba:	895b      	ldrh	r3, [r3, #10]
 800e7bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7c0:	d306      	bcc.n	800e7d0 <find_volume+0x110>
 800e7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7c8:	895b      	ldrh	r3, [r3, #10]
 800e7ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7ce:	d901      	bls.n	800e7d4 <find_volume+0x114>
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	e29a      	b.n	800ed0a <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800e7d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e7dc:	f7ff ff02 	bl	800e5e4 <check_fs>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800e7e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d153      	bne.n	800e896 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	643b      	str	r3, [r7, #64]	; 0x40
 800e7f2:	e028      	b.n	800e846 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800e7f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7f8:	011b      	lsls	r3, r3, #4
 800e7fa:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e7fe:	4413      	add	r3, r2
 800e800:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800e802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e804:	3304      	adds	r3, #4
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d012      	beq.n	800e832 <find_volume+0x172>
 800e80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80e:	330b      	adds	r3, #11
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	061a      	lsls	r2, r3, #24
 800e814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e816:	330a      	adds	r3, #10
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	041b      	lsls	r3, r3, #16
 800e81c:	4313      	orrs	r3, r2
 800e81e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e820:	3209      	adds	r2, #9
 800e822:	7812      	ldrb	r2, [r2, #0]
 800e824:	0212      	lsls	r2, r2, #8
 800e826:	4313      	orrs	r3, r2
 800e828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e82a:	3208      	adds	r2, #8
 800e82c:	7812      	ldrb	r2, [r2, #0]
 800e82e:	431a      	orrs	r2, r3
 800e830:	e000      	b.n	800e834 <find_volume+0x174>
 800e832:	2200      	movs	r2, #0
 800e834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	3358      	adds	r3, #88	; 0x58
 800e83a:	443b      	add	r3, r7
 800e83c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800e840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e842:	3301      	adds	r3, #1
 800e844:	643b      	str	r3, [r7, #64]	; 0x40
 800e846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e848:	2b03      	cmp	r3, #3
 800e84a:	d9d3      	bls.n	800e7f4 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800e84c:	2300      	movs	r3, #0
 800e84e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e852:	2b00      	cmp	r3, #0
 800e854:	d002      	beq.n	800e85c <find_volume+0x19c>
 800e856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e858:	3b01      	subs	r3, #1
 800e85a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800e85c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	3358      	adds	r3, #88	; 0x58
 800e862:	443b      	add	r3, r7
 800e864:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e868:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800e86a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d005      	beq.n	800e87c <find_volume+0x1bc>
 800e870:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e872:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e874:	f7ff feb6 	bl	800e5e4 <check_fs>
 800e878:	4603      	mov	r3, r0
 800e87a:	e000      	b.n	800e87e <find_volume+0x1be>
 800e87c:	2302      	movs	r3, #2
 800e87e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800e882:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e886:	2b00      	cmp	r3, #0
 800e888:	d005      	beq.n	800e896 <find_volume+0x1d6>
 800e88a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e88c:	3301      	adds	r3, #1
 800e88e:	643b      	str	r3, [r7, #64]	; 0x40
 800e890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e892:	2b03      	cmp	r3, #3
 800e894:	d9e2      	bls.n	800e85c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e896:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e89a:	2b03      	cmp	r3, #3
 800e89c:	d101      	bne.n	800e8a2 <find_volume+0x1e2>
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e233      	b.n	800ed0a <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800e8a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <find_volume+0x1ee>
 800e8aa:	230d      	movs	r3, #13
 800e8ac:	e22d      	b.n	800ed0a <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b0:	7b1b      	ldrb	r3, [r3, #12]
 800e8b2:	021b      	lsls	r3, r3, #8
 800e8b4:	b21a      	sxth	r2, r3
 800e8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b8:	7adb      	ldrb	r3, [r3, #11]
 800e8ba:	b21b      	sxth	r3, r3
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	b21a      	sxth	r2, r3
 800e8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8c6:	895b      	ldrh	r3, [r3, #10]
 800e8c8:	b21b      	sxth	r3, r3
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d001      	beq.n	800e8d2 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800e8ce:	230d      	movs	r3, #13
 800e8d0:	e21b      	b.n	800ed0a <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800e8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d4:	7ddb      	ldrb	r3, [r3, #23]
 800e8d6:	021b      	lsls	r3, r3, #8
 800e8d8:	b21a      	sxth	r2, r3
 800e8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8dc:	7d9b      	ldrb	r3, [r3, #22]
 800e8de:	b21b      	sxth	r3, r3
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	b21b      	sxth	r3, r3
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800e8e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d112      	bne.n	800e914 <find_volume+0x254>
 800e8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e8f4:	061a      	lsls	r2, r3, #24
 800e8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800e8fc:	041b      	lsls	r3, r3, #16
 800e8fe:	4313      	orrs	r3, r2
 800e900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e902:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800e906:	0212      	lsls	r2, r2, #8
 800e908:	4313      	orrs	r3, r2
 800e90a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e90c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800e910:	4313      	orrs	r3, r2
 800e912:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800e914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e91a:	461a      	mov	r2, r3
 800e91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e91e:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800e920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e922:	7c1a      	ldrb	r2, [r3, #16]
 800e924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e92a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800e92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e932:	78db      	ldrb	r3, [r3, #3]
 800e934:	2b01      	cmp	r3, #1
 800e936:	d009      	beq.n	800e94c <find_volume+0x28c>
 800e938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e93e:	78db      	ldrb	r3, [r3, #3]
 800e940:	2b02      	cmp	r3, #2
 800e942:	d003      	beq.n	800e94c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800e944:	230d      	movs	r3, #13
 800e946:	e1e0      	b.n	800ed0a <find_volume+0x64a>
 800e948:	200025a8 	.word	0x200025a8
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800e94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e952:	78db      	ldrb	r3, [r3, #3]
 800e954:	461a      	mov	r2, r3
 800e956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e958:	fb02 f303 	mul.w	r3, r2, r3
 800e95c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800e95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e960:	7b5a      	ldrb	r2, [r3, #13]
 800e962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e968:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800e96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e970:	789b      	ldrb	r3, [r3, #2]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d00c      	beq.n	800e990 <find_volume+0x2d0>
 800e976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e97c:	789b      	ldrb	r3, [r3, #2]
 800e97e:	461a      	mov	r2, r3
 800e980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e986:	789b      	ldrb	r3, [r3, #2]
 800e988:	3b01      	subs	r3, #1
 800e98a:	4013      	ands	r3, r2
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d001      	beq.n	800e994 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800e990:	230d      	movs	r3, #13
 800e992:	e1ba      	b.n	800ed0a <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800e994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e996:	7c9b      	ldrb	r3, [r3, #18]
 800e998:	021b      	lsls	r3, r3, #8
 800e99a:	b21a      	sxth	r2, r3
 800e99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99e:	7c5b      	ldrb	r3, [r3, #17]
 800e9a0:	b21b      	sxth	r3, r3
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	b21b      	sxth	r3, r3
 800e9a6:	b29a      	uxth	r2, r3
 800e9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9ae:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800e9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9b6:	891b      	ldrh	r3, [r3, #8]
 800e9b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e9be:	8952      	ldrh	r2, [r2, #10]
 800e9c0:	0952      	lsrs	r2, r2, #5
 800e9c2:	b292      	uxth	r2, r2
 800e9c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9c8:	fb01 f202 	mul.w	r2, r1, r2
 800e9cc:	1a9b      	subs	r3, r3, r2
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d001      	beq.n	800e9d8 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800e9d4:	230d      	movs	r3, #13
 800e9d6:	e198      	b.n	800ed0a <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800e9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9da:	7d1b      	ldrb	r3, [r3, #20]
 800e9dc:	021b      	lsls	r3, r3, #8
 800e9de:	b21a      	sxth	r2, r3
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e2:	7cdb      	ldrb	r3, [r3, #19]
 800e9e4:	b21b      	sxth	r3, r3
 800e9e6:	4313      	orrs	r3, r2
 800e9e8:	b21b      	sxth	r3, r3
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800e9ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d112      	bne.n	800ea1a <find_volume+0x35a>
 800e9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e9fa:	061a      	lsls	r2, r3, #24
 800e9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ea02:	041b      	lsls	r3, r3, #16
 800ea04:	4313      	orrs	r3, r2
 800ea06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea08:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ea0c:	0212      	lsls	r2, r2, #8
 800ea0e:	4313      	orrs	r3, r2
 800ea10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea12:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ea16:	4313      	orrs	r3, r2
 800ea18:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800ea1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1c:	7bdb      	ldrb	r3, [r3, #15]
 800ea1e:	021b      	lsls	r3, r3, #8
 800ea20:	b21a      	sxth	r2, r3
 800ea22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea24:	7b9b      	ldrb	r3, [r3, #14]
 800ea26:	b21b      	sxth	r3, r3
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	b21b      	sxth	r3, r3
 800ea2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800ea2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d101      	bne.n	800ea38 <find_volume+0x378>
 800ea34:	230d      	movs	r3, #13
 800ea36:	e168      	b.n	800ed0a <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800ea38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea3c:	4413      	add	r3, r2
 800ea3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ea44:	8911      	ldrh	r1, [r2, #8]
 800ea46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ea4c:	8952      	ldrh	r2, [r2, #10]
 800ea4e:	0952      	lsrs	r2, r2, #5
 800ea50:	b292      	uxth	r2, r2
 800ea52:	fbb1 f2f2 	udiv	r2, r1, r2
 800ea56:	b292      	uxth	r2, r2
 800ea58:	4413      	add	r3, r2
 800ea5a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ea5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d201      	bcs.n	800ea68 <find_volume+0x3a8>
 800ea64:	230d      	movs	r3, #13
 800ea66:	e150      	b.n	800ed0a <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800ea68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6c:	1ad3      	subs	r3, r2, r3
 800ea6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ea74:	7892      	ldrb	r2, [r2, #2]
 800ea76:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea7a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800ea7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d101      	bne.n	800ea86 <find_volume+0x3c6>
 800ea82:	230d      	movs	r3, #13
 800ea84:	e141      	b.n	800ed0a <find_volume+0x64a>
	fmt = FS_FAT12;
 800ea86:	2301      	movs	r3, #1
 800ea88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800ea8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d902      	bls.n	800ea9c <find_volume+0x3dc>
 800ea96:	2302      	movs	r3, #2
 800ea98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d902      	bls.n	800eaac <find_volume+0x3ec>
 800eaa6:	2303      	movs	r3, #3
 800eaa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800eaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaae:	3302      	adds	r3, #2
 800eab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eab2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eab6:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800eab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eabe:	461a      	mov	r2, r3
 800eac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eac2:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800eac4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eac8:	4413      	add	r3, r2
 800eaca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eacc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ead0:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800ead2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ead4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead6:	4413      	add	r3, r2
 800ead8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eada:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eade:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800eae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eae4:	2b03      	cmp	r3, #3
 800eae6:	d124      	bne.n	800eb32 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800eae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eaee:	891b      	ldrh	r3, [r3, #8]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d001      	beq.n	800eaf8 <find_volume+0x438>
 800eaf4:	230d      	movs	r3, #13
 800eaf6:	e108      	b.n	800ed0a <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800eaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eafe:	061a      	lsls	r2, r3, #24
 800eb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb02:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800eb06:	041b      	lsls	r3, r3, #16
 800eb08:	4313      	orrs	r3, r2
 800eb0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb0c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800eb10:	0212      	lsls	r2, r2, #8
 800eb12:	4313      	orrs	r3, r2
 800eb14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb16:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800eb1a:	4313      	orrs	r3, r2
 800eb1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eb22:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800eb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb2a:	695b      	ldr	r3, [r3, #20]
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	647b      	str	r3, [r7, #68]	; 0x44
 800eb30:	e02b      	b.n	800eb8a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800eb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb38:	891b      	ldrh	r3, [r3, #8]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d101      	bne.n	800eb42 <find_volume+0x482>
 800eb3e:	230d      	movs	r3, #13
 800eb40:	e0e3      	b.n	800ed0a <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800eb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb48:	6a1a      	ldr	r2, [r3, #32]
 800eb4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb4c:	4413      	add	r3, r2
 800eb4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eb54:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eb56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb5a:	2b02      	cmp	r3, #2
 800eb5c:	d105      	bne.n	800eb6a <find_volume+0x4aa>
 800eb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb64:	695b      	ldr	r3, [r3, #20]
 800eb66:	005b      	lsls	r3, r3, #1
 800eb68:	e00e      	b.n	800eb88 <find_volume+0x4c8>
 800eb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb70:	695a      	ldr	r2, [r3, #20]
 800eb72:	4613      	mov	r3, r2
 800eb74:	005b      	lsls	r3, r3, #1
 800eb76:	4413      	add	r3, r2
 800eb78:	085a      	lsrs	r2, r3, #1
 800eb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb80:	695b      	ldr	r3, [r3, #20]
 800eb82:	f003 0301 	and.w	r3, r3, #1
 800eb86:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800eb88:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800eb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb90:	699a      	ldr	r2, [r3, #24]
 800eb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb98:	895b      	ldrh	r3, [r3, #10]
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb9e:	440b      	add	r3, r1
 800eba0:	3b01      	subs	r3, #1
 800eba2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eba4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800eba8:	8949      	ldrh	r1, [r1, #10]
 800ebaa:	fbb3 f3f1 	udiv	r3, r3, r1
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d201      	bcs.n	800ebb6 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800ebb2:	230d      	movs	r3, #13
 800ebb4:	e0a9      	b.n	800ed0a <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800ebb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc2:	6113      	str	r3, [r2, #16]
 800ebc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebca:	691b      	ldr	r3, [r3, #16]
 800ebcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ebd2:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800ebd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebda:	2280      	movs	r2, #128	; 0x80
 800ebdc:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800ebde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebe2:	2b03      	cmp	r3, #3
 800ebe4:	d17a      	bne.n	800ecdc <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800ebe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ebec:	021b      	lsls	r3, r3, #8
 800ebee:	b21a      	sxth	r2, r3
 800ebf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ebf6:	b21b      	sxth	r3, r3
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	b21b      	sxth	r3, r3
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d16d      	bne.n	800ecdc <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800ec00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec02:	3301      	adds	r3, #1
 800ec04:	4619      	mov	r1, r3
 800ec06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec08:	f7fd ff8c 	bl	800cb24 <move_window>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d164      	bne.n	800ecdc <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800ec12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec18:	2200      	movs	r2, #0
 800ec1a:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ec1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800ec22:	021b      	lsls	r3, r3, #8
 800ec24:	b21a      	sxth	r2, r3
 800ec26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec28:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800ec2c:	b21b      	sxth	r3, r3
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	b21b      	sxth	r3, r3
 800ec32:	4a38      	ldr	r2, [pc, #224]	; (800ed14 <find_volume+0x654>)
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d151      	bne.n	800ecdc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800ec38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3a:	78db      	ldrb	r3, [r3, #3]
 800ec3c:	061a      	lsls	r2, r3, #24
 800ec3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec40:	789b      	ldrb	r3, [r3, #2]
 800ec42:	041b      	lsls	r3, r3, #16
 800ec44:	4313      	orrs	r3, r2
 800ec46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec48:	7852      	ldrb	r2, [r2, #1]
 800ec4a:	0212      	lsls	r2, r2, #8
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec50:	7812      	ldrb	r2, [r2, #0]
 800ec52:	4313      	orrs	r3, r2
 800ec54:	4a30      	ldr	r2, [pc, #192]	; (800ed18 <find_volume+0x658>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d140      	bne.n	800ecdc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800ec5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800ec60:	061a      	lsls	r2, r3, #24
 800ec62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec64:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800ec68:	041b      	lsls	r3, r3, #16
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec6e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800ec72:	0212      	lsls	r2, r2, #8
 800ec74:	4313      	orrs	r3, r2
 800ec76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec78:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	4a27      	ldr	r2, [pc, #156]	; (800ed1c <find_volume+0x65c>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d12b      	bne.n	800ecdc <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800ec84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec86:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800ec8a:	061a      	lsls	r2, r3, #24
 800ec8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800ec92:	041b      	lsls	r3, r3, #16
 800ec94:	4313      	orrs	r3, r2
 800ec96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec98:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800ec9c:	0212      	lsls	r2, r2, #8
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eca2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800eca6:	4313      	orrs	r3, r2
 800eca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecaa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ecae:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800ecb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb2:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800ecb6:	061a      	lsls	r2, r3, #24
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecba:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800ecbe:	041b      	lsls	r3, r3, #16
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecc4:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800ecc8:	0212      	lsls	r2, r2, #8
 800ecca:	4313      	orrs	r3, r2
 800eccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecce:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ecda:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800ecdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ece2:	461a      	mov	r2, r3
 800ece4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ece8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800ecea:	4b0d      	ldr	r3, [pc, #52]	; (800ed20 <find_volume+0x660>)
 800ecec:	881b      	ldrh	r3, [r3, #0]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	4b0b      	ldr	r3, [pc, #44]	; (800ed20 <find_volume+0x660>)
 800ecf4:	801a      	strh	r2, [r3, #0]
 800ecf6:	4b0a      	ldr	r3, [pc, #40]	; (800ed20 <find_volume+0x660>)
 800ecf8:	881a      	ldrh	r2, [r3, #0]
 800ecfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed00:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800ed02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed04:	f7fd fe92 	bl	800ca2c <clear_lock>
#endif

	return FR_OK;
 800ed08:	2300      	movs	r3, #0
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3758      	adds	r7, #88	; 0x58
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	ffffaa55 	.word	0xffffaa55
 800ed18:	41615252 	.word	0x41615252
 800ed1c:	61417272 	.word	0x61417272
 800ed20:	200025ac 	.word	0x200025ac

0800ed24 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d02a      	beq.n	800ed8c <validate+0x68>
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d024      	beq.n	800ed8c <validate+0x68>
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d01b      	beq.n	800ed8c <validate+0x68>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed60:	88da      	ldrh	r2, [r3, #6]
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed68:	889b      	ldrh	r3, [r3, #4]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d10e      	bne.n	800ed8c <validate+0x68>
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed7a:	785b      	ldrb	r3, [r3, #1]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fd fbab 	bl	800c4d8 <disk_status>
 800ed82:	4603      	mov	r3, r0
 800ed84:	f003 0301 	and.w	r3, r3, #1
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d001      	beq.n	800ed90 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800ed8c:	2309      	movs	r3, #9
 800ed8e:	e000      	b.n	800ed92 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800ed90:	2300      	movs	r3, #0
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
	...

0800ed9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b088      	sub	sp, #32
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	4613      	mov	r3, r2
 800eda8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800edae:	f107 0310 	add.w	r3, r7, #16
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7ff fbd2 	bl	800e55c <get_ldnumber>
 800edb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800edba:	69fb      	ldr	r3, [r7, #28]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	da01      	bge.n	800edc4 <f_mount+0x28>
 800edc0:	230b      	movs	r3, #11
 800edc2:	e02f      	b.n	800ee24 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800edc4:	4a19      	ldr	r2, [pc, #100]	; (800ee2c <f_mount+0x90>)
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edcc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d007      	beq.n	800ede4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800edd4:	69b8      	ldr	r0, [r7, #24]
 800edd6:	f7fd fe29 	bl	800ca2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ede0:	2200      	movs	r2, #0
 800ede2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d004      	beq.n	800edf4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edf0:	2200      	movs	r2, #0
 800edf2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	490d      	ldr	r1, [pc, #52]	; (800ee2c <f_mount+0x90>)
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d002      	beq.n	800ee0a <f_mount+0x6e>
 800ee04:	79fb      	ldrb	r3, [r7, #7]
 800ee06:	2b01      	cmp	r3, #1
 800ee08:	d001      	beq.n	800ee0e <f_mount+0x72>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	e00a      	b.n	800ee24 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800ee0e:	f107 0108 	add.w	r1, r7, #8
 800ee12:	f107 030c 	add.w	r3, r7, #12
 800ee16:	2200      	movs	r2, #0
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7ff fc51 	bl	800e6c0 <find_volume>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ee22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3720      	adds	r7, #32
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	200025a8 	.word	0x200025a8

0800ee30 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800ee36:	b086      	sub	sp, #24
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee3e:	f843 0c4c 	str.w	r0, [r3, #-76]
 800ee42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee46:	f843 1c50 	str.w	r1, [r3, #-80]
 800ee4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee4e:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800ee52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee56:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d101      	bne.n	800ee62 <f_open+0x32>
 800ee5e:	2309      	movs	r3, #9
 800ee60:	e2f7      	b.n	800f452 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800ee62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee66:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ee6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee6e:	461a      	mov	r2, r3
 800ee70:	2300      	movs	r3, #0
 800ee72:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800ee74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee78:	461a      	mov	r2, r3
 800ee7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee7e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ee82:	f003 031f 	and.w	r3, r3, #31
 800ee86:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800ee8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee8e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ee92:	f023 0301 	bic.w	r3, r3, #1
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	f107 0118 	add.w	r1, r7, #24
 800ee9c:	3910      	subs	r1, #16
 800ee9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800eea2:	3b18      	subs	r3, #24
 800eea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7ff fc09 	bl	800e6c0 <find_volume>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800eeb4:	f102 0217 	add.w	r2, r2, #23
 800eeb8:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800eeba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800eebe:	f103 0317 	add.w	r3, r3, #23
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f040 82bf 	bne.w	800f448 <f_open+0x618>
		INIT_BUF(dj);
 800eeca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eece:	461a      	mov	r2, r3
 800eed0:	f107 0318 	add.w	r3, r7, #24
 800eed4:	3b04      	subs	r3, #4
 800eed6:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800eeda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eede:	461a      	mov	r2, r3
 800eee0:	4bd4      	ldr	r3, [pc, #848]	; (800f234 <f_open+0x404>)
 800eee2:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800eee6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eeea:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800eeee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800eef2:	3b18      	subs	r3, #24
 800eef4:	4611      	mov	r1, r2
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7ff faba 	bl	800e470 <follow_path>
 800eefc:	4603      	mov	r3, r0
 800eefe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ef02:	f102 0217 	add.w	r2, r2, #23
 800ef06:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800ef08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ef0c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800ef10:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ef14:	f102 0210 	add.w	r2, r2, #16
 800ef18:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ef1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ef1e:	f103 0317 	add.w	r3, r3, #23
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d126      	bne.n	800ef76 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800ef28:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ef2c:	f103 0310 	add.w	r3, r3, #16
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d106      	bne.n	800ef44 <f_open+0x114>
				res = FR_INVALID_NAME;
 800ef36:	2306      	movs	r3, #6
 800ef38:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ef3c:	f102 0217 	add.w	r2, r2, #23
 800ef40:	7013      	strb	r3, [r2, #0]
 800ef42:	e018      	b.n	800ef76 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ef48:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ef4c:	f023 0301 	bic.w	r3, r3, #1
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	bf14      	ite	ne
 800ef54:	2301      	movne	r3, #1
 800ef56:	2300      	moveq	r3, #0
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef60:	3b18      	subs	r3, #24
 800ef62:	4611      	mov	r1, r2
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fd fbcd 	bl	800c704 <chk_lock>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ef70:	f102 0217 	add.w	r2, r2, #23
 800ef74:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ef76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ef7a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ef7e:	f003 031c 	and.w	r3, r3, #28
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f000 813c 	beq.w	800f200 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800ef88:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ef8c:	f103 0317 	add.w	r3, r3, #23
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d02e      	beq.n	800eff4 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800ef96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ef9a:	f103 0317 	add.w	r3, r3, #23
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	2b04      	cmp	r3, #4
 800efa2:	d112      	bne.n	800efca <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800efa4:	f7fd fc1e 	bl	800c7e4 <enq_lock>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d007      	beq.n	800efbe <f_open+0x18e>
 800efae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800efb2:	3b18      	subs	r3, #24
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7fe ff79 	bl	800deac <dir_register>
 800efba:	4603      	mov	r3, r0
 800efbc:	e000      	b.n	800efc0 <f_open+0x190>
 800efbe:	2312      	movs	r3, #18
 800efc0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800efc4:	f102 0217 	add.w	r2, r2, #23
 800efc8:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800efca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800efce:	461a      	mov	r2, r3
 800efd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800efd4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800efd8:	f043 0308 	orr.w	r3, r3, #8
 800efdc:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800efe0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800efe4:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800efe8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800efec:	f102 0210 	add.w	r2, r2, #16
 800eff0:	6013      	str	r3, [r2, #0]
 800eff2:	e01f      	b.n	800f034 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eff4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800eff8:	f103 0310 	add.w	r3, r3, #16
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	330b      	adds	r3, #11
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	f003 0311 	and.w	r3, r3, #17
 800f006:	2b00      	cmp	r3, #0
 800f008:	d006      	beq.n	800f018 <f_open+0x1e8>
					res = FR_DENIED;
 800f00a:	2307      	movs	r3, #7
 800f00c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f010:	f102 0217 	add.w	r2, r2, #23
 800f014:	7013      	strb	r3, [r2, #0]
 800f016:	e00d      	b.n	800f034 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800f018:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f01c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f020:	f003 0304 	and.w	r3, r3, #4
 800f024:	2b00      	cmp	r3, #0
 800f026:	d005      	beq.n	800f034 <f_open+0x204>
						res = FR_EXIST;
 800f028:	2308      	movs	r3, #8
 800f02a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f02e:	f102 0217 	add.w	r2, r2, #23
 800f032:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f034:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f038:	f103 0317 	add.w	r3, r3, #23
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f040 8113 	bne.w	800f26a <f_open+0x43a>
 800f044:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f048:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f04c:	f003 0308 	and.w	r3, r3, #8
 800f050:	2b00      	cmp	r3, #0
 800f052:	f000 810a 	beq.w	800f26a <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800f056:	f7fd f9e3 	bl	800c420 <get_fattime>
 800f05a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f05e:	f103 030c 	add.w	r3, r3, #12
 800f062:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800f064:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f068:	f103 0310 	add.w	r3, r3, #16
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	330e      	adds	r3, #14
 800f070:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f074:	f102 020c 	add.w	r2, r2, #12
 800f078:	6812      	ldr	r2, [r2, #0]
 800f07a:	b2d2      	uxtb	r2, r2
 800f07c:	701a      	strb	r2, [r3, #0]
 800f07e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f082:	f103 030c 	add.w	r3, r3, #12
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	0a1b      	lsrs	r3, r3, #8
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f092:	f103 0310 	add.w	r3, r3, #16
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	330f      	adds	r3, #15
 800f09a:	b2d2      	uxtb	r2, r2
 800f09c:	701a      	strb	r2, [r3, #0]
 800f09e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f0a2:	f103 030c 	add.w	r3, r3, #12
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	0c1a      	lsrs	r2, r3, #16
 800f0aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f0ae:	f103 0310 	add.w	r3, r3, #16
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	3310      	adds	r3, #16
 800f0b6:	b2d2      	uxtb	r2, r2
 800f0b8:	701a      	strb	r2, [r3, #0]
 800f0ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f0be:	f103 030c 	add.w	r3, r3, #12
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	0e1a      	lsrs	r2, r3, #24
 800f0c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f0ca:	f103 0310 	add.w	r3, r3, #16
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	3311      	adds	r3, #17
 800f0d2:	b2d2      	uxtb	r2, r2
 800f0d4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800f0d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f0da:	f103 0310 	add.w	r3, r3, #16
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	330b      	adds	r3, #11
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800f0e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f0ea:	f103 0310 	add.w	r3, r3, #16
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	331c      	adds	r3, #28
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	701a      	strb	r2, [r3, #0]
 800f0f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f0fa:	f103 0310 	add.w	r3, r3, #16
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	331d      	adds	r3, #29
 800f102:	2200      	movs	r2, #0
 800f104:	701a      	strb	r2, [r3, #0]
 800f106:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f10a:	f103 0310 	add.w	r3, r3, #16
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	331e      	adds	r3, #30
 800f112:	2200      	movs	r2, #0
 800f114:	701a      	strb	r2, [r3, #0]
 800f116:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f11a:	f103 0310 	add.w	r3, r3, #16
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	331f      	adds	r3, #31
 800f122:	2200      	movs	r2, #0
 800f124:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800f126:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f12a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f12e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f132:	f102 0210 	add.w	r2, r2, #16
 800f136:	6811      	ldr	r1, [r2, #0]
 800f138:	4618      	mov	r0, r3
 800f13a:	f7fe fc06 	bl	800d94a <ld_clust>
 800f13e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f142:	f103 0308 	add.w	r3, r3, #8
 800f146:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800f148:	2100      	movs	r1, #0
 800f14a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f14e:	f103 0310 	add.w	r3, r3, #16
 800f152:	6818      	ldr	r0, [r3, #0]
 800f154:	f7fe fc27 	bl	800d9a6 <st_clust>
				dj.fs->wflag = 1;
 800f158:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f15c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f164:	2201      	movs	r2, #1
 800f166:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800f168:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f16c:	f103 0308 	add.w	r3, r3, #8
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d079      	beq.n	800f26a <f_open+0x43a>
					dw = dj.fs->winsect;
 800f176:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f17a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f17e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f184:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f188:	f102 020c 	add.w	r2, r2, #12
 800f18c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800f18e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f192:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f196:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f19a:	f102 0208 	add.w	r2, r2, #8
 800f19e:	6811      	ldr	r1, [r2, #0]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7fe f823 	bl	800d1ec <remove_chain>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f1ac:	f102 0217 	add.w	r2, r2, #23
 800f1b0:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800f1b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f1b6:	f103 0317 	add.w	r3, r3, #23
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d154      	bne.n	800f26a <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800f1c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f1c4:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 800f1c8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f1cc:	f103 0308 	add.w	r3, r3, #8
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	3b01      	subs	r3, #1
 800f1d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f1d8:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800f1da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f1de:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f1e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f1e6:	f102 020c 	add.w	r2, r2, #12
 800f1ea:	6811      	ldr	r1, [r2, #0]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7fd fc99 	bl	800cb24 <move_window>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f1f8:	f102 0217 	add.w	r2, r2, #23
 800f1fc:	7013      	strb	r3, [r2, #0]
 800f1fe:	e034      	b.n	800f26a <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800f200:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f204:	f103 0317 	add.w	r3, r3, #23
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d12d      	bne.n	800f26a <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800f20e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f212:	f103 0310 	add.w	r3, r3, #16
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	330b      	adds	r3, #11
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	f003 0310 	and.w	r3, r3, #16
 800f220:	2b00      	cmp	r3, #0
 800f222:	d009      	beq.n	800f238 <f_open+0x408>
					res = FR_NO_FILE;
 800f224:	2304      	movs	r3, #4
 800f226:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f22a:	f102 0217 	add.w	r2, r2, #23
 800f22e:	7013      	strb	r3, [r2, #0]
 800f230:	e01b      	b.n	800f26a <f_open+0x43a>
 800f232:	bf00      	nop
 800f234:	200025c8 	.word	0x200025c8
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800f238:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f23c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f240:	f003 0302 	and.w	r3, r3, #2
 800f244:	2b00      	cmp	r3, #0
 800f246:	d010      	beq.n	800f26a <f_open+0x43a>
 800f248:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f24c:	f103 0310 	add.w	r3, r3, #16
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	330b      	adds	r3, #11
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	f003 0301 	and.w	r3, r3, #1
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d005      	beq.n	800f26a <f_open+0x43a>
						res = FR_DENIED;
 800f25e:	2307      	movs	r3, #7
 800f260:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f264:	f102 0217 	add.w	r2, r2, #23
 800f268:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800f26a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f26e:	f103 0317 	add.w	r3, r3, #23
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d157      	bne.n	800f328 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f278:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f27c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f280:	f003 0308 	and.w	r3, r3, #8
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00a      	beq.n	800f29e <f_open+0x46e>
				mode |= FA__WRITTEN;
 800f288:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f28c:	461a      	mov	r2, r3
 800f28e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f292:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f296:	f043 0320 	orr.w	r3, r3, #32
 800f29a:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800f29e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f2a2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f2a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f2b0:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800f2b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f2b8:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800f2ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f2be:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f2c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f2cc:	f103 0310 	add.w	r3, r3, #16
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f2d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f2d8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f2dc:	f023 0301 	bic.w	r3, r3, #1
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	bf14      	ite	ne
 800f2e4:	2301      	movne	r3, #1
 800f2e6:	2300      	moveq	r3, #0
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f2f0:	3b18      	subs	r3, #24
 800f2f2:	4611      	mov	r1, r2
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7fd fa99 	bl	800c82c <inc_lock>
 800f2fa:	4602      	mov	r2, r0
 800f2fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f300:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f308:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800f30a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f30e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d105      	bne.n	800f328 <f_open+0x4f8>
 800f31c:	2302      	movs	r3, #2
 800f31e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f322:	f102 0217 	add.w	r2, r2, #23
 800f326:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800f328:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f32c:	f103 0317 	add.w	r3, r3, #23
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	f040 8088 	bne.w	800f448 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 800f338:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f33c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f344:	461a      	mov	r2, r3
 800f346:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f34a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f34e:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800f350:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f354:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f35c:	2200      	movs	r2, #0
 800f35e:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800f360:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f364:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f368:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f36c:	f102 0210 	add.w	r2, r2, #16
 800f370:	6811      	ldr	r1, [r2, #0]
 800f372:	4618      	mov	r0, r3
 800f374:	f7fe fae9 	bl	800d94a <ld_clust>
 800f378:	4602      	mov	r2, r0
 800f37a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f37e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f386:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800f388:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f38c:	f103 0310 	add.w	r3, r3, #16
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	331f      	adds	r3, #31
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	061a      	lsls	r2, r3, #24
 800f398:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f39c:	f103 0310 	add.w	r3, r3, #16
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	331e      	adds	r3, #30
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	041b      	lsls	r3, r3, #16
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f3ae:	f102 0210 	add.w	r2, r2, #16
 800f3b2:	6812      	ldr	r2, [r2, #0]
 800f3b4:	321d      	adds	r2, #29
 800f3b6:	7812      	ldrb	r2, [r2, #0]
 800f3b8:	0212      	lsls	r2, r2, #8
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f3c0:	f102 0210 	add.w	r2, r2, #16
 800f3c4:	6812      	ldr	r2, [r2, #0]
 800f3c6:	321c      	adds	r2, #28
 800f3c8:	7812      	ldrb	r2, [r2, #0]
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f3d0:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800f3d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f3d8:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800f3da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f3de:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800f3ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f3f0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f3f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800f3fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f402:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f40a:	461a      	mov	r2, r3
 800f40c:	2300      	movs	r3, #0
 800f40e:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800f410:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f414:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f418:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f41c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800f420:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f424:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800f426:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f42a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f42e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f438:	88da      	ldrh	r2, [r3, #6]
 800f43a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f43e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f446:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800f448:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f44c:	f103 0317 	add.w	r3, r3, #23
 800f450:	781b      	ldrb	r3, [r3, #0]
}
 800f452:	4618      	mov	r0, r3
 800f454:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop

0800f460 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b08a      	sub	sp, #40	; 0x28
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
 800f46c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	2200      	movs	r2, #0
 800f476:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f7ff fc53 	bl	800ed24 <validate>
 800f47e:	4603      	mov	r3, r0
 800f480:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800f482:	7dfb      	ldrb	r3, [r7, #23]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <f_write+0x2c>
 800f488:	7dfb      	ldrb	r3, [r7, #23]
 800f48a:	e21e      	b.n	800f8ca <f_write+0x46a>
	if (fp->err)							/* Check error */
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f492:	79db      	ldrb	r3, [r3, #7]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d004      	beq.n	800f4a2 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f49e:	79db      	ldrb	r3, [r3, #7]
 800f4a0:	e213      	b.n	800f8ca <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4a8:	799b      	ldrb	r3, [r3, #6]
 800f4aa:	f003 0302 	and.w	r3, r3, #2
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d101      	bne.n	800f4b6 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800f4b2:	2307      	movs	r3, #7
 800f4b4:	e209      	b.n	800f8ca <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4bc:	689a      	ldr	r2, [r3, #8]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	441a      	add	r2, r3
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	f080 81d9 	bcs.w	800f882 <f_write+0x422>
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800f4d4:	e1d5      	b.n	800f882 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4dc:	689b      	ldr	r3, [r3, #8]
 800f4de:	68fa      	ldr	r2, [r7, #12]
 800f4e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f4e4:	6812      	ldr	r2, [r2, #0]
 800f4e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f4ea:	8952      	ldrh	r2, [r2, #10]
 800f4ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4f0:	fb01 f202 	mul.w	r2, r1, r2
 800f4f4:	1a9b      	subs	r3, r3, r2
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	f040 8169 	bne.w	800f7ce <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f502:	689b      	ldr	r3, [r3, #8]
 800f504:	68fa      	ldr	r2, [r7, #12]
 800f506:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f50a:	6812      	ldr	r2, [r2, #0]
 800f50c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f510:	8952      	ldrh	r2, [r2, #10]
 800f512:	fbb3 f3f2 	udiv	r3, r3, r2
 800f516:	b2da      	uxtb	r2, r3
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f524:	789b      	ldrb	r3, [r3, #2]
 800f526:	3b01      	subs	r3, #1
 800f528:	b2db      	uxtb	r3, r3
 800f52a:	4013      	ands	r3, r2
 800f52c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800f52e:	7dbb      	ldrb	r3, [r7, #22]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d15f      	bne.n	800f5f4 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d111      	bne.n	800f564 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f546:	691b      	ldr	r3, [r3, #16]
 800f548:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d126      	bne.n	800f59e <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	2100      	movs	r1, #0
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fd fea7 	bl	800d2ae <create_chain>
 800f560:	6278      	str	r0, [r7, #36]	; 0x24
 800f562:	e01c      	b.n	800f59e <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d009      	beq.n	800f584 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f576:	689b      	ldr	r3, [r3, #8]
 800f578:	4619      	mov	r1, r3
 800f57a:	68f8      	ldr	r0, [r7, #12]
 800f57c:	f7fd ff3f 	bl	800d3fe <clmt_clust>
 800f580:	6278      	str	r0, [r7, #36]	; 0x24
 800f582:	e00c      	b.n	800f59e <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f58a:	681a      	ldr	r2, [r3, #0]
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f592:	695b      	ldr	r3, [r3, #20]
 800f594:	4619      	mov	r1, r3
 800f596:	4610      	mov	r0, r2
 800f598:	f7fd fe89 	bl	800d2ae <create_chain>
 800f59c:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	f000 8173 	beq.w	800f88c <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d106      	bne.n	800f5ba <f_write+0x15a>
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5b2:	2202      	movs	r2, #2
 800f5b4:	71da      	strb	r2, [r3, #7]
 800f5b6:	2302      	movs	r3, #2
 800f5b8:	e187      	b.n	800f8ca <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800f5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c0:	d106      	bne.n	800f5d0 <f_write+0x170>
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	71da      	strb	r2, [r3, #7]
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e17c      	b.n	800f8ca <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5da:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5e2:	691b      	ldr	r3, [r3, #16]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d105      	bne.n	800f5f4 <f_write+0x194>
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f2:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5fa:	799b      	ldrb	r3, [r3, #6]
 800f5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f600:	2b00      	cmp	r3, #0
 800f602:	d023      	beq.n	800f64c <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f610:	7858      	ldrb	r0, [r3, #1]
 800f612:	68f9      	ldr	r1, [r7, #12]
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f61a:	699a      	ldr	r2, [r3, #24]
 800f61c:	2301      	movs	r3, #1
 800f61e:	f7fc ffbb 	bl	800c598 <disk_write>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d006      	beq.n	800f636 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f62e:	2201      	movs	r2, #1
 800f630:	71da      	strb	r2, [r3, #7]
 800f632:	2301      	movs	r3, #1
 800f634:	e149      	b.n	800f8ca <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f63c:	799b      	ldrb	r3, [r3, #6]
 800f63e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f642:	b2da      	uxtb	r2, r3
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f64a:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f65a:	695b      	ldr	r3, [r3, #20]
 800f65c:	4619      	mov	r1, r3
 800f65e:	4610      	mov	r0, r2
 800f660:	f7fd fb51 	bl	800cd06 <clust2sect>
 800f664:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d106      	bne.n	800f67a <f_write+0x21a>
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f672:	2202      	movs	r2, #2
 800f674:	71da      	strb	r2, [r3, #7]
 800f676:	2302      	movs	r3, #2
 800f678:	e127      	b.n	800f8ca <f_write+0x46a>
			sect += csect;
 800f67a:	7dbb      	ldrb	r3, [r7, #22]
 800f67c:	693a      	ldr	r2, [r7, #16]
 800f67e:	4413      	add	r3, r2
 800f680:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f68e:	895b      	ldrh	r3, [r3, #10]
 800f690:	461a      	mov	r2, r3
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	fbb3 f3f2 	udiv	r3, r3, r2
 800f698:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f69a:	69fb      	ldr	r3, [r7, #28]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d069      	beq.n	800f774 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800f6a0:	7dba      	ldrb	r2, [r7, #22]
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	68fa      	ldr	r2, [r7, #12]
 800f6a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f6ac:	6812      	ldr	r2, [r2, #0]
 800f6ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f6b2:	7892      	ldrb	r2, [r2, #2]
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d90a      	bls.n	800f6ce <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6c4:	789b      	ldrb	r3, [r3, #2]
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	7dbb      	ldrb	r3, [r7, #22]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6da:	7858      	ldrb	r0, [r3, #1]
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	693a      	ldr	r2, [r7, #16]
 800f6e0:	69b9      	ldr	r1, [r7, #24]
 800f6e2:	f7fc ff59 	bl	800c598 <disk_write>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d006      	beq.n	800f6fa <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	71da      	strb	r2, [r3, #7]
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e0e7      	b.n	800f8ca <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f700:	699a      	ldr	r2, [r3, #24]
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	1ad3      	subs	r3, r2, r3
 800f706:	69fa      	ldr	r2, [r7, #28]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d926      	bls.n	800f75a <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800f70c:	68f8      	ldr	r0, [r7, #12]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f714:	699a      	ldr	r2, [r3, #24]
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f720:	6812      	ldr	r2, [r2, #0]
 800f722:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f726:	8952      	ldrh	r2, [r2, #10]
 800f728:	fb02 f303 	mul.w	r3, r2, r3
 800f72c:	69ba      	ldr	r2, [r7, #24]
 800f72e:	18d1      	adds	r1, r2, r3
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f73c:	895b      	ldrh	r3, [r3, #10]
 800f73e:	461a      	mov	r2, r3
 800f740:	f7fc ff68 	bl	800c614 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f74a:	799b      	ldrb	r3, [r3, #6]
 800f74c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f750:	b2da      	uxtb	r2, r3
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f758:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f766:	895b      	ldrh	r3, [r3, #10]
 800f768:	461a      	mov	r2, r3
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	fb02 f303 	mul.w	r3, r2, r3
 800f770:	623b      	str	r3, [r7, #32]
				continue;
 800f772:	e06e      	b.n	800f852 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f77a:	699b      	ldr	r3, [r3, #24]
 800f77c:	693a      	ldr	r2, [r7, #16]
 800f77e:	429a      	cmp	r2, r3
 800f780:	d01f      	beq.n	800f7c2 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f788:	689a      	ldr	r2, [r3, #8]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	429a      	cmp	r2, r3
 800f794:	d215      	bcs.n	800f7c2 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7a2:	7858      	ldrb	r0, [r3, #1]
 800f7a4:	68f9      	ldr	r1, [r7, #12]
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	693a      	ldr	r2, [r7, #16]
 800f7aa:	f7fc fed5 	bl	800c558 <disk_read>
 800f7ae:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d006      	beq.n	800f7c2 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	71da      	strb	r2, [r3, #7]
 800f7be:	2301      	movs	r3, #1
 800f7c0:	e083      	b.n	800f8ca <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7da:	895b      	ldrh	r3, [r3, #10]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	68fa      	ldr	r2, [r7, #12]
 800f7e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f7ec:	6812      	ldr	r2, [r2, #0]
 800f7ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f7f2:	8952      	ldrh	r2, [r2, #10]
 800f7f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f7f8:	fb01 f202 	mul.w	r2, r1, r2
 800f7fc:	1a9b      	subs	r3, r3, r2
 800f7fe:	1ac3      	subs	r3, r0, r3
 800f800:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800f802:	6a3a      	ldr	r2, [r7, #32]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	429a      	cmp	r2, r3
 800f808:	d901      	bls.n	800f80e <f_write+0x3ae>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f814:	689b      	ldr	r3, [r3, #8]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f81c:	6812      	ldr	r2, [r2, #0]
 800f81e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f822:	8952      	ldrh	r2, [r2, #10]
 800f824:	fbb3 f1f2 	udiv	r1, r3, r2
 800f828:	fb01 f202 	mul.w	r2, r1, r2
 800f82c:	1a9b      	subs	r3, r3, r2
 800f82e:	68fa      	ldr	r2, [r7, #12]
 800f830:	4413      	add	r3, r2
 800f832:	6a3a      	ldr	r2, [r7, #32]
 800f834:	69b9      	ldr	r1, [r7, #24]
 800f836:	4618      	mov	r0, r3
 800f838:	f7fc feec 	bl	800c614 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f842:	799b      	ldrb	r3, [r3, #6]
 800f844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f848:	b2da      	uxtb	r2, r3
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f850:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800f852:	69ba      	ldr	r2, [r7, #24]
 800f854:	6a3b      	ldr	r3, [r7, #32]
 800f856:	4413      	add	r3, r2
 800f858:	61bb      	str	r3, [r7, #24]
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f860:	689a      	ldr	r2, [r3, #8]
 800f862:	6a3b      	ldr	r3, [r7, #32]
 800f864:	4413      	add	r3, r2
 800f866:	68fa      	ldr	r2, [r7, #12]
 800f868:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f86c:	6093      	str	r3, [r2, #8]
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	6a3b      	ldr	r3, [r7, #32]
 800f874:	441a      	add	r2, r3
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	601a      	str	r2, [r3, #0]
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	6a3b      	ldr	r3, [r7, #32]
 800f87e:	1ad3      	subs	r3, r2, r3
 800f880:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2b00      	cmp	r3, #0
 800f886:	f47f ae26 	bne.w	800f4d6 <f_write+0x76>
 800f88a:	e000      	b.n	800f88e <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f88c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f894:	689a      	ldr	r2, [r3, #8]
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d907      	bls.n	800f8b2 <f_write+0x452>
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	68fa      	ldr	r2, [r7, #12]
 800f8ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f8b0:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8b8:	799b      	ldrb	r3, [r3, #6]
 800f8ba:	f043 0320 	orr.w	r3, r3, #32
 800f8be:	b2da      	uxtb	r2, r3
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8c6:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800f8c8:	2300      	movs	r3, #0
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3728      	adds	r7, #40	; 0x28
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b086      	sub	sp, #24
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f7ff fa22 	bl	800ed24 <validate>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f8e4:	7dfb      	ldrb	r3, [r7, #23]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f040 80bc 	bne.w	800fa64 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8f2:	799b      	ldrb	r3, [r3, #6]
 800f8f4:	f003 0320 	and.w	r3, r3, #32
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	f000 80b3 	beq.w	800fa64 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f904:	799b      	ldrb	r3, [r3, #6]
 800f906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d01e      	beq.n	800f94c <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f91a:	7858      	ldrb	r0, [r3, #1]
 800f91c:	6879      	ldr	r1, [r7, #4]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f924:	699a      	ldr	r2, [r3, #24]
 800f926:	2301      	movs	r3, #1
 800f928:	f7fc fe36 	bl	800c598 <disk_write>
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d001      	beq.n	800f936 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800f932:	2301      	movs	r3, #1
 800f934:	e097      	b.n	800fa66 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f93c:	799b      	ldrb	r3, [r3, #6]
 800f93e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f942:	b2da      	uxtb	r2, r3
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f94a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f95a:	69db      	ldr	r3, [r3, #28]
 800f95c:	4619      	mov	r1, r3
 800f95e:	4610      	mov	r0, r2
 800f960:	f7fd f8e0 	bl	800cb24 <move_window>
 800f964:	4603      	mov	r3, r0
 800f966:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800f968:	7dfb      	ldrb	r3, [r7, #23]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d17a      	bne.n	800fa64 <f_sync+0x192>
				dir = fp->dir_ptr;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f974:	6a1b      	ldr	r3, [r3, #32]
 800f976:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	330b      	adds	r3, #11
 800f97c:	781a      	ldrb	r2, [r3, #0]
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	330b      	adds	r3, #11
 800f982:	f042 0220 	orr.w	r2, r2, #32
 800f986:	b2d2      	uxtb	r2, r2
 800f988:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f990:	68da      	ldr	r2, [r3, #12]
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	331c      	adds	r3, #28
 800f996:	b2d2      	uxtb	r2, r2
 800f998:	701a      	strb	r2, [r3, #0]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	0a1b      	lsrs	r3, r3, #8
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	331d      	adds	r3, #29
 800f9ac:	b2d2      	uxtb	r2, r2
 800f9ae:	701a      	strb	r2, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	0c1a      	lsrs	r2, r3, #16
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	331e      	adds	r3, #30
 800f9be:	b2d2      	uxtb	r2, r2
 800f9c0:	701a      	strb	r2, [r3, #0]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	0e1a      	lsrs	r2, r3, #24
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	331f      	adds	r3, #31
 800f9d0:	b2d2      	uxtb	r2, r2
 800f9d2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9da:	691b      	ldr	r3, [r3, #16]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	6938      	ldr	r0, [r7, #16]
 800f9e0:	f7fd ffe1 	bl	800d9a6 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800f9e4:	f7fc fd1c 	bl	800c420 <get_fattime>
 800f9e8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	3316      	adds	r3, #22
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	b2d2      	uxtb	r2, r2
 800f9f2:	701a      	strb	r2, [r3, #0]
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	0a1b      	lsrs	r3, r3, #8
 800f9fa:	b29a      	uxth	r2, r3
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	3317      	adds	r3, #23
 800fa00:	b2d2      	uxtb	r2, r2
 800fa02:	701a      	strb	r2, [r3, #0]
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	0c1a      	lsrs	r2, r3, #16
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	3318      	adds	r3, #24
 800fa0c:	b2d2      	uxtb	r2, r2
 800fa0e:	701a      	strb	r2, [r3, #0]
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	0e1a      	lsrs	r2, r3, #24
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	3319      	adds	r3, #25
 800fa18:	b2d2      	uxtb	r2, r2
 800fa1a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	3312      	adds	r3, #18
 800fa20:	2200      	movs	r2, #0
 800fa22:	701a      	strb	r2, [r3, #0]
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	3313      	adds	r3, #19
 800fa28:	2200      	movs	r2, #0
 800fa2a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa32:	799b      	ldrb	r3, [r3, #6]
 800fa34:	f023 0320 	bic.w	r3, r3, #32
 800fa38:	b2da      	uxtb	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa40:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa4e:	2201      	movs	r2, #1
 800fa50:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fd f894 	bl	800cb88 <sync_fs>
 800fa60:	4603      	mov	r3, r0
 800fa62:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800fa64:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3718      	adds	r7, #24
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}

0800fa6e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800fa6e:	b580      	push	{r7, lr}
 800fa70:	b084      	sub	sp, #16
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7ff ff2b 	bl	800f8d2 <f_sync>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fa80:	7bfb      	ldrb	r3, [r7, #15]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d119      	bne.n	800faba <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7ff f94c 	bl	800ed24 <validate>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fa90:	7bfb      	ldrb	r3, [r7, #15]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d111      	bne.n	800faba <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fc ff80 	bl	800c9a4 <dec_lock>
 800faa4:	4603      	mov	r3, r0
 800faa6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800faa8:	7bfb      	ldrb	r3, [r7, #15]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d105      	bne.n	800faba <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fab4:	461a      	mov	r2, r3
 800fab6:	2300      	movs	r3, #0
 800fab8:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800faba:	7bfb      	ldrb	r3, [r7, #15]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3710      	adds	r7, #16
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b08e      	sub	sp, #56	; 0x38
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800fad0:	f107 030c 	add.w	r3, r7, #12
 800fad4:	2200      	movs	r2, #0
 800fad6:	4619      	mov	r1, r3
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7fe fdf1 	bl	800e6c0 <find_volume>
 800fade:	4603      	mov	r3, r0
 800fae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800faea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800faee:	2b00      	cmp	r3, #0
 800faf0:	f040 80bc 	bne.w	800fc6c <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fafa:	691a      	ldr	r2, [r3, #16]
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb02:	695b      	ldr	r3, [r3, #20]
 800fb04:	3b02      	subs	r3, #2
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d806      	bhi.n	800fb18 <f_getfree+0x54>
			*nclst = fs->free_clust;
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb10:	691a      	ldr	r2, [r3, #16]
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	601a      	str	r2, [r3, #0]
 800fb16:	e0a9      	b.n	800fc6c <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800fb22:	2300      	movs	r3, #0
 800fb24:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800fb26:	7efb      	ldrb	r3, [r7, #27]
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	d126      	bne.n	800fb7a <f_getfree+0xb6>
				clst = 2;
 800fb2c:	2302      	movs	r3, #2
 800fb2e:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800fb30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb32:	69f8      	ldr	r0, [r7, #28]
 800fb34:	f7fd f90b 	bl	800cd4e <get_fat>
 800fb38:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb40:	d103      	bne.n	800fb4a <f_getfree+0x86>
 800fb42:	2301      	movs	r3, #1
 800fb44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fb48:	e07c      	b.n	800fc44 <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	d103      	bne.n	800fb58 <f_getfree+0x94>
 800fb50:	2302      	movs	r3, #2
 800fb52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fb56:	e075      	b.n	800fc44 <f_getfree+0x180>
					if (stat == 0) n++;
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d102      	bne.n	800fb64 <f_getfree+0xa0>
 800fb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb60:	3301      	adds	r3, #1
 800fb62:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800fb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb66:	3301      	adds	r3, #1
 800fb68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb70:	695b      	ldr	r3, [r3, #20]
 800fb72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d3db      	bcc.n	800fb30 <f_getfree+0x6c>
 800fb78:	e064      	b.n	800fc44 <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb80:	695b      	ldr	r3, [r3, #20]
 800fb82:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800fb84:	69fb      	ldr	r3, [r7, #28]
 800fb86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb8a:	6a1b      	ldr	r3, [r3, #32]
 800fb8c:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	627b      	str	r3, [r7, #36]	; 0x24
 800fb92:	2300      	movs	r3, #0
 800fb94:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800fb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d114      	bne.n	800fbc6 <f_getfree+0x102>
						res = move_window(fs, sect++);
 800fb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9e:	1c5a      	adds	r2, r3, #1
 800fba0:	62ba      	str	r2, [r7, #40]	; 0x28
 800fba2:	4619      	mov	r1, r3
 800fba4:	69f8      	ldr	r0, [r7, #28]
 800fba6:	f7fc ffbd 	bl	800cb24 <move_window>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800fbb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d144      	bne.n	800fc42 <f_getfree+0x17e>
						p = fs->win.d8;
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbc2:	895b      	ldrh	r3, [r3, #10]
 800fbc4:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800fbc6:	7efb      	ldrb	r3, [r7, #27]
 800fbc8:	2b02      	cmp	r3, #2
 800fbca:	d115      	bne.n	800fbf8 <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 800fbcc:	6a3b      	ldr	r3, [r7, #32]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	021b      	lsls	r3, r3, #8
 800fbd4:	b21a      	sxth	r2, r3
 800fbd6:	6a3b      	ldr	r3, [r7, #32]
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	b21b      	sxth	r3, r3
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	b21b      	sxth	r3, r3
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d102      	bne.n	800fbea <f_getfree+0x126>
 800fbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800fbea:	6a3b      	ldr	r3, [r7, #32]
 800fbec:	3302      	adds	r3, #2
 800fbee:	623b      	str	r3, [r7, #32]
 800fbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf2:	3b02      	subs	r3, #2
 800fbf4:	627b      	str	r3, [r7, #36]	; 0x24
 800fbf6:	e01d      	b.n	800fc34 <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800fbf8:	6a3b      	ldr	r3, [r7, #32]
 800fbfa:	3303      	adds	r3, #3
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	061a      	lsls	r2, r3, #24
 800fc00:	6a3b      	ldr	r3, [r7, #32]
 800fc02:	3302      	adds	r3, #2
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	041b      	lsls	r3, r3, #16
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	6a3a      	ldr	r2, [r7, #32]
 800fc0c:	3201      	adds	r2, #1
 800fc0e:	7812      	ldrb	r2, [r2, #0]
 800fc10:	0212      	lsls	r2, r2, #8
 800fc12:	4313      	orrs	r3, r2
 800fc14:	6a3a      	ldr	r2, [r7, #32]
 800fc16:	7812      	ldrb	r2, [r2, #0]
 800fc18:	4313      	orrs	r3, r2
 800fc1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d102      	bne.n	800fc28 <f_getfree+0x164>
 800fc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc24:	3301      	adds	r3, #1
 800fc26:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800fc28:	6a3b      	ldr	r3, [r7, #32]
 800fc2a:	3304      	adds	r3, #4
 800fc2c:	623b      	str	r3, [r7, #32]
 800fc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc30:	3b04      	subs	r3, #4
 800fc32:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800fc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc36:	3b01      	subs	r3, #1
 800fc38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d1aa      	bne.n	800fb96 <f_getfree+0xd2>
 800fc40:	e000      	b.n	800fc44 <f_getfree+0x180>
						if (res != FR_OK) break;
 800fc42:	bf00      	nop
			}
			fs->free_clust = n;
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4e:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc56:	795b      	ldrb	r3, [r3, #5]
 800fc58:	f043 0301 	orr.w	r3, r3, #1
 800fc5c:	b2da      	uxtb	r2, r3
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc64:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc6a:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800fc6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3738      	adds	r7, #56	; 0x38
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b087      	sub	sp, #28
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	4613      	mov	r3, r2
 800fc84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fc86:	2301      	movs	r3, #1
 800fc88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800fc8e:	4b1e      	ldr	r3, [pc, #120]	; (800fd08 <FATFS_LinkDriverEx+0x90>)
 800fc90:	7a5b      	ldrb	r3, [r3, #9]
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d831      	bhi.n	800fcfc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fc98:	4b1b      	ldr	r3, [pc, #108]	; (800fd08 <FATFS_LinkDriverEx+0x90>)
 800fc9a:	7a5b      	ldrb	r3, [r3, #9]
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	461a      	mov	r2, r3
 800fca0:	4b19      	ldr	r3, [pc, #100]	; (800fd08 <FATFS_LinkDriverEx+0x90>)
 800fca2:	2100      	movs	r1, #0
 800fca4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800fca6:	4b18      	ldr	r3, [pc, #96]	; (800fd08 <FATFS_LinkDriverEx+0x90>)
 800fca8:	7a5b      	ldrb	r3, [r3, #9]
 800fcaa:	b2db      	uxtb	r3, r3
 800fcac:	4a16      	ldr	r2, [pc, #88]	; (800fd08 <FATFS_LinkDriverEx+0x90>)
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	4413      	add	r3, r2
 800fcb2:	68fa      	ldr	r2, [r7, #12]
 800fcb4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800fcb6:	4b14      	ldr	r3, [pc, #80]	; (800fd08 <FATFS_LinkDriverEx+0x90>)
 800fcb8:	7a5b      	ldrb	r3, [r3, #9]
 800fcba:	b2db      	uxtb	r3, r3
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	4b12      	ldr	r3, [pc, #72]	; (800fd08 <FATFS_LinkDriverEx+0x90>)
 800fcc0:	4413      	add	r3, r2
 800fcc2:	79fa      	ldrb	r2, [r7, #7]
 800fcc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fcc6:	4b10      	ldr	r3, [pc, #64]	; (800fd08 <FATFS_LinkDriverEx+0x90>)
 800fcc8:	7a5b      	ldrb	r3, [r3, #9]
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	1c5a      	adds	r2, r3, #1
 800fcce:	b2d1      	uxtb	r1, r2
 800fcd0:	4a0d      	ldr	r2, [pc, #52]	; (800fd08 <FATFS_LinkDriverEx+0x90>)
 800fcd2:	7251      	strb	r1, [r2, #9]
 800fcd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fcd6:	7dbb      	ldrb	r3, [r7, #22]
 800fcd8:	3330      	adds	r3, #48	; 0x30
 800fcda:	b2da      	uxtb	r2, r3
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	3301      	adds	r3, #1
 800fce4:	223a      	movs	r2, #58	; 0x3a
 800fce6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	3302      	adds	r3, #2
 800fcec:	222f      	movs	r2, #47	; 0x2f
 800fcee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	3303      	adds	r3, #3
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800fcfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	371c      	adds	r7, #28
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bc80      	pop	{r7}
 800fd06:	4770      	bx	lr
 800fd08:	200027c8 	.word	0x200027c8

0800fd0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fd16:	2200      	movs	r2, #0
 800fd18:	6839      	ldr	r1, [r7, #0]
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f7ff ffac 	bl	800fc78 <FATFS_LinkDriverEx>
 800fd20:	4603      	mov	r3, r0
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3708      	adds	r7, #8
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
	...

0800fd2c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b085      	sub	sp, #20
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	4603      	mov	r3, r0
 800fd34:	6039      	str	r1, [r7, #0]
 800fd36:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fd38:	88fb      	ldrh	r3, [r7, #6]
 800fd3a:	2b7f      	cmp	r3, #127	; 0x7f
 800fd3c:	d802      	bhi.n	800fd44 <ff_convert+0x18>
		c = chr;
 800fd3e:	88fb      	ldrh	r3, [r7, #6]
 800fd40:	81fb      	strh	r3, [r7, #14]
 800fd42:	e025      	b.n	800fd90 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00b      	beq.n	800fd62 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fd4a:	88fb      	ldrh	r3, [r7, #6]
 800fd4c:	2bff      	cmp	r3, #255	; 0xff
 800fd4e:	d805      	bhi.n	800fd5c <ff_convert+0x30>
 800fd50:	88fb      	ldrh	r3, [r7, #6]
 800fd52:	3b80      	subs	r3, #128	; 0x80
 800fd54:	4a11      	ldr	r2, [pc, #68]	; (800fd9c <ff_convert+0x70>)
 800fd56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd5a:	e000      	b.n	800fd5e <ff_convert+0x32>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	81fb      	strh	r3, [r7, #14]
 800fd60:	e016      	b.n	800fd90 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800fd62:	2300      	movs	r3, #0
 800fd64:	81fb      	strh	r3, [r7, #14]
 800fd66:	e009      	b.n	800fd7c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fd68:	89fb      	ldrh	r3, [r7, #14]
 800fd6a:	4a0c      	ldr	r2, [pc, #48]	; (800fd9c <ff_convert+0x70>)
 800fd6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd70:	88fa      	ldrh	r2, [r7, #6]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d006      	beq.n	800fd84 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fd76:	89fb      	ldrh	r3, [r7, #14]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	81fb      	strh	r3, [r7, #14]
 800fd7c:	89fb      	ldrh	r3, [r7, #14]
 800fd7e:	2b7f      	cmp	r3, #127	; 0x7f
 800fd80:	d9f2      	bls.n	800fd68 <ff_convert+0x3c>
 800fd82:	e000      	b.n	800fd86 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fd84:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fd86:	89fb      	ldrh	r3, [r7, #14]
 800fd88:	3380      	adds	r3, #128	; 0x80
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fd90:	89fb      	ldrh	r3, [r7, #14]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3714      	adds	r7, #20
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bc80      	pop	{r7}
 800fd9a:	4770      	bx	lr
 800fd9c:	08015c30 	.word	0x08015c30

0800fda0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b085      	sub	sp, #20
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	4603      	mov	r3, r0
 800fda8:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	60fb      	str	r3, [r7, #12]
 800fdae:	e002      	b.n	800fdb6 <ff_wtoupper+0x16>
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	60fb      	str	r3, [r7, #12]
 800fdb6:	4a0f      	ldr	r2, [pc, #60]	; (800fdf4 <ff_wtoupper+0x54>)
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d006      	beq.n	800fdd0 <ff_wtoupper+0x30>
 800fdc2:	4a0c      	ldr	r2, [pc, #48]	; (800fdf4 <ff_wtoupper+0x54>)
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdca:	88fa      	ldrh	r2, [r7, #6]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d1ef      	bne.n	800fdb0 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800fdd0:	4a08      	ldr	r2, [pc, #32]	; (800fdf4 <ff_wtoupper+0x54>)
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d004      	beq.n	800fde6 <ff_wtoupper+0x46>
 800fddc:	4a06      	ldr	r2, [pc, #24]	; (800fdf8 <ff_wtoupper+0x58>)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fde4:	e000      	b.n	800fde8 <ff_wtoupper+0x48>
 800fde6:	88fb      	ldrh	r3, [r7, #6]
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3714      	adds	r7, #20
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bc80      	pop	{r7}
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop
 800fdf4:	08015d30 	.word	0x08015d30
 800fdf8:	08015f10 	.word	0x08015f10

0800fdfc <acos>:
 800fdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdfe:	4604      	mov	r4, r0
 800fe00:	460d      	mov	r5, r1
 800fe02:	f000 ffd9 	bl	8010db8 <__ieee754_acos>
 800fe06:	4622      	mov	r2, r4
 800fe08:	4606      	mov	r6, r0
 800fe0a:	460f      	mov	r7, r1
 800fe0c:	462b      	mov	r3, r5
 800fe0e:	4620      	mov	r0, r4
 800fe10:	4629      	mov	r1, r5
 800fe12:	f7f0 fdfb 	bl	8000a0c <__aeabi_dcmpun>
 800fe16:	b988      	cbnz	r0, 800fe3c <acos+0x40>
 800fe18:	4620      	mov	r0, r4
 800fe1a:	4629      	mov	r1, r5
 800fe1c:	f000 fa74 	bl	8010308 <fabs>
 800fe20:	2200      	movs	r2, #0
 800fe22:	4b08      	ldr	r3, [pc, #32]	; (800fe44 <acos+0x48>)
 800fe24:	f7f0 fde8 	bl	80009f8 <__aeabi_dcmpgt>
 800fe28:	b140      	cbz	r0, 800fe3c <acos+0x40>
 800fe2a:	f003 fecb 	bl	8013bc4 <__errno>
 800fe2e:	2321      	movs	r3, #33	; 0x21
 800fe30:	6003      	str	r3, [r0, #0]
 800fe32:	4805      	ldr	r0, [pc, #20]	; (800fe48 <acos+0x4c>)
 800fe34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fe38:	f000 bafc 	b.w	8010434 <nan>
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	4639      	mov	r1, r7
 800fe40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe42:	bf00      	nop
 800fe44:	3ff00000 	.word	0x3ff00000
 800fe48:	080165e2 	.word	0x080165e2

0800fe4c <pow>:
 800fe4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe50:	4614      	mov	r4, r2
 800fe52:	461d      	mov	r5, r3
 800fe54:	4680      	mov	r8, r0
 800fe56:	4689      	mov	r9, r1
 800fe58:	f001 f9fa 	bl	8011250 <__ieee754_pow>
 800fe5c:	4622      	mov	r2, r4
 800fe5e:	4606      	mov	r6, r0
 800fe60:	460f      	mov	r7, r1
 800fe62:	462b      	mov	r3, r5
 800fe64:	4620      	mov	r0, r4
 800fe66:	4629      	mov	r1, r5
 800fe68:	f7f0 fdd0 	bl	8000a0c <__aeabi_dcmpun>
 800fe6c:	bbc8      	cbnz	r0, 800fee2 <pow+0x96>
 800fe6e:	2200      	movs	r2, #0
 800fe70:	2300      	movs	r3, #0
 800fe72:	4640      	mov	r0, r8
 800fe74:	4649      	mov	r1, r9
 800fe76:	f7f0 fd97 	bl	80009a8 <__aeabi_dcmpeq>
 800fe7a:	b1b8      	cbz	r0, 800feac <pow+0x60>
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	2300      	movs	r3, #0
 800fe80:	4620      	mov	r0, r4
 800fe82:	4629      	mov	r1, r5
 800fe84:	f7f0 fd90 	bl	80009a8 <__aeabi_dcmpeq>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	d141      	bne.n	800ff10 <pow+0xc4>
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	4629      	mov	r1, r5
 800fe90:	f000 faca 	bl	8010428 <finite>
 800fe94:	b328      	cbz	r0, 800fee2 <pow+0x96>
 800fe96:	2200      	movs	r2, #0
 800fe98:	2300      	movs	r3, #0
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	4629      	mov	r1, r5
 800fe9e:	f7f0 fd8d 	bl	80009bc <__aeabi_dcmplt>
 800fea2:	b1f0      	cbz	r0, 800fee2 <pow+0x96>
 800fea4:	f003 fe8e 	bl	8013bc4 <__errno>
 800fea8:	2322      	movs	r3, #34	; 0x22
 800feaa:	e019      	b.n	800fee0 <pow+0x94>
 800feac:	4630      	mov	r0, r6
 800feae:	4639      	mov	r1, r7
 800feb0:	f000 faba 	bl	8010428 <finite>
 800feb4:	b9c8      	cbnz	r0, 800feea <pow+0x9e>
 800feb6:	4640      	mov	r0, r8
 800feb8:	4649      	mov	r1, r9
 800feba:	f000 fab5 	bl	8010428 <finite>
 800febe:	b1a0      	cbz	r0, 800feea <pow+0x9e>
 800fec0:	4620      	mov	r0, r4
 800fec2:	4629      	mov	r1, r5
 800fec4:	f000 fab0 	bl	8010428 <finite>
 800fec8:	b178      	cbz	r0, 800feea <pow+0x9e>
 800feca:	4632      	mov	r2, r6
 800fecc:	463b      	mov	r3, r7
 800fece:	4630      	mov	r0, r6
 800fed0:	4639      	mov	r1, r7
 800fed2:	f7f0 fd9b 	bl	8000a0c <__aeabi_dcmpun>
 800fed6:	2800      	cmp	r0, #0
 800fed8:	d0e4      	beq.n	800fea4 <pow+0x58>
 800feda:	f003 fe73 	bl	8013bc4 <__errno>
 800fede:	2321      	movs	r3, #33	; 0x21
 800fee0:	6003      	str	r3, [r0, #0]
 800fee2:	4630      	mov	r0, r6
 800fee4:	4639      	mov	r1, r7
 800fee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800feea:	2200      	movs	r2, #0
 800feec:	2300      	movs	r3, #0
 800feee:	4630      	mov	r0, r6
 800fef0:	4639      	mov	r1, r7
 800fef2:	f7f0 fd59 	bl	80009a8 <__aeabi_dcmpeq>
 800fef6:	2800      	cmp	r0, #0
 800fef8:	d0f3      	beq.n	800fee2 <pow+0x96>
 800fefa:	4640      	mov	r0, r8
 800fefc:	4649      	mov	r1, r9
 800fefe:	f000 fa93 	bl	8010428 <finite>
 800ff02:	2800      	cmp	r0, #0
 800ff04:	d0ed      	beq.n	800fee2 <pow+0x96>
 800ff06:	4620      	mov	r0, r4
 800ff08:	4629      	mov	r1, r5
 800ff0a:	f000 fa8d 	bl	8010428 <finite>
 800ff0e:	e7c8      	b.n	800fea2 <pow+0x56>
 800ff10:	2600      	movs	r6, #0
 800ff12:	4f01      	ldr	r7, [pc, #4]	; (800ff18 <pow+0xcc>)
 800ff14:	e7e5      	b.n	800fee2 <pow+0x96>
 800ff16:	bf00      	nop
 800ff18:	3ff00000 	.word	0x3ff00000

0800ff1c <sqrt>:
 800ff1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff1e:	4606      	mov	r6, r0
 800ff20:	460f      	mov	r7, r1
 800ff22:	f000 fa8d 	bl	8010440 <__ieee754_sqrt>
 800ff26:	4632      	mov	r2, r6
 800ff28:	4604      	mov	r4, r0
 800ff2a:	460d      	mov	r5, r1
 800ff2c:	463b      	mov	r3, r7
 800ff2e:	4630      	mov	r0, r6
 800ff30:	4639      	mov	r1, r7
 800ff32:	f7f0 fd6b 	bl	8000a0c <__aeabi_dcmpun>
 800ff36:	b990      	cbnz	r0, 800ff5e <sqrt+0x42>
 800ff38:	2200      	movs	r2, #0
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	4630      	mov	r0, r6
 800ff3e:	4639      	mov	r1, r7
 800ff40:	f7f0 fd3c 	bl	80009bc <__aeabi_dcmplt>
 800ff44:	b158      	cbz	r0, 800ff5e <sqrt+0x42>
 800ff46:	f003 fe3d 	bl	8013bc4 <__errno>
 800ff4a:	2321      	movs	r3, #33	; 0x21
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	6003      	str	r3, [r0, #0]
 800ff50:	2300      	movs	r3, #0
 800ff52:	4610      	mov	r0, r2
 800ff54:	4619      	mov	r1, r3
 800ff56:	f7f0 fbe9 	bl	800072c <__aeabi_ddiv>
 800ff5a:	4604      	mov	r4, r0
 800ff5c:	460d      	mov	r5, r1
 800ff5e:	4620      	mov	r0, r4
 800ff60:	4629      	mov	r1, r5
 800ff62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff64:	0000      	movs	r0, r0
	...

0800ff68 <atan>:
 800ff68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6c:	4bb6      	ldr	r3, [pc, #728]	; (8010248 <atan+0x2e0>)
 800ff6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ff72:	429e      	cmp	r6, r3
 800ff74:	4604      	mov	r4, r0
 800ff76:	460d      	mov	r5, r1
 800ff78:	468b      	mov	fp, r1
 800ff7a:	dd17      	ble.n	800ffac <atan+0x44>
 800ff7c:	4bb3      	ldr	r3, [pc, #716]	; (801024c <atan+0x2e4>)
 800ff7e:	429e      	cmp	r6, r3
 800ff80:	dc01      	bgt.n	800ff86 <atan+0x1e>
 800ff82:	d109      	bne.n	800ff98 <atan+0x30>
 800ff84:	b140      	cbz	r0, 800ff98 <atan+0x30>
 800ff86:	4622      	mov	r2, r4
 800ff88:	462b      	mov	r3, r5
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	4629      	mov	r1, r5
 800ff8e:	f7f0 f8ed 	bl	800016c <__adddf3>
 800ff92:	4604      	mov	r4, r0
 800ff94:	460d      	mov	r5, r1
 800ff96:	e005      	b.n	800ffa4 <atan+0x3c>
 800ff98:	f1bb 0f00 	cmp.w	fp, #0
 800ff9c:	4cac      	ldr	r4, [pc, #688]	; (8010250 <atan+0x2e8>)
 800ff9e:	f300 8121 	bgt.w	80101e4 <atan+0x27c>
 800ffa2:	4dac      	ldr	r5, [pc, #688]	; (8010254 <atan+0x2ec>)
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	4629      	mov	r1, r5
 800ffa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffac:	4baa      	ldr	r3, [pc, #680]	; (8010258 <atan+0x2f0>)
 800ffae:	429e      	cmp	r6, r3
 800ffb0:	dc11      	bgt.n	800ffd6 <atan+0x6e>
 800ffb2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ffb6:	429e      	cmp	r6, r3
 800ffb8:	dc0a      	bgt.n	800ffd0 <atan+0x68>
 800ffba:	a38b      	add	r3, pc, #556	; (adr r3, 80101e8 <atan+0x280>)
 800ffbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc0:	f7f0 f8d4 	bl	800016c <__adddf3>
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	4ba5      	ldr	r3, [pc, #660]	; (801025c <atan+0x2f4>)
 800ffc8:	f7f0 fd16 	bl	80009f8 <__aeabi_dcmpgt>
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	d1e9      	bne.n	800ffa4 <atan+0x3c>
 800ffd0:	f04f 3aff 	mov.w	sl, #4294967295
 800ffd4:	e027      	b.n	8010026 <atan+0xbe>
 800ffd6:	f000 f997 	bl	8010308 <fabs>
 800ffda:	4ba1      	ldr	r3, [pc, #644]	; (8010260 <atan+0x2f8>)
 800ffdc:	4604      	mov	r4, r0
 800ffde:	429e      	cmp	r6, r3
 800ffe0:	460d      	mov	r5, r1
 800ffe2:	f300 80b8 	bgt.w	8010156 <atan+0x1ee>
 800ffe6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ffea:	429e      	cmp	r6, r3
 800ffec:	f300 809c 	bgt.w	8010128 <atan+0x1c0>
 800fff0:	4602      	mov	r2, r0
 800fff2:	460b      	mov	r3, r1
 800fff4:	f7f0 f8ba 	bl	800016c <__adddf3>
 800fff8:	2200      	movs	r2, #0
 800fffa:	4b98      	ldr	r3, [pc, #608]	; (801025c <atan+0x2f4>)
 800fffc:	f7f0 f8b4 	bl	8000168 <__aeabi_dsub>
 8010000:	2200      	movs	r2, #0
 8010002:	4606      	mov	r6, r0
 8010004:	460f      	mov	r7, r1
 8010006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801000a:	4620      	mov	r0, r4
 801000c:	4629      	mov	r1, r5
 801000e:	f7f0 f8ad 	bl	800016c <__adddf3>
 8010012:	4602      	mov	r2, r0
 8010014:	460b      	mov	r3, r1
 8010016:	4630      	mov	r0, r6
 8010018:	4639      	mov	r1, r7
 801001a:	f7f0 fb87 	bl	800072c <__aeabi_ddiv>
 801001e:	f04f 0a00 	mov.w	sl, #0
 8010022:	4604      	mov	r4, r0
 8010024:	460d      	mov	r5, r1
 8010026:	4622      	mov	r2, r4
 8010028:	462b      	mov	r3, r5
 801002a:	4620      	mov	r0, r4
 801002c:	4629      	mov	r1, r5
 801002e:	f7f0 fa53 	bl	80004d8 <__aeabi_dmul>
 8010032:	4602      	mov	r2, r0
 8010034:	460b      	mov	r3, r1
 8010036:	4680      	mov	r8, r0
 8010038:	4689      	mov	r9, r1
 801003a:	f7f0 fa4d 	bl	80004d8 <__aeabi_dmul>
 801003e:	a36c      	add	r3, pc, #432	; (adr r3, 80101f0 <atan+0x288>)
 8010040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010044:	4606      	mov	r6, r0
 8010046:	460f      	mov	r7, r1
 8010048:	f7f0 fa46 	bl	80004d8 <__aeabi_dmul>
 801004c:	a36a      	add	r3, pc, #424	; (adr r3, 80101f8 <atan+0x290>)
 801004e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010052:	f7f0 f88b 	bl	800016c <__adddf3>
 8010056:	4632      	mov	r2, r6
 8010058:	463b      	mov	r3, r7
 801005a:	f7f0 fa3d 	bl	80004d8 <__aeabi_dmul>
 801005e:	a368      	add	r3, pc, #416	; (adr r3, 8010200 <atan+0x298>)
 8010060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010064:	f7f0 f882 	bl	800016c <__adddf3>
 8010068:	4632      	mov	r2, r6
 801006a:	463b      	mov	r3, r7
 801006c:	f7f0 fa34 	bl	80004d8 <__aeabi_dmul>
 8010070:	a365      	add	r3, pc, #404	; (adr r3, 8010208 <atan+0x2a0>)
 8010072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010076:	f7f0 f879 	bl	800016c <__adddf3>
 801007a:	4632      	mov	r2, r6
 801007c:	463b      	mov	r3, r7
 801007e:	f7f0 fa2b 	bl	80004d8 <__aeabi_dmul>
 8010082:	a363      	add	r3, pc, #396	; (adr r3, 8010210 <atan+0x2a8>)
 8010084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010088:	f7f0 f870 	bl	800016c <__adddf3>
 801008c:	4632      	mov	r2, r6
 801008e:	463b      	mov	r3, r7
 8010090:	f7f0 fa22 	bl	80004d8 <__aeabi_dmul>
 8010094:	a360      	add	r3, pc, #384	; (adr r3, 8010218 <atan+0x2b0>)
 8010096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009a:	f7f0 f867 	bl	800016c <__adddf3>
 801009e:	4642      	mov	r2, r8
 80100a0:	464b      	mov	r3, r9
 80100a2:	f7f0 fa19 	bl	80004d8 <__aeabi_dmul>
 80100a6:	a35e      	add	r3, pc, #376	; (adr r3, 8010220 <atan+0x2b8>)
 80100a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ac:	4680      	mov	r8, r0
 80100ae:	4689      	mov	r9, r1
 80100b0:	4630      	mov	r0, r6
 80100b2:	4639      	mov	r1, r7
 80100b4:	f7f0 fa10 	bl	80004d8 <__aeabi_dmul>
 80100b8:	a35b      	add	r3, pc, #364	; (adr r3, 8010228 <atan+0x2c0>)
 80100ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100be:	f7f0 f853 	bl	8000168 <__aeabi_dsub>
 80100c2:	4632      	mov	r2, r6
 80100c4:	463b      	mov	r3, r7
 80100c6:	f7f0 fa07 	bl	80004d8 <__aeabi_dmul>
 80100ca:	a359      	add	r3, pc, #356	; (adr r3, 8010230 <atan+0x2c8>)
 80100cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d0:	f7f0 f84a 	bl	8000168 <__aeabi_dsub>
 80100d4:	4632      	mov	r2, r6
 80100d6:	463b      	mov	r3, r7
 80100d8:	f7f0 f9fe 	bl	80004d8 <__aeabi_dmul>
 80100dc:	a356      	add	r3, pc, #344	; (adr r3, 8010238 <atan+0x2d0>)
 80100de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e2:	f7f0 f841 	bl	8000168 <__aeabi_dsub>
 80100e6:	4632      	mov	r2, r6
 80100e8:	463b      	mov	r3, r7
 80100ea:	f7f0 f9f5 	bl	80004d8 <__aeabi_dmul>
 80100ee:	a354      	add	r3, pc, #336	; (adr r3, 8010240 <atan+0x2d8>)
 80100f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f4:	f7f0 f838 	bl	8000168 <__aeabi_dsub>
 80100f8:	4632      	mov	r2, r6
 80100fa:	463b      	mov	r3, r7
 80100fc:	f7f0 f9ec 	bl	80004d8 <__aeabi_dmul>
 8010100:	4602      	mov	r2, r0
 8010102:	460b      	mov	r3, r1
 8010104:	4640      	mov	r0, r8
 8010106:	4649      	mov	r1, r9
 8010108:	f7f0 f830 	bl	800016c <__adddf3>
 801010c:	4622      	mov	r2, r4
 801010e:	462b      	mov	r3, r5
 8010110:	f7f0 f9e2 	bl	80004d8 <__aeabi_dmul>
 8010114:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010118:	4602      	mov	r2, r0
 801011a:	460b      	mov	r3, r1
 801011c:	d144      	bne.n	80101a8 <atan+0x240>
 801011e:	4620      	mov	r0, r4
 8010120:	4629      	mov	r1, r5
 8010122:	f7f0 f821 	bl	8000168 <__aeabi_dsub>
 8010126:	e734      	b.n	800ff92 <atan+0x2a>
 8010128:	2200      	movs	r2, #0
 801012a:	4b4c      	ldr	r3, [pc, #304]	; (801025c <atan+0x2f4>)
 801012c:	f7f0 f81c 	bl	8000168 <__aeabi_dsub>
 8010130:	2200      	movs	r2, #0
 8010132:	4606      	mov	r6, r0
 8010134:	460f      	mov	r7, r1
 8010136:	4620      	mov	r0, r4
 8010138:	4629      	mov	r1, r5
 801013a:	4b48      	ldr	r3, [pc, #288]	; (801025c <atan+0x2f4>)
 801013c:	f7f0 f816 	bl	800016c <__adddf3>
 8010140:	4602      	mov	r2, r0
 8010142:	460b      	mov	r3, r1
 8010144:	4630      	mov	r0, r6
 8010146:	4639      	mov	r1, r7
 8010148:	f7f0 faf0 	bl	800072c <__aeabi_ddiv>
 801014c:	f04f 0a01 	mov.w	sl, #1
 8010150:	4604      	mov	r4, r0
 8010152:	460d      	mov	r5, r1
 8010154:	e767      	b.n	8010026 <atan+0xbe>
 8010156:	4b43      	ldr	r3, [pc, #268]	; (8010264 <atan+0x2fc>)
 8010158:	429e      	cmp	r6, r3
 801015a:	da1a      	bge.n	8010192 <atan+0x22a>
 801015c:	2200      	movs	r2, #0
 801015e:	4b42      	ldr	r3, [pc, #264]	; (8010268 <atan+0x300>)
 8010160:	f7f0 f802 	bl	8000168 <__aeabi_dsub>
 8010164:	2200      	movs	r2, #0
 8010166:	4606      	mov	r6, r0
 8010168:	460f      	mov	r7, r1
 801016a:	4620      	mov	r0, r4
 801016c:	4629      	mov	r1, r5
 801016e:	4b3e      	ldr	r3, [pc, #248]	; (8010268 <atan+0x300>)
 8010170:	f7f0 f9b2 	bl	80004d8 <__aeabi_dmul>
 8010174:	2200      	movs	r2, #0
 8010176:	4b39      	ldr	r3, [pc, #228]	; (801025c <atan+0x2f4>)
 8010178:	f7ef fff8 	bl	800016c <__adddf3>
 801017c:	4602      	mov	r2, r0
 801017e:	460b      	mov	r3, r1
 8010180:	4630      	mov	r0, r6
 8010182:	4639      	mov	r1, r7
 8010184:	f7f0 fad2 	bl	800072c <__aeabi_ddiv>
 8010188:	f04f 0a02 	mov.w	sl, #2
 801018c:	4604      	mov	r4, r0
 801018e:	460d      	mov	r5, r1
 8010190:	e749      	b.n	8010026 <atan+0xbe>
 8010192:	4602      	mov	r2, r0
 8010194:	460b      	mov	r3, r1
 8010196:	2000      	movs	r0, #0
 8010198:	4934      	ldr	r1, [pc, #208]	; (801026c <atan+0x304>)
 801019a:	f7f0 fac7 	bl	800072c <__aeabi_ddiv>
 801019e:	f04f 0a03 	mov.w	sl, #3
 80101a2:	4604      	mov	r4, r0
 80101a4:	460d      	mov	r5, r1
 80101a6:	e73e      	b.n	8010026 <atan+0xbe>
 80101a8:	4b31      	ldr	r3, [pc, #196]	; (8010270 <atan+0x308>)
 80101aa:	4e32      	ldr	r6, [pc, #200]	; (8010274 <atan+0x30c>)
 80101ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80101b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b4:	f7ef ffd8 	bl	8000168 <__aeabi_dsub>
 80101b8:	4622      	mov	r2, r4
 80101ba:	462b      	mov	r3, r5
 80101bc:	f7ef ffd4 	bl	8000168 <__aeabi_dsub>
 80101c0:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80101c4:	4602      	mov	r2, r0
 80101c6:	460b      	mov	r3, r1
 80101c8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80101cc:	f7ef ffcc 	bl	8000168 <__aeabi_dsub>
 80101d0:	f1bb 0f00 	cmp.w	fp, #0
 80101d4:	4604      	mov	r4, r0
 80101d6:	460d      	mov	r5, r1
 80101d8:	f6bf aee4 	bge.w	800ffa4 <atan+0x3c>
 80101dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101e0:	461d      	mov	r5, r3
 80101e2:	e6df      	b.n	800ffa4 <atan+0x3c>
 80101e4:	4d24      	ldr	r5, [pc, #144]	; (8010278 <atan+0x310>)
 80101e6:	e6dd      	b.n	800ffa4 <atan+0x3c>
 80101e8:	8800759c 	.word	0x8800759c
 80101ec:	7e37e43c 	.word	0x7e37e43c
 80101f0:	e322da11 	.word	0xe322da11
 80101f4:	3f90ad3a 	.word	0x3f90ad3a
 80101f8:	24760deb 	.word	0x24760deb
 80101fc:	3fa97b4b 	.word	0x3fa97b4b
 8010200:	a0d03d51 	.word	0xa0d03d51
 8010204:	3fb10d66 	.word	0x3fb10d66
 8010208:	c54c206e 	.word	0xc54c206e
 801020c:	3fb745cd 	.word	0x3fb745cd
 8010210:	920083ff 	.word	0x920083ff
 8010214:	3fc24924 	.word	0x3fc24924
 8010218:	5555550d 	.word	0x5555550d
 801021c:	3fd55555 	.word	0x3fd55555
 8010220:	2c6a6c2f 	.word	0x2c6a6c2f
 8010224:	bfa2b444 	.word	0xbfa2b444
 8010228:	52defd9a 	.word	0x52defd9a
 801022c:	3fadde2d 	.word	0x3fadde2d
 8010230:	af749a6d 	.word	0xaf749a6d
 8010234:	3fb3b0f2 	.word	0x3fb3b0f2
 8010238:	fe231671 	.word	0xfe231671
 801023c:	3fbc71c6 	.word	0x3fbc71c6
 8010240:	9998ebc4 	.word	0x9998ebc4
 8010244:	3fc99999 	.word	0x3fc99999
 8010248:	440fffff 	.word	0x440fffff
 801024c:	7ff00000 	.word	0x7ff00000
 8010250:	54442d18 	.word	0x54442d18
 8010254:	bff921fb 	.word	0xbff921fb
 8010258:	3fdbffff 	.word	0x3fdbffff
 801025c:	3ff00000 	.word	0x3ff00000
 8010260:	3ff2ffff 	.word	0x3ff2ffff
 8010264:	40038000 	.word	0x40038000
 8010268:	3ff80000 	.word	0x3ff80000
 801026c:	bff00000 	.word	0xbff00000
 8010270:	08016110 	.word	0x08016110
 8010274:	080160f0 	.word	0x080160f0
 8010278:	3ff921fb 	.word	0x3ff921fb

0801027c <cos>:
 801027c:	b530      	push	{r4, r5, lr}
 801027e:	4a20      	ldr	r2, [pc, #128]	; (8010300 <cos+0x84>)
 8010280:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010284:	4293      	cmp	r3, r2
 8010286:	b087      	sub	sp, #28
 8010288:	dc06      	bgt.n	8010298 <cos+0x1c>
 801028a:	2200      	movs	r2, #0
 801028c:	2300      	movs	r3, #0
 801028e:	b007      	add	sp, #28
 8010290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010294:	f000 ba1c 	b.w	80106d0 <__kernel_cos>
 8010298:	4a1a      	ldr	r2, [pc, #104]	; (8010304 <cos+0x88>)
 801029a:	4293      	cmp	r3, r2
 801029c:	dd05      	ble.n	80102aa <cos+0x2e>
 801029e:	4602      	mov	r2, r0
 80102a0:	460b      	mov	r3, r1
 80102a2:	f7ef ff61 	bl	8000168 <__aeabi_dsub>
 80102a6:	b007      	add	sp, #28
 80102a8:	bd30      	pop	{r4, r5, pc}
 80102aa:	aa02      	add	r2, sp, #8
 80102ac:	f001 fce8 	bl	8011c80 <__ieee754_rem_pio2>
 80102b0:	f000 0003 	and.w	r0, r0, #3
 80102b4:	2801      	cmp	r0, #1
 80102b6:	d009      	beq.n	80102cc <cos+0x50>
 80102b8:	2802      	cmp	r0, #2
 80102ba:	d011      	beq.n	80102e0 <cos+0x64>
 80102bc:	b9b8      	cbnz	r0, 80102ee <cos+0x72>
 80102be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102c6:	f000 fa03 	bl	80106d0 <__kernel_cos>
 80102ca:	e7ec      	b.n	80102a6 <cos+0x2a>
 80102cc:	9000      	str	r0, [sp, #0]
 80102ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102d6:	f000 fabb 	bl	8010850 <__kernel_sin>
 80102da:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80102de:	e7e2      	b.n	80102a6 <cos+0x2a>
 80102e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102e8:	f000 f9f2 	bl	80106d0 <__kernel_cos>
 80102ec:	e7f5      	b.n	80102da <cos+0x5e>
 80102ee:	2301      	movs	r3, #1
 80102f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102f4:	9300      	str	r3, [sp, #0]
 80102f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102fa:	f000 faa9 	bl	8010850 <__kernel_sin>
 80102fe:	e7d2      	b.n	80102a6 <cos+0x2a>
 8010300:	3fe921fb 	.word	0x3fe921fb
 8010304:	7fefffff 	.word	0x7fefffff

08010308 <fabs>:
 8010308:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801030c:	4619      	mov	r1, r3
 801030e:	4770      	bx	lr

08010310 <sin>:
 8010310:	b530      	push	{r4, r5, lr}
 8010312:	4a20      	ldr	r2, [pc, #128]	; (8010394 <sin+0x84>)
 8010314:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010318:	4293      	cmp	r3, r2
 801031a:	b087      	sub	sp, #28
 801031c:	dc06      	bgt.n	801032c <sin+0x1c>
 801031e:	2300      	movs	r3, #0
 8010320:	2200      	movs	r2, #0
 8010322:	9300      	str	r3, [sp, #0]
 8010324:	2300      	movs	r3, #0
 8010326:	f000 fa93 	bl	8010850 <__kernel_sin>
 801032a:	e006      	b.n	801033a <sin+0x2a>
 801032c:	4a1a      	ldr	r2, [pc, #104]	; (8010398 <sin+0x88>)
 801032e:	4293      	cmp	r3, r2
 8010330:	dd05      	ble.n	801033e <sin+0x2e>
 8010332:	4602      	mov	r2, r0
 8010334:	460b      	mov	r3, r1
 8010336:	f7ef ff17 	bl	8000168 <__aeabi_dsub>
 801033a:	b007      	add	sp, #28
 801033c:	bd30      	pop	{r4, r5, pc}
 801033e:	aa02      	add	r2, sp, #8
 8010340:	f001 fc9e 	bl	8011c80 <__ieee754_rem_pio2>
 8010344:	f000 0003 	and.w	r0, r0, #3
 8010348:	2801      	cmp	r0, #1
 801034a:	d009      	beq.n	8010360 <sin+0x50>
 801034c:	2802      	cmp	r0, #2
 801034e:	d00e      	beq.n	801036e <sin+0x5e>
 8010350:	b9c0      	cbnz	r0, 8010384 <sin+0x74>
 8010352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010356:	2301      	movs	r3, #1
 8010358:	9300      	str	r3, [sp, #0]
 801035a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801035e:	e7e2      	b.n	8010326 <sin+0x16>
 8010360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010368:	f000 f9b2 	bl	80106d0 <__kernel_cos>
 801036c:	e7e5      	b.n	801033a <sin+0x2a>
 801036e:	2301      	movs	r3, #1
 8010370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010374:	9300      	str	r3, [sp, #0]
 8010376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801037a:	f000 fa69 	bl	8010850 <__kernel_sin>
 801037e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8010382:	e7da      	b.n	801033a <sin+0x2a>
 8010384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801038c:	f000 f9a0 	bl	80106d0 <__kernel_cos>
 8010390:	e7f5      	b.n	801037e <sin+0x6e>
 8010392:	bf00      	nop
 8010394:	3fe921fb 	.word	0x3fe921fb
 8010398:	7fefffff 	.word	0x7fefffff

0801039c <tan>:
 801039c:	b530      	push	{r4, r5, lr}
 801039e:	4a12      	ldr	r2, [pc, #72]	; (80103e8 <tan+0x4c>)
 80103a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80103a4:	4293      	cmp	r3, r2
 80103a6:	b087      	sub	sp, #28
 80103a8:	dc06      	bgt.n	80103b8 <tan+0x1c>
 80103aa:	2301      	movs	r3, #1
 80103ac:	2200      	movs	r2, #0
 80103ae:	9300      	str	r3, [sp, #0]
 80103b0:	2300      	movs	r3, #0
 80103b2:	f000 fb05 	bl	80109c0 <__kernel_tan>
 80103b6:	e006      	b.n	80103c6 <tan+0x2a>
 80103b8:	4a0c      	ldr	r2, [pc, #48]	; (80103ec <tan+0x50>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	dd05      	ble.n	80103ca <tan+0x2e>
 80103be:	4602      	mov	r2, r0
 80103c0:	460b      	mov	r3, r1
 80103c2:	f7ef fed1 	bl	8000168 <__aeabi_dsub>
 80103c6:	b007      	add	sp, #28
 80103c8:	bd30      	pop	{r4, r5, pc}
 80103ca:	aa02      	add	r2, sp, #8
 80103cc:	f001 fc58 	bl	8011c80 <__ieee754_rem_pio2>
 80103d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103d4:	0040      	lsls	r0, r0, #1
 80103d6:	f000 0002 	and.w	r0, r0, #2
 80103da:	f1c0 0001 	rsb	r0, r0, #1
 80103de:	9000      	str	r0, [sp, #0]
 80103e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103e4:	e7e5      	b.n	80103b2 <tan+0x16>
 80103e6:	bf00      	nop
 80103e8:	3fe921fb 	.word	0x3fe921fb
 80103ec:	7fefffff 	.word	0x7fefffff

080103f0 <atan2f>:
 80103f0:	f001 be3a 	b.w	8012068 <__ieee754_atan2f>

080103f4 <sqrtf>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	4605      	mov	r5, r0
 80103f8:	f000 f8fa 	bl	80105f0 <__ieee754_sqrtf>
 80103fc:	4629      	mov	r1, r5
 80103fe:	4604      	mov	r4, r0
 8010400:	4628      	mov	r0, r5
 8010402:	f7f0 fe85 	bl	8001110 <__aeabi_fcmpun>
 8010406:	b968      	cbnz	r0, 8010424 <sqrtf+0x30>
 8010408:	2100      	movs	r1, #0
 801040a:	4628      	mov	r0, r5
 801040c:	f7f0 fe58 	bl	80010c0 <__aeabi_fcmplt>
 8010410:	b140      	cbz	r0, 8010424 <sqrtf+0x30>
 8010412:	f003 fbd7 	bl	8013bc4 <__errno>
 8010416:	2321      	movs	r3, #33	; 0x21
 8010418:	2100      	movs	r1, #0
 801041a:	6003      	str	r3, [r0, #0]
 801041c:	4608      	mov	r0, r1
 801041e:	f7f0 fd65 	bl	8000eec <__aeabi_fdiv>
 8010422:	4604      	mov	r4, r0
 8010424:	4620      	mov	r0, r4
 8010426:	bd38      	pop	{r3, r4, r5, pc}

08010428 <finite>:
 8010428:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 801042c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010430:	0fc0      	lsrs	r0, r0, #31
 8010432:	4770      	bx	lr

08010434 <nan>:
 8010434:	2000      	movs	r0, #0
 8010436:	4901      	ldr	r1, [pc, #4]	; (801043c <nan+0x8>)
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop
 801043c:	7ff80000 	.word	0x7ff80000

08010440 <__ieee754_sqrt>:
 8010440:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80105e4 <__ieee754_sqrt+0x1a4>
 8010444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010448:	ea3c 0c01 	bics.w	ip, ip, r1
 801044c:	460b      	mov	r3, r1
 801044e:	4606      	mov	r6, r0
 8010450:	460d      	mov	r5, r1
 8010452:	460a      	mov	r2, r1
 8010454:	4604      	mov	r4, r0
 8010456:	d10e      	bne.n	8010476 <__ieee754_sqrt+0x36>
 8010458:	4602      	mov	r2, r0
 801045a:	f7f0 f83d 	bl	80004d8 <__aeabi_dmul>
 801045e:	4602      	mov	r2, r0
 8010460:	460b      	mov	r3, r1
 8010462:	4630      	mov	r0, r6
 8010464:	4629      	mov	r1, r5
 8010466:	f7ef fe81 	bl	800016c <__adddf3>
 801046a:	4606      	mov	r6, r0
 801046c:	460d      	mov	r5, r1
 801046e:	4630      	mov	r0, r6
 8010470:	4629      	mov	r1, r5
 8010472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010476:	2900      	cmp	r1, #0
 8010478:	dc0d      	bgt.n	8010496 <__ieee754_sqrt+0x56>
 801047a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801047e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8010482:	d0f4      	beq.n	801046e <__ieee754_sqrt+0x2e>
 8010484:	b139      	cbz	r1, 8010496 <__ieee754_sqrt+0x56>
 8010486:	4602      	mov	r2, r0
 8010488:	f7ef fe6e 	bl	8000168 <__aeabi_dsub>
 801048c:	4602      	mov	r2, r0
 801048e:	460b      	mov	r3, r1
 8010490:	f7f0 f94c 	bl	800072c <__aeabi_ddiv>
 8010494:	e7e9      	b.n	801046a <__ieee754_sqrt+0x2a>
 8010496:	1512      	asrs	r2, r2, #20
 8010498:	f000 8089 	beq.w	80105ae <__ieee754_sqrt+0x16e>
 801049c:	2500      	movs	r5, #0
 801049e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80104a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80104a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80104aa:	07d2      	lsls	r2, r2, #31
 80104ac:	bf5c      	itt	pl
 80104ae:	005b      	lslpl	r3, r3, #1
 80104b0:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80104b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80104b8:	bf58      	it	pl
 80104ba:	0064      	lslpl	r4, r4, #1
 80104bc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80104c0:	0062      	lsls	r2, r4, #1
 80104c2:	2016      	movs	r0, #22
 80104c4:	4629      	mov	r1, r5
 80104c6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80104ca:	1076      	asrs	r6, r6, #1
 80104cc:	190f      	adds	r7, r1, r4
 80104ce:	429f      	cmp	r7, r3
 80104d0:	bfde      	ittt	le
 80104d2:	1bdb      	suble	r3, r3, r7
 80104d4:	1939      	addle	r1, r7, r4
 80104d6:	192d      	addle	r5, r5, r4
 80104d8:	005b      	lsls	r3, r3, #1
 80104da:	3801      	subs	r0, #1
 80104dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80104e0:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80104e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80104e8:	d1f0      	bne.n	80104cc <__ieee754_sqrt+0x8c>
 80104ea:	4604      	mov	r4, r0
 80104ec:	2720      	movs	r7, #32
 80104ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80104f2:	428b      	cmp	r3, r1
 80104f4:	eb0c 0e00 	add.w	lr, ip, r0
 80104f8:	dc02      	bgt.n	8010500 <__ieee754_sqrt+0xc0>
 80104fa:	d113      	bne.n	8010524 <__ieee754_sqrt+0xe4>
 80104fc:	4596      	cmp	lr, r2
 80104fe:	d811      	bhi.n	8010524 <__ieee754_sqrt+0xe4>
 8010500:	f1be 0f00 	cmp.w	lr, #0
 8010504:	eb0e 000c 	add.w	r0, lr, ip
 8010508:	da56      	bge.n	80105b8 <__ieee754_sqrt+0x178>
 801050a:	2800      	cmp	r0, #0
 801050c:	db54      	blt.n	80105b8 <__ieee754_sqrt+0x178>
 801050e:	f101 0801 	add.w	r8, r1, #1
 8010512:	1a5b      	subs	r3, r3, r1
 8010514:	4641      	mov	r1, r8
 8010516:	4596      	cmp	lr, r2
 8010518:	bf88      	it	hi
 801051a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801051e:	eba2 020e 	sub.w	r2, r2, lr
 8010522:	4464      	add	r4, ip
 8010524:	005b      	lsls	r3, r3, #1
 8010526:	3f01      	subs	r7, #1
 8010528:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801052c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010530:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010534:	d1dd      	bne.n	80104f2 <__ieee754_sqrt+0xb2>
 8010536:	4313      	orrs	r3, r2
 8010538:	d01b      	beq.n	8010572 <__ieee754_sqrt+0x132>
 801053a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80105e8 <__ieee754_sqrt+0x1a8>
 801053e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80105ec <__ieee754_sqrt+0x1ac>
 8010542:	e9da 0100 	ldrd	r0, r1, [sl]
 8010546:	e9db 2300 	ldrd	r2, r3, [fp]
 801054a:	f7ef fe0d 	bl	8000168 <__aeabi_dsub>
 801054e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010552:	4602      	mov	r2, r0
 8010554:	460b      	mov	r3, r1
 8010556:	4640      	mov	r0, r8
 8010558:	4649      	mov	r1, r9
 801055a:	f7f0 fa39 	bl	80009d0 <__aeabi_dcmple>
 801055e:	b140      	cbz	r0, 8010572 <__ieee754_sqrt+0x132>
 8010560:	e9da 0100 	ldrd	r0, r1, [sl]
 8010564:	e9db 2300 	ldrd	r2, r3, [fp]
 8010568:	f1b4 3fff 	cmp.w	r4, #4294967295
 801056c:	d126      	bne.n	80105bc <__ieee754_sqrt+0x17c>
 801056e:	463c      	mov	r4, r7
 8010570:	3501      	adds	r5, #1
 8010572:	106b      	asrs	r3, r5, #1
 8010574:	0864      	lsrs	r4, r4, #1
 8010576:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801057a:	07ea      	lsls	r2, r5, #31
 801057c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010580:	bf48      	it	mi
 8010582:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8010586:	4620      	mov	r0, r4
 8010588:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 801058c:	e76d      	b.n	801046a <__ieee754_sqrt+0x2a>
 801058e:	0ae3      	lsrs	r3, r4, #11
 8010590:	3915      	subs	r1, #21
 8010592:	0564      	lsls	r4, r4, #21
 8010594:	2b00      	cmp	r3, #0
 8010596:	d0fa      	beq.n	801058e <__ieee754_sqrt+0x14e>
 8010598:	02d8      	lsls	r0, r3, #11
 801059a:	d50a      	bpl.n	80105b2 <__ieee754_sqrt+0x172>
 801059c:	f1c2 0020 	rsb	r0, r2, #32
 80105a0:	fa24 f000 	lsr.w	r0, r4, r0
 80105a4:	1e55      	subs	r5, r2, #1
 80105a6:	4094      	lsls	r4, r2
 80105a8:	4303      	orrs	r3, r0
 80105aa:	1b4a      	subs	r2, r1, r5
 80105ac:	e776      	b.n	801049c <__ieee754_sqrt+0x5c>
 80105ae:	4611      	mov	r1, r2
 80105b0:	e7f0      	b.n	8010594 <__ieee754_sqrt+0x154>
 80105b2:	005b      	lsls	r3, r3, #1
 80105b4:	3201      	adds	r2, #1
 80105b6:	e7ef      	b.n	8010598 <__ieee754_sqrt+0x158>
 80105b8:	4688      	mov	r8, r1
 80105ba:	e7aa      	b.n	8010512 <__ieee754_sqrt+0xd2>
 80105bc:	f7ef fdd6 	bl	800016c <__adddf3>
 80105c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80105c4:	4602      	mov	r2, r0
 80105c6:	460b      	mov	r3, r1
 80105c8:	4640      	mov	r0, r8
 80105ca:	4649      	mov	r1, r9
 80105cc:	f7f0 f9f6 	bl	80009bc <__aeabi_dcmplt>
 80105d0:	b120      	cbz	r0, 80105dc <__ieee754_sqrt+0x19c>
 80105d2:	1ca1      	adds	r1, r4, #2
 80105d4:	bf08      	it	eq
 80105d6:	3501      	addeq	r5, #1
 80105d8:	3402      	adds	r4, #2
 80105da:	e7ca      	b.n	8010572 <__ieee754_sqrt+0x132>
 80105dc:	3401      	adds	r4, #1
 80105de:	f024 0401 	bic.w	r4, r4, #1
 80105e2:	e7c6      	b.n	8010572 <__ieee754_sqrt+0x132>
 80105e4:	7ff00000 	.word	0x7ff00000
 80105e8:	20000028 	.word	0x20000028
 80105ec:	20000030 	.word	0x20000030

080105f0 <__ieee754_sqrtf>:
 80105f0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80105f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80105f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105fc:	4603      	mov	r3, r0
 80105fe:	4604      	mov	r4, r0
 8010600:	d30a      	bcc.n	8010618 <__ieee754_sqrtf+0x28>
 8010602:	4601      	mov	r1, r0
 8010604:	f7f0 fbbe 	bl	8000d84 <__aeabi_fmul>
 8010608:	4601      	mov	r1, r0
 801060a:	4620      	mov	r0, r4
 801060c:	f7f0 fab2 	bl	8000b74 <__addsf3>
 8010610:	4604      	mov	r4, r0
 8010612:	4620      	mov	r0, r4
 8010614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010618:	2a00      	cmp	r2, #0
 801061a:	d0fa      	beq.n	8010612 <__ieee754_sqrtf+0x22>
 801061c:	2800      	cmp	r0, #0
 801061e:	da06      	bge.n	801062e <__ieee754_sqrtf+0x3e>
 8010620:	4601      	mov	r1, r0
 8010622:	f7f0 faa5 	bl	8000b70 <__aeabi_fsub>
 8010626:	4601      	mov	r1, r0
 8010628:	f7f0 fc60 	bl	8000eec <__aeabi_fdiv>
 801062c:	e7f0      	b.n	8010610 <__ieee754_sqrtf+0x20>
 801062e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8010632:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8010636:	d03e      	beq.n	80106b6 <__ieee754_sqrtf+0xc6>
 8010638:	2400      	movs	r4, #0
 801063a:	f1a1 057f 	sub.w	r5, r1, #127	; 0x7f
 801063e:	07ca      	lsls	r2, r1, #31
 8010640:	f04f 0019 	mov.w	r0, #25
 8010644:	4626      	mov	r6, r4
 8010646:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 801064a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801064e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010652:	bf58      	it	pl
 8010654:	005b      	lslpl	r3, r3, #1
 8010656:	106d      	asrs	r5, r5, #1
 8010658:	005b      	lsls	r3, r3, #1
 801065a:	1872      	adds	r2, r6, r1
 801065c:	429a      	cmp	r2, r3
 801065e:	bfcf      	iteee	gt
 8010660:	461a      	movgt	r2, r3
 8010662:	1856      	addle	r6, r2, r1
 8010664:	1864      	addle	r4, r4, r1
 8010666:	1a9a      	suble	r2, r3, r2
 8010668:	3801      	subs	r0, #1
 801066a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 801066e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010672:	d1f2      	bne.n	801065a <__ieee754_sqrtf+0x6a>
 8010674:	b1ba      	cbz	r2, 80106a6 <__ieee754_sqrtf+0xb6>
 8010676:	4e14      	ldr	r6, [pc, #80]	; (80106c8 <__ieee754_sqrtf+0xd8>)
 8010678:	4f14      	ldr	r7, [pc, #80]	; (80106cc <__ieee754_sqrtf+0xdc>)
 801067a:	6830      	ldr	r0, [r6, #0]
 801067c:	6839      	ldr	r1, [r7, #0]
 801067e:	f7f0 fa77 	bl	8000b70 <__aeabi_fsub>
 8010682:	f8d6 8000 	ldr.w	r8, [r6]
 8010686:	4601      	mov	r1, r0
 8010688:	4640      	mov	r0, r8
 801068a:	f7f0 fd23 	bl	80010d4 <__aeabi_fcmple>
 801068e:	b150      	cbz	r0, 80106a6 <__ieee754_sqrtf+0xb6>
 8010690:	6830      	ldr	r0, [r6, #0]
 8010692:	6839      	ldr	r1, [r7, #0]
 8010694:	f7f0 fa6e 	bl	8000b74 <__addsf3>
 8010698:	6836      	ldr	r6, [r6, #0]
 801069a:	4601      	mov	r1, r0
 801069c:	4630      	mov	r0, r6
 801069e:	f7f0 fd0f 	bl	80010c0 <__aeabi_fcmplt>
 80106a2:	b168      	cbz	r0, 80106c0 <__ieee754_sqrtf+0xd0>
 80106a4:	3402      	adds	r4, #2
 80106a6:	1064      	asrs	r4, r4, #1
 80106a8:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80106ac:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80106b0:	e7af      	b.n	8010612 <__ieee754_sqrtf+0x22>
 80106b2:	005b      	lsls	r3, r3, #1
 80106b4:	3201      	adds	r2, #1
 80106b6:	0218      	lsls	r0, r3, #8
 80106b8:	d5fb      	bpl.n	80106b2 <__ieee754_sqrtf+0xc2>
 80106ba:	3a01      	subs	r2, #1
 80106bc:	1a89      	subs	r1, r1, r2
 80106be:	e7bb      	b.n	8010638 <__ieee754_sqrtf+0x48>
 80106c0:	3401      	adds	r4, #1
 80106c2:	f024 0401 	bic.w	r4, r4, #1
 80106c6:	e7ee      	b.n	80106a6 <__ieee754_sqrtf+0xb6>
 80106c8:	20000038 	.word	0x20000038
 80106cc:	2000003c 	.word	0x2000003c

080106d0 <__kernel_cos>:
 80106d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80106d8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80106dc:	4680      	mov	r8, r0
 80106de:	460f      	mov	r7, r1
 80106e0:	e9cd 2300 	strd	r2, r3, [sp]
 80106e4:	da04      	bge.n	80106f0 <__kernel_cos+0x20>
 80106e6:	f7f0 f9a7 	bl	8000a38 <__aeabi_d2iz>
 80106ea:	2800      	cmp	r0, #0
 80106ec:	f000 8086 	beq.w	80107fc <__kernel_cos+0x12c>
 80106f0:	4642      	mov	r2, r8
 80106f2:	463b      	mov	r3, r7
 80106f4:	4640      	mov	r0, r8
 80106f6:	4639      	mov	r1, r7
 80106f8:	f7ef feee 	bl	80004d8 <__aeabi_dmul>
 80106fc:	2200      	movs	r2, #0
 80106fe:	4b4e      	ldr	r3, [pc, #312]	; (8010838 <__kernel_cos+0x168>)
 8010700:	4604      	mov	r4, r0
 8010702:	460d      	mov	r5, r1
 8010704:	f7ef fee8 	bl	80004d8 <__aeabi_dmul>
 8010708:	a33f      	add	r3, pc, #252	; (adr r3, 8010808 <__kernel_cos+0x138>)
 801070a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070e:	4682      	mov	sl, r0
 8010710:	468b      	mov	fp, r1
 8010712:	4620      	mov	r0, r4
 8010714:	4629      	mov	r1, r5
 8010716:	f7ef fedf 	bl	80004d8 <__aeabi_dmul>
 801071a:	a33d      	add	r3, pc, #244	; (adr r3, 8010810 <__kernel_cos+0x140>)
 801071c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010720:	f7ef fd24 	bl	800016c <__adddf3>
 8010724:	4622      	mov	r2, r4
 8010726:	462b      	mov	r3, r5
 8010728:	f7ef fed6 	bl	80004d8 <__aeabi_dmul>
 801072c:	a33a      	add	r3, pc, #232	; (adr r3, 8010818 <__kernel_cos+0x148>)
 801072e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010732:	f7ef fd19 	bl	8000168 <__aeabi_dsub>
 8010736:	4622      	mov	r2, r4
 8010738:	462b      	mov	r3, r5
 801073a:	f7ef fecd 	bl	80004d8 <__aeabi_dmul>
 801073e:	a338      	add	r3, pc, #224	; (adr r3, 8010820 <__kernel_cos+0x150>)
 8010740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010744:	f7ef fd12 	bl	800016c <__adddf3>
 8010748:	4622      	mov	r2, r4
 801074a:	462b      	mov	r3, r5
 801074c:	f7ef fec4 	bl	80004d8 <__aeabi_dmul>
 8010750:	a335      	add	r3, pc, #212	; (adr r3, 8010828 <__kernel_cos+0x158>)
 8010752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010756:	f7ef fd07 	bl	8000168 <__aeabi_dsub>
 801075a:	4622      	mov	r2, r4
 801075c:	462b      	mov	r3, r5
 801075e:	f7ef febb 	bl	80004d8 <__aeabi_dmul>
 8010762:	a333      	add	r3, pc, #204	; (adr r3, 8010830 <__kernel_cos+0x160>)
 8010764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010768:	f7ef fd00 	bl	800016c <__adddf3>
 801076c:	4622      	mov	r2, r4
 801076e:	462b      	mov	r3, r5
 8010770:	f7ef feb2 	bl	80004d8 <__aeabi_dmul>
 8010774:	4622      	mov	r2, r4
 8010776:	462b      	mov	r3, r5
 8010778:	f7ef feae 	bl	80004d8 <__aeabi_dmul>
 801077c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010780:	4604      	mov	r4, r0
 8010782:	460d      	mov	r5, r1
 8010784:	4640      	mov	r0, r8
 8010786:	4639      	mov	r1, r7
 8010788:	f7ef fea6 	bl	80004d8 <__aeabi_dmul>
 801078c:	460b      	mov	r3, r1
 801078e:	4602      	mov	r2, r0
 8010790:	4629      	mov	r1, r5
 8010792:	4620      	mov	r0, r4
 8010794:	f7ef fce8 	bl	8000168 <__aeabi_dsub>
 8010798:	4b28      	ldr	r3, [pc, #160]	; (801083c <__kernel_cos+0x16c>)
 801079a:	4680      	mov	r8, r0
 801079c:	429e      	cmp	r6, r3
 801079e:	4689      	mov	r9, r1
 80107a0:	dc0e      	bgt.n	80107c0 <__kernel_cos+0xf0>
 80107a2:	4602      	mov	r2, r0
 80107a4:	460b      	mov	r3, r1
 80107a6:	4650      	mov	r0, sl
 80107a8:	4659      	mov	r1, fp
 80107aa:	f7ef fcdd 	bl	8000168 <__aeabi_dsub>
 80107ae:	4602      	mov	r2, r0
 80107b0:	2000      	movs	r0, #0
 80107b2:	460b      	mov	r3, r1
 80107b4:	4922      	ldr	r1, [pc, #136]	; (8010840 <__kernel_cos+0x170>)
 80107b6:	f7ef fcd7 	bl	8000168 <__aeabi_dsub>
 80107ba:	b003      	add	sp, #12
 80107bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c0:	2400      	movs	r4, #0
 80107c2:	4b20      	ldr	r3, [pc, #128]	; (8010844 <__kernel_cos+0x174>)
 80107c4:	4622      	mov	r2, r4
 80107c6:	429e      	cmp	r6, r3
 80107c8:	bfcc      	ite	gt
 80107ca:	4d1f      	ldrgt	r5, [pc, #124]	; (8010848 <__kernel_cos+0x178>)
 80107cc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80107d0:	462b      	mov	r3, r5
 80107d2:	2000      	movs	r0, #0
 80107d4:	491a      	ldr	r1, [pc, #104]	; (8010840 <__kernel_cos+0x170>)
 80107d6:	f7ef fcc7 	bl	8000168 <__aeabi_dsub>
 80107da:	4622      	mov	r2, r4
 80107dc:	4606      	mov	r6, r0
 80107de:	460f      	mov	r7, r1
 80107e0:	462b      	mov	r3, r5
 80107e2:	4650      	mov	r0, sl
 80107e4:	4659      	mov	r1, fp
 80107e6:	f7ef fcbf 	bl	8000168 <__aeabi_dsub>
 80107ea:	4642      	mov	r2, r8
 80107ec:	464b      	mov	r3, r9
 80107ee:	f7ef fcbb 	bl	8000168 <__aeabi_dsub>
 80107f2:	4602      	mov	r2, r0
 80107f4:	460b      	mov	r3, r1
 80107f6:	4630      	mov	r0, r6
 80107f8:	4639      	mov	r1, r7
 80107fa:	e7dc      	b.n	80107b6 <__kernel_cos+0xe6>
 80107fc:	2000      	movs	r0, #0
 80107fe:	4910      	ldr	r1, [pc, #64]	; (8010840 <__kernel_cos+0x170>)
 8010800:	e7db      	b.n	80107ba <__kernel_cos+0xea>
 8010802:	bf00      	nop
 8010804:	f3af 8000 	nop.w
 8010808:	be8838d4 	.word	0xbe8838d4
 801080c:	bda8fae9 	.word	0xbda8fae9
 8010810:	bdb4b1c4 	.word	0xbdb4b1c4
 8010814:	3e21ee9e 	.word	0x3e21ee9e
 8010818:	809c52ad 	.word	0x809c52ad
 801081c:	3e927e4f 	.word	0x3e927e4f
 8010820:	19cb1590 	.word	0x19cb1590
 8010824:	3efa01a0 	.word	0x3efa01a0
 8010828:	16c15177 	.word	0x16c15177
 801082c:	3f56c16c 	.word	0x3f56c16c
 8010830:	5555554c 	.word	0x5555554c
 8010834:	3fa55555 	.word	0x3fa55555
 8010838:	3fe00000 	.word	0x3fe00000
 801083c:	3fd33332 	.word	0x3fd33332
 8010840:	3ff00000 	.word	0x3ff00000
 8010844:	3fe90000 	.word	0x3fe90000
 8010848:	3fd20000 	.word	0x3fd20000
 801084c:	00000000 	.word	0x00000000

08010850 <__kernel_sin>:
 8010850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010854:	b086      	sub	sp, #24
 8010856:	e9cd 2300 	strd	r2, r3, [sp]
 801085a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801085e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010862:	4682      	mov	sl, r0
 8010864:	460c      	mov	r4, r1
 8010866:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010868:	da03      	bge.n	8010872 <__kernel_sin+0x22>
 801086a:	f7f0 f8e5 	bl	8000a38 <__aeabi_d2iz>
 801086e:	2800      	cmp	r0, #0
 8010870:	d050      	beq.n	8010914 <__kernel_sin+0xc4>
 8010872:	4652      	mov	r2, sl
 8010874:	4623      	mov	r3, r4
 8010876:	4650      	mov	r0, sl
 8010878:	4621      	mov	r1, r4
 801087a:	f7ef fe2d 	bl	80004d8 <__aeabi_dmul>
 801087e:	4606      	mov	r6, r0
 8010880:	460f      	mov	r7, r1
 8010882:	4602      	mov	r2, r0
 8010884:	460b      	mov	r3, r1
 8010886:	4650      	mov	r0, sl
 8010888:	4621      	mov	r1, r4
 801088a:	f7ef fe25 	bl	80004d8 <__aeabi_dmul>
 801088e:	a33e      	add	r3, pc, #248	; (adr r3, 8010988 <__kernel_sin+0x138>)
 8010890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010894:	4680      	mov	r8, r0
 8010896:	4689      	mov	r9, r1
 8010898:	4630      	mov	r0, r6
 801089a:	4639      	mov	r1, r7
 801089c:	f7ef fe1c 	bl	80004d8 <__aeabi_dmul>
 80108a0:	a33b      	add	r3, pc, #236	; (adr r3, 8010990 <__kernel_sin+0x140>)
 80108a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a6:	f7ef fc5f 	bl	8000168 <__aeabi_dsub>
 80108aa:	4632      	mov	r2, r6
 80108ac:	463b      	mov	r3, r7
 80108ae:	f7ef fe13 	bl	80004d8 <__aeabi_dmul>
 80108b2:	a339      	add	r3, pc, #228	; (adr r3, 8010998 <__kernel_sin+0x148>)
 80108b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b8:	f7ef fc58 	bl	800016c <__adddf3>
 80108bc:	4632      	mov	r2, r6
 80108be:	463b      	mov	r3, r7
 80108c0:	f7ef fe0a 	bl	80004d8 <__aeabi_dmul>
 80108c4:	a336      	add	r3, pc, #216	; (adr r3, 80109a0 <__kernel_sin+0x150>)
 80108c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ca:	f7ef fc4d 	bl	8000168 <__aeabi_dsub>
 80108ce:	4632      	mov	r2, r6
 80108d0:	463b      	mov	r3, r7
 80108d2:	f7ef fe01 	bl	80004d8 <__aeabi_dmul>
 80108d6:	a334      	add	r3, pc, #208	; (adr r3, 80109a8 <__kernel_sin+0x158>)
 80108d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108dc:	f7ef fc46 	bl	800016c <__adddf3>
 80108e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108e4:	b9dd      	cbnz	r5, 801091e <__kernel_sin+0xce>
 80108e6:	4602      	mov	r2, r0
 80108e8:	460b      	mov	r3, r1
 80108ea:	4630      	mov	r0, r6
 80108ec:	4639      	mov	r1, r7
 80108ee:	f7ef fdf3 	bl	80004d8 <__aeabi_dmul>
 80108f2:	a32f      	add	r3, pc, #188	; (adr r3, 80109b0 <__kernel_sin+0x160>)
 80108f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f8:	f7ef fc36 	bl	8000168 <__aeabi_dsub>
 80108fc:	4642      	mov	r2, r8
 80108fe:	464b      	mov	r3, r9
 8010900:	f7ef fdea 	bl	80004d8 <__aeabi_dmul>
 8010904:	4602      	mov	r2, r0
 8010906:	460b      	mov	r3, r1
 8010908:	4650      	mov	r0, sl
 801090a:	4621      	mov	r1, r4
 801090c:	f7ef fc2e 	bl	800016c <__adddf3>
 8010910:	4682      	mov	sl, r0
 8010912:	460c      	mov	r4, r1
 8010914:	4650      	mov	r0, sl
 8010916:	4621      	mov	r1, r4
 8010918:	b006      	add	sp, #24
 801091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801091e:	2200      	movs	r2, #0
 8010920:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010924:	4b24      	ldr	r3, [pc, #144]	; (80109b8 <__kernel_sin+0x168>)
 8010926:	f7ef fdd7 	bl	80004d8 <__aeabi_dmul>
 801092a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801092e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010932:	4640      	mov	r0, r8
 8010934:	4649      	mov	r1, r9
 8010936:	f7ef fdcf 	bl	80004d8 <__aeabi_dmul>
 801093a:	4602      	mov	r2, r0
 801093c:	460b      	mov	r3, r1
 801093e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010942:	f7ef fc11 	bl	8000168 <__aeabi_dsub>
 8010946:	4632      	mov	r2, r6
 8010948:	463b      	mov	r3, r7
 801094a:	f7ef fdc5 	bl	80004d8 <__aeabi_dmul>
 801094e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010952:	f7ef fc09 	bl	8000168 <__aeabi_dsub>
 8010956:	a316      	add	r3, pc, #88	; (adr r3, 80109b0 <__kernel_sin+0x160>)
 8010958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095c:	4606      	mov	r6, r0
 801095e:	460f      	mov	r7, r1
 8010960:	4640      	mov	r0, r8
 8010962:	4649      	mov	r1, r9
 8010964:	f7ef fdb8 	bl	80004d8 <__aeabi_dmul>
 8010968:	4602      	mov	r2, r0
 801096a:	460b      	mov	r3, r1
 801096c:	4630      	mov	r0, r6
 801096e:	4639      	mov	r1, r7
 8010970:	f7ef fbfc 	bl	800016c <__adddf3>
 8010974:	4602      	mov	r2, r0
 8010976:	460b      	mov	r3, r1
 8010978:	4650      	mov	r0, sl
 801097a:	4621      	mov	r1, r4
 801097c:	f7ef fbf4 	bl	8000168 <__aeabi_dsub>
 8010980:	e7c6      	b.n	8010910 <__kernel_sin+0xc0>
 8010982:	bf00      	nop
 8010984:	f3af 8000 	nop.w
 8010988:	5acfd57c 	.word	0x5acfd57c
 801098c:	3de5d93a 	.word	0x3de5d93a
 8010990:	8a2b9ceb 	.word	0x8a2b9ceb
 8010994:	3e5ae5e6 	.word	0x3e5ae5e6
 8010998:	57b1fe7d 	.word	0x57b1fe7d
 801099c:	3ec71de3 	.word	0x3ec71de3
 80109a0:	19c161d5 	.word	0x19c161d5
 80109a4:	3f2a01a0 	.word	0x3f2a01a0
 80109a8:	1110f8a6 	.word	0x1110f8a6
 80109ac:	3f811111 	.word	0x3f811111
 80109b0:	55555549 	.word	0x55555549
 80109b4:	3fc55555 	.word	0x3fc55555
 80109b8:	3fe00000 	.word	0x3fe00000
 80109bc:	00000000 	.word	0x00000000

080109c0 <__kernel_tan>:
 80109c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c4:	b08b      	sub	sp, #44	; 0x2c
 80109c6:	9300      	str	r3, [sp, #0]
 80109c8:	4bd9      	ldr	r3, [pc, #868]	; (8010d30 <__kernel_tan+0x370>)
 80109ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80109ce:	429e      	cmp	r6, r3
 80109d0:	4604      	mov	r4, r0
 80109d2:	460d      	mov	r5, r1
 80109d4:	4682      	mov	sl, r0
 80109d6:	468b      	mov	fp, r1
 80109d8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80109da:	9202      	str	r2, [sp, #8]
 80109dc:	9107      	str	r1, [sp, #28]
 80109de:	dc58      	bgt.n	8010a92 <__kernel_tan+0xd2>
 80109e0:	f7f0 f82a 	bl	8000a38 <__aeabi_d2iz>
 80109e4:	4605      	mov	r5, r0
 80109e6:	2800      	cmp	r0, #0
 80109e8:	d178      	bne.n	8010adc <__kernel_tan+0x11c>
 80109ea:	1c7b      	adds	r3, r7, #1
 80109ec:	4323      	orrs	r3, r4
 80109ee:	4333      	orrs	r3, r6
 80109f0:	d110      	bne.n	8010a14 <__kernel_tan+0x54>
 80109f2:	4620      	mov	r0, r4
 80109f4:	4659      	mov	r1, fp
 80109f6:	f7ff fc87 	bl	8010308 <fabs>
 80109fa:	4602      	mov	r2, r0
 80109fc:	460b      	mov	r3, r1
 80109fe:	2000      	movs	r0, #0
 8010a00:	49cc      	ldr	r1, [pc, #816]	; (8010d34 <__kernel_tan+0x374>)
 8010a02:	f7ef fe93 	bl	800072c <__aeabi_ddiv>
 8010a06:	4682      	mov	sl, r0
 8010a08:	468b      	mov	fp, r1
 8010a0a:	4650      	mov	r0, sl
 8010a0c:	4659      	mov	r1, fp
 8010a0e:	b00b      	add	sp, #44	; 0x2c
 8010a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a14:	2f01      	cmp	r7, #1
 8010a16:	d0f8      	beq.n	8010a0a <__kernel_tan+0x4a>
 8010a18:	4620      	mov	r0, r4
 8010a1a:	4659      	mov	r1, fp
 8010a1c:	9a02      	ldr	r2, [sp, #8]
 8010a1e:	9b00      	ldr	r3, [sp, #0]
 8010a20:	f7ef fba4 	bl	800016c <__adddf3>
 8010a24:	4602      	mov	r2, r0
 8010a26:	460b      	mov	r3, r1
 8010a28:	460f      	mov	r7, r1
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	49c2      	ldr	r1, [pc, #776]	; (8010d38 <__kernel_tan+0x378>)
 8010a2e:	f7ef fe7d 	bl	800072c <__aeabi_ddiv>
 8010a32:	462e      	mov	r6, r5
 8010a34:	4689      	mov	r9, r1
 8010a36:	4652      	mov	r2, sl
 8010a38:	465b      	mov	r3, fp
 8010a3a:	4680      	mov	r8, r0
 8010a3c:	462c      	mov	r4, r5
 8010a3e:	4630      	mov	r0, r6
 8010a40:	460d      	mov	r5, r1
 8010a42:	4639      	mov	r1, r7
 8010a44:	f7ef fb90 	bl	8000168 <__aeabi_dsub>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	460b      	mov	r3, r1
 8010a4c:	9802      	ldr	r0, [sp, #8]
 8010a4e:	9900      	ldr	r1, [sp, #0]
 8010a50:	f7ef fb8a 	bl	8000168 <__aeabi_dsub>
 8010a54:	4632      	mov	r2, r6
 8010a56:	464b      	mov	r3, r9
 8010a58:	f7ef fd3e 	bl	80004d8 <__aeabi_dmul>
 8010a5c:	4632      	mov	r2, r6
 8010a5e:	4682      	mov	sl, r0
 8010a60:	468b      	mov	fp, r1
 8010a62:	464b      	mov	r3, r9
 8010a64:	4630      	mov	r0, r6
 8010a66:	4639      	mov	r1, r7
 8010a68:	f7ef fd36 	bl	80004d8 <__aeabi_dmul>
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	4bb1      	ldr	r3, [pc, #708]	; (8010d34 <__kernel_tan+0x374>)
 8010a70:	f7ef fb7c 	bl	800016c <__adddf3>
 8010a74:	4602      	mov	r2, r0
 8010a76:	460b      	mov	r3, r1
 8010a78:	4650      	mov	r0, sl
 8010a7a:	4659      	mov	r1, fp
 8010a7c:	f7ef fb76 	bl	800016c <__adddf3>
 8010a80:	4642      	mov	r2, r8
 8010a82:	464b      	mov	r3, r9
 8010a84:	f7ef fd28 	bl	80004d8 <__aeabi_dmul>
 8010a88:	4622      	mov	r2, r4
 8010a8a:	462b      	mov	r3, r5
 8010a8c:	f7ef fb6e 	bl	800016c <__adddf3>
 8010a90:	e7b9      	b.n	8010a06 <__kernel_tan+0x46>
 8010a92:	4baa      	ldr	r3, [pc, #680]	; (8010d3c <__kernel_tan+0x37c>)
 8010a94:	429e      	cmp	r6, r3
 8010a96:	dd21      	ble.n	8010adc <__kernel_tan+0x11c>
 8010a98:	2900      	cmp	r1, #0
 8010a9a:	da06      	bge.n	8010aaa <__kernel_tan+0xea>
 8010a9c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8010aa0:	469b      	mov	fp, r3
 8010aa2:	9b00      	ldr	r3, [sp, #0]
 8010aa4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010aa8:	9300      	str	r3, [sp, #0]
 8010aaa:	4652      	mov	r2, sl
 8010aac:	a182      	add	r1, pc, #520	; (adr r1, 8010cb8 <__kernel_tan+0x2f8>)
 8010aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ab2:	465b      	mov	r3, fp
 8010ab4:	f7ef fb58 	bl	8000168 <__aeabi_dsub>
 8010ab8:	4604      	mov	r4, r0
 8010aba:	460d      	mov	r5, r1
 8010abc:	a180      	add	r1, pc, #512	; (adr r1, 8010cc0 <__kernel_tan+0x300>)
 8010abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ac2:	9a02      	ldr	r2, [sp, #8]
 8010ac4:	9b00      	ldr	r3, [sp, #0]
 8010ac6:	f7ef fb4f 	bl	8000168 <__aeabi_dsub>
 8010aca:	462b      	mov	r3, r5
 8010acc:	4622      	mov	r2, r4
 8010ace:	f7ef fb4d 	bl	800016c <__adddf3>
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	4682      	mov	sl, r0
 8010ad6:	468b      	mov	fp, r1
 8010ad8:	9302      	str	r3, [sp, #8]
 8010ada:	9300      	str	r3, [sp, #0]
 8010adc:	4652      	mov	r2, sl
 8010ade:	465b      	mov	r3, fp
 8010ae0:	4650      	mov	r0, sl
 8010ae2:	4659      	mov	r1, fp
 8010ae4:	f7ef fcf8 	bl	80004d8 <__aeabi_dmul>
 8010ae8:	4602      	mov	r2, r0
 8010aea:	460b      	mov	r3, r1
 8010aec:	4680      	mov	r8, r0
 8010aee:	4689      	mov	r9, r1
 8010af0:	f7ef fcf2 	bl	80004d8 <__aeabi_dmul>
 8010af4:	4642      	mov	r2, r8
 8010af6:	4604      	mov	r4, r0
 8010af8:	460d      	mov	r5, r1
 8010afa:	464b      	mov	r3, r9
 8010afc:	4650      	mov	r0, sl
 8010afe:	4659      	mov	r1, fp
 8010b00:	f7ef fcea 	bl	80004d8 <__aeabi_dmul>
 8010b04:	a370      	add	r3, pc, #448	; (adr r3, 8010cc8 <__kernel_tan+0x308>)
 8010b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b0e:	4620      	mov	r0, r4
 8010b10:	4629      	mov	r1, r5
 8010b12:	f7ef fce1 	bl	80004d8 <__aeabi_dmul>
 8010b16:	a36e      	add	r3, pc, #440	; (adr r3, 8010cd0 <__kernel_tan+0x310>)
 8010b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1c:	f7ef fb26 	bl	800016c <__adddf3>
 8010b20:	4622      	mov	r2, r4
 8010b22:	462b      	mov	r3, r5
 8010b24:	f7ef fcd8 	bl	80004d8 <__aeabi_dmul>
 8010b28:	a36b      	add	r3, pc, #428	; (adr r3, 8010cd8 <__kernel_tan+0x318>)
 8010b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b2e:	f7ef fb1d 	bl	800016c <__adddf3>
 8010b32:	4622      	mov	r2, r4
 8010b34:	462b      	mov	r3, r5
 8010b36:	f7ef fccf 	bl	80004d8 <__aeabi_dmul>
 8010b3a:	a369      	add	r3, pc, #420	; (adr r3, 8010ce0 <__kernel_tan+0x320>)
 8010b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b40:	f7ef fb14 	bl	800016c <__adddf3>
 8010b44:	4622      	mov	r2, r4
 8010b46:	462b      	mov	r3, r5
 8010b48:	f7ef fcc6 	bl	80004d8 <__aeabi_dmul>
 8010b4c:	a366      	add	r3, pc, #408	; (adr r3, 8010ce8 <__kernel_tan+0x328>)
 8010b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b52:	f7ef fb0b 	bl	800016c <__adddf3>
 8010b56:	4622      	mov	r2, r4
 8010b58:	462b      	mov	r3, r5
 8010b5a:	f7ef fcbd 	bl	80004d8 <__aeabi_dmul>
 8010b5e:	a364      	add	r3, pc, #400	; (adr r3, 8010cf0 <__kernel_tan+0x330>)
 8010b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b64:	f7ef fb02 	bl	800016c <__adddf3>
 8010b68:	4642      	mov	r2, r8
 8010b6a:	464b      	mov	r3, r9
 8010b6c:	f7ef fcb4 	bl	80004d8 <__aeabi_dmul>
 8010b70:	a361      	add	r3, pc, #388	; (adr r3, 8010cf8 <__kernel_tan+0x338>)
 8010b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	4629      	mov	r1, r5
 8010b7e:	f7ef fcab 	bl	80004d8 <__aeabi_dmul>
 8010b82:	a35f      	add	r3, pc, #380	; (adr r3, 8010d00 <__kernel_tan+0x340>)
 8010b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b88:	f7ef faf0 	bl	800016c <__adddf3>
 8010b8c:	4622      	mov	r2, r4
 8010b8e:	462b      	mov	r3, r5
 8010b90:	f7ef fca2 	bl	80004d8 <__aeabi_dmul>
 8010b94:	a35c      	add	r3, pc, #368	; (adr r3, 8010d08 <__kernel_tan+0x348>)
 8010b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9a:	f7ef fae7 	bl	800016c <__adddf3>
 8010b9e:	4622      	mov	r2, r4
 8010ba0:	462b      	mov	r3, r5
 8010ba2:	f7ef fc99 	bl	80004d8 <__aeabi_dmul>
 8010ba6:	a35a      	add	r3, pc, #360	; (adr r3, 8010d10 <__kernel_tan+0x350>)
 8010ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bac:	f7ef fade 	bl	800016c <__adddf3>
 8010bb0:	4622      	mov	r2, r4
 8010bb2:	462b      	mov	r3, r5
 8010bb4:	f7ef fc90 	bl	80004d8 <__aeabi_dmul>
 8010bb8:	a357      	add	r3, pc, #348	; (adr r3, 8010d18 <__kernel_tan+0x358>)
 8010bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bbe:	f7ef fad5 	bl	800016c <__adddf3>
 8010bc2:	4622      	mov	r2, r4
 8010bc4:	462b      	mov	r3, r5
 8010bc6:	f7ef fc87 	bl	80004d8 <__aeabi_dmul>
 8010bca:	a355      	add	r3, pc, #340	; (adr r3, 8010d20 <__kernel_tan+0x360>)
 8010bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd0:	f7ef facc 	bl	800016c <__adddf3>
 8010bd4:	4602      	mov	r2, r0
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010bdc:	f7ef fac6 	bl	800016c <__adddf3>
 8010be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010be4:	f7ef fc78 	bl	80004d8 <__aeabi_dmul>
 8010be8:	9a02      	ldr	r2, [sp, #8]
 8010bea:	9b00      	ldr	r3, [sp, #0]
 8010bec:	f7ef fabe 	bl	800016c <__adddf3>
 8010bf0:	4642      	mov	r2, r8
 8010bf2:	464b      	mov	r3, r9
 8010bf4:	f7ef fc70 	bl	80004d8 <__aeabi_dmul>
 8010bf8:	9a02      	ldr	r2, [sp, #8]
 8010bfa:	9b00      	ldr	r3, [sp, #0]
 8010bfc:	f7ef fab6 	bl	800016c <__adddf3>
 8010c00:	a349      	add	r3, pc, #292	; (adr r3, 8010d28 <__kernel_tan+0x368>)
 8010c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c06:	4604      	mov	r4, r0
 8010c08:	460d      	mov	r5, r1
 8010c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c0e:	f7ef fc63 	bl	80004d8 <__aeabi_dmul>
 8010c12:	4622      	mov	r2, r4
 8010c14:	462b      	mov	r3, r5
 8010c16:	f7ef faa9 	bl	800016c <__adddf3>
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	e9cd 0100 	strd	r0, r1, [sp]
 8010c20:	4602      	mov	r2, r0
 8010c22:	4659      	mov	r1, fp
 8010c24:	4650      	mov	r0, sl
 8010c26:	f7ef faa1 	bl	800016c <__adddf3>
 8010c2a:	4b44      	ldr	r3, [pc, #272]	; (8010d3c <__kernel_tan+0x37c>)
 8010c2c:	4604      	mov	r4, r0
 8010c2e:	429e      	cmp	r6, r3
 8010c30:	460d      	mov	r5, r1
 8010c32:	f340 8085 	ble.w	8010d40 <__kernel_tan+0x380>
 8010c36:	4638      	mov	r0, r7
 8010c38:	f7ef fbe4 	bl	8000404 <__aeabi_i2d>
 8010c3c:	4622      	mov	r2, r4
 8010c3e:	4680      	mov	r8, r0
 8010c40:	4689      	mov	r9, r1
 8010c42:	462b      	mov	r3, r5
 8010c44:	4620      	mov	r0, r4
 8010c46:	4629      	mov	r1, r5
 8010c48:	f7ef fc46 	bl	80004d8 <__aeabi_dmul>
 8010c4c:	4642      	mov	r2, r8
 8010c4e:	4606      	mov	r6, r0
 8010c50:	460f      	mov	r7, r1
 8010c52:	464b      	mov	r3, r9
 8010c54:	4620      	mov	r0, r4
 8010c56:	4629      	mov	r1, r5
 8010c58:	f7ef fa88 	bl	800016c <__adddf3>
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	460b      	mov	r3, r1
 8010c60:	4630      	mov	r0, r6
 8010c62:	4639      	mov	r1, r7
 8010c64:	f7ef fd62 	bl	800072c <__aeabi_ddiv>
 8010c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c6c:	f7ef fa7c 	bl	8000168 <__aeabi_dsub>
 8010c70:	4602      	mov	r2, r0
 8010c72:	460b      	mov	r3, r1
 8010c74:	4650      	mov	r0, sl
 8010c76:	4659      	mov	r1, fp
 8010c78:	f7ef fa76 	bl	8000168 <__aeabi_dsub>
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	460b      	mov	r3, r1
 8010c80:	f7ef fa74 	bl	800016c <__adddf3>
 8010c84:	4602      	mov	r2, r0
 8010c86:	460b      	mov	r3, r1
 8010c88:	4640      	mov	r0, r8
 8010c8a:	4649      	mov	r1, r9
 8010c8c:	f7ef fa6c 	bl	8000168 <__aeabi_dsub>
 8010c90:	9b07      	ldr	r3, [sp, #28]
 8010c92:	4604      	mov	r4, r0
 8010c94:	179b      	asrs	r3, r3, #30
 8010c96:	f003 0302 	and.w	r3, r3, #2
 8010c9a:	f1c3 0001 	rsb	r0, r3, #1
 8010c9e:	460d      	mov	r5, r1
 8010ca0:	f7ef fbb0 	bl	8000404 <__aeabi_i2d>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	4620      	mov	r0, r4
 8010caa:	4629      	mov	r1, r5
 8010cac:	f7ef fc14 	bl	80004d8 <__aeabi_dmul>
 8010cb0:	e6a9      	b.n	8010a06 <__kernel_tan+0x46>
 8010cb2:	bf00      	nop
 8010cb4:	f3af 8000 	nop.w
 8010cb8:	54442d18 	.word	0x54442d18
 8010cbc:	3fe921fb 	.word	0x3fe921fb
 8010cc0:	33145c07 	.word	0x33145c07
 8010cc4:	3c81a626 	.word	0x3c81a626
 8010cc8:	74bf7ad4 	.word	0x74bf7ad4
 8010ccc:	3efb2a70 	.word	0x3efb2a70
 8010cd0:	32f0a7e9 	.word	0x32f0a7e9
 8010cd4:	3f12b80f 	.word	0x3f12b80f
 8010cd8:	1a8d1068 	.word	0x1a8d1068
 8010cdc:	3f3026f7 	.word	0x3f3026f7
 8010ce0:	fee08315 	.word	0xfee08315
 8010ce4:	3f57dbc8 	.word	0x3f57dbc8
 8010ce8:	e96e8493 	.word	0xe96e8493
 8010cec:	3f8226e3 	.word	0x3f8226e3
 8010cf0:	1bb341fe 	.word	0x1bb341fe
 8010cf4:	3faba1ba 	.word	0x3faba1ba
 8010cf8:	db605373 	.word	0xdb605373
 8010cfc:	bef375cb 	.word	0xbef375cb
 8010d00:	a03792a6 	.word	0xa03792a6
 8010d04:	3f147e88 	.word	0x3f147e88
 8010d08:	f2f26501 	.word	0xf2f26501
 8010d0c:	3f4344d8 	.word	0x3f4344d8
 8010d10:	c9560328 	.word	0xc9560328
 8010d14:	3f6d6d22 	.word	0x3f6d6d22
 8010d18:	8406d637 	.word	0x8406d637
 8010d1c:	3f9664f4 	.word	0x3f9664f4
 8010d20:	1110fe7a 	.word	0x1110fe7a
 8010d24:	3fc11111 	.word	0x3fc11111
 8010d28:	55555563 	.word	0x55555563
 8010d2c:	3fd55555 	.word	0x3fd55555
 8010d30:	3e2fffff 	.word	0x3e2fffff
 8010d34:	3ff00000 	.word	0x3ff00000
 8010d38:	bff00000 	.word	0xbff00000
 8010d3c:	3fe59427 	.word	0x3fe59427
 8010d40:	2f01      	cmp	r7, #1
 8010d42:	d031      	beq.n	8010da8 <__kernel_tan+0x3e8>
 8010d44:	460f      	mov	r7, r1
 8010d46:	4602      	mov	r2, r0
 8010d48:	460b      	mov	r3, r1
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	4918      	ldr	r1, [pc, #96]	; (8010db0 <__kernel_tan+0x3f0>)
 8010d4e:	f7ef fced 	bl	800072c <__aeabi_ddiv>
 8010d52:	2600      	movs	r6, #0
 8010d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010d5c:	4652      	mov	r2, sl
 8010d5e:	465b      	mov	r3, fp
 8010d60:	4630      	mov	r0, r6
 8010d62:	4639      	mov	r1, r7
 8010d64:	f7ef fa00 	bl	8000168 <__aeabi_dsub>
 8010d68:	4602      	mov	r2, r0
 8010d6a:	460b      	mov	r3, r1
 8010d6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d70:	f7ef f9fa 	bl	8000168 <__aeabi_dsub>
 8010d74:	4632      	mov	r2, r6
 8010d76:	462b      	mov	r3, r5
 8010d78:	f7ef fbae 	bl	80004d8 <__aeabi_dmul>
 8010d7c:	4632      	mov	r2, r6
 8010d7e:	4682      	mov	sl, r0
 8010d80:	468b      	mov	fp, r1
 8010d82:	462b      	mov	r3, r5
 8010d84:	4630      	mov	r0, r6
 8010d86:	4639      	mov	r1, r7
 8010d88:	f7ef fba6 	bl	80004d8 <__aeabi_dmul>
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	4b09      	ldr	r3, [pc, #36]	; (8010db4 <__kernel_tan+0x3f4>)
 8010d90:	f7ef f9ec 	bl	800016c <__adddf3>
 8010d94:	4602      	mov	r2, r0
 8010d96:	460b      	mov	r3, r1
 8010d98:	4650      	mov	r0, sl
 8010d9a:	4659      	mov	r1, fp
 8010d9c:	f7ef f9e6 	bl	800016c <__adddf3>
 8010da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010da4:	4634      	mov	r4, r6
 8010da6:	e66d      	b.n	8010a84 <__kernel_tan+0xc4>
 8010da8:	4682      	mov	sl, r0
 8010daa:	468b      	mov	fp, r1
 8010dac:	e62d      	b.n	8010a0a <__kernel_tan+0x4a>
 8010dae:	bf00      	nop
 8010db0:	bff00000 	.word	0xbff00000
 8010db4:	3ff00000 	.word	0x3ff00000

08010db8 <__ieee754_acos>:
 8010db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dbc:	4cb2      	ldr	r4, [pc, #712]	; (8011088 <__ieee754_acos+0x2d0>)
 8010dbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010dc2:	42a3      	cmp	r3, r4
 8010dc4:	4607      	mov	r7, r0
 8010dc6:	460e      	mov	r6, r1
 8010dc8:	dd16      	ble.n	8010df8 <__ieee754_acos+0x40>
 8010dca:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010dce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010dd2:	4303      	orrs	r3, r0
 8010dd4:	d107      	bne.n	8010de6 <__ieee754_acos+0x2e>
 8010dd6:	2900      	cmp	r1, #0
 8010dd8:	f300 8202 	bgt.w	80111e0 <__ieee754_acos+0x428>
 8010ddc:	a190      	add	r1, pc, #576	; (adr r1, 8011020 <__ieee754_acos+0x268>)
 8010dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010de2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010de6:	4602      	mov	r2, r0
 8010de8:	460b      	mov	r3, r1
 8010dea:	f7ef f9bd 	bl	8000168 <__aeabi_dsub>
 8010dee:	4602      	mov	r2, r0
 8010df0:	460b      	mov	r3, r1
 8010df2:	f7ef fc9b 	bl	800072c <__aeabi_ddiv>
 8010df6:	e7f4      	b.n	8010de2 <__ieee754_acos+0x2a>
 8010df8:	4ca4      	ldr	r4, [pc, #656]	; (801108c <__ieee754_acos+0x2d4>)
 8010dfa:	42a3      	cmp	r3, r4
 8010dfc:	f300 8083 	bgt.w	8010f06 <__ieee754_acos+0x14e>
 8010e00:	4aa3      	ldr	r2, [pc, #652]	; (8011090 <__ieee754_acos+0x2d8>)
 8010e02:	4293      	cmp	r3, r2
 8010e04:	f340 81ef 	ble.w	80111e6 <__ieee754_acos+0x42e>
 8010e08:	4602      	mov	r2, r0
 8010e0a:	460b      	mov	r3, r1
 8010e0c:	f7ef fb64 	bl	80004d8 <__aeabi_dmul>
 8010e10:	a385      	add	r3, pc, #532	; (adr r3, 8011028 <__ieee754_acos+0x270>)
 8010e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e16:	4604      	mov	r4, r0
 8010e18:	460d      	mov	r5, r1
 8010e1a:	f7ef fb5d 	bl	80004d8 <__aeabi_dmul>
 8010e1e:	a384      	add	r3, pc, #528	; (adr r3, 8011030 <__ieee754_acos+0x278>)
 8010e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e24:	f7ef f9a2 	bl	800016c <__adddf3>
 8010e28:	4622      	mov	r2, r4
 8010e2a:	462b      	mov	r3, r5
 8010e2c:	f7ef fb54 	bl	80004d8 <__aeabi_dmul>
 8010e30:	a381      	add	r3, pc, #516	; (adr r3, 8011038 <__ieee754_acos+0x280>)
 8010e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e36:	f7ef f997 	bl	8000168 <__aeabi_dsub>
 8010e3a:	4622      	mov	r2, r4
 8010e3c:	462b      	mov	r3, r5
 8010e3e:	f7ef fb4b 	bl	80004d8 <__aeabi_dmul>
 8010e42:	a37f      	add	r3, pc, #508	; (adr r3, 8011040 <__ieee754_acos+0x288>)
 8010e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e48:	f7ef f990 	bl	800016c <__adddf3>
 8010e4c:	4622      	mov	r2, r4
 8010e4e:	462b      	mov	r3, r5
 8010e50:	f7ef fb42 	bl	80004d8 <__aeabi_dmul>
 8010e54:	a37c      	add	r3, pc, #496	; (adr r3, 8011048 <__ieee754_acos+0x290>)
 8010e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5a:	f7ef f985 	bl	8000168 <__aeabi_dsub>
 8010e5e:	4622      	mov	r2, r4
 8010e60:	462b      	mov	r3, r5
 8010e62:	f7ef fb39 	bl	80004d8 <__aeabi_dmul>
 8010e66:	a37a      	add	r3, pc, #488	; (adr r3, 8011050 <__ieee754_acos+0x298>)
 8010e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6c:	f7ef f97e 	bl	800016c <__adddf3>
 8010e70:	4622      	mov	r2, r4
 8010e72:	462b      	mov	r3, r5
 8010e74:	f7ef fb30 	bl	80004d8 <__aeabi_dmul>
 8010e78:	a377      	add	r3, pc, #476	; (adr r3, 8011058 <__ieee754_acos+0x2a0>)
 8010e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7e:	4680      	mov	r8, r0
 8010e80:	4689      	mov	r9, r1
 8010e82:	4620      	mov	r0, r4
 8010e84:	4629      	mov	r1, r5
 8010e86:	f7ef fb27 	bl	80004d8 <__aeabi_dmul>
 8010e8a:	a375      	add	r3, pc, #468	; (adr r3, 8011060 <__ieee754_acos+0x2a8>)
 8010e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e90:	f7ef f96a 	bl	8000168 <__aeabi_dsub>
 8010e94:	4622      	mov	r2, r4
 8010e96:	462b      	mov	r3, r5
 8010e98:	f7ef fb1e 	bl	80004d8 <__aeabi_dmul>
 8010e9c:	a372      	add	r3, pc, #456	; (adr r3, 8011068 <__ieee754_acos+0x2b0>)
 8010e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea2:	f7ef f963 	bl	800016c <__adddf3>
 8010ea6:	4622      	mov	r2, r4
 8010ea8:	462b      	mov	r3, r5
 8010eaa:	f7ef fb15 	bl	80004d8 <__aeabi_dmul>
 8010eae:	a370      	add	r3, pc, #448	; (adr r3, 8011070 <__ieee754_acos+0x2b8>)
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	f7ef f958 	bl	8000168 <__aeabi_dsub>
 8010eb8:	4622      	mov	r2, r4
 8010eba:	462b      	mov	r3, r5
 8010ebc:	f7ef fb0c 	bl	80004d8 <__aeabi_dmul>
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	4b74      	ldr	r3, [pc, #464]	; (8011094 <__ieee754_acos+0x2dc>)
 8010ec4:	f7ef f952 	bl	800016c <__adddf3>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	460b      	mov	r3, r1
 8010ecc:	4640      	mov	r0, r8
 8010ece:	4649      	mov	r1, r9
 8010ed0:	f7ef fc2c 	bl	800072c <__aeabi_ddiv>
 8010ed4:	463a      	mov	r2, r7
 8010ed6:	4633      	mov	r3, r6
 8010ed8:	f7ef fafe 	bl	80004d8 <__aeabi_dmul>
 8010edc:	4602      	mov	r2, r0
 8010ede:	460b      	mov	r3, r1
 8010ee0:	a165      	add	r1, pc, #404	; (adr r1, 8011078 <__ieee754_acos+0x2c0>)
 8010ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ee6:	f7ef f93f 	bl	8000168 <__aeabi_dsub>
 8010eea:	4602      	mov	r2, r0
 8010eec:	460b      	mov	r3, r1
 8010eee:	4638      	mov	r0, r7
 8010ef0:	4631      	mov	r1, r6
 8010ef2:	f7ef f939 	bl	8000168 <__aeabi_dsub>
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	460b      	mov	r3, r1
 8010efa:	a161      	add	r1, pc, #388	; (adr r1, 8011080 <__ieee754_acos+0x2c8>)
 8010efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f00:	f7ef f932 	bl	8000168 <__aeabi_dsub>
 8010f04:	e76d      	b.n	8010de2 <__ieee754_acos+0x2a>
 8010f06:	2900      	cmp	r1, #0
 8010f08:	f280 80c8 	bge.w	801109c <__ieee754_acos+0x2e4>
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	4b61      	ldr	r3, [pc, #388]	; (8011094 <__ieee754_acos+0x2dc>)
 8010f10:	f7ef f92c 	bl	800016c <__adddf3>
 8010f14:	2200      	movs	r2, #0
 8010f16:	4b60      	ldr	r3, [pc, #384]	; (8011098 <__ieee754_acos+0x2e0>)
 8010f18:	f7ef fade 	bl	80004d8 <__aeabi_dmul>
 8010f1c:	a342      	add	r3, pc, #264	; (adr r3, 8011028 <__ieee754_acos+0x270>)
 8010f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f22:	4604      	mov	r4, r0
 8010f24:	460d      	mov	r5, r1
 8010f26:	f7ef fad7 	bl	80004d8 <__aeabi_dmul>
 8010f2a:	a341      	add	r3, pc, #260	; (adr r3, 8011030 <__ieee754_acos+0x278>)
 8010f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f30:	f7ef f91c 	bl	800016c <__adddf3>
 8010f34:	4622      	mov	r2, r4
 8010f36:	462b      	mov	r3, r5
 8010f38:	f7ef face 	bl	80004d8 <__aeabi_dmul>
 8010f3c:	a33e      	add	r3, pc, #248	; (adr r3, 8011038 <__ieee754_acos+0x280>)
 8010f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f42:	f7ef f911 	bl	8000168 <__aeabi_dsub>
 8010f46:	4622      	mov	r2, r4
 8010f48:	462b      	mov	r3, r5
 8010f4a:	f7ef fac5 	bl	80004d8 <__aeabi_dmul>
 8010f4e:	a33c      	add	r3, pc, #240	; (adr r3, 8011040 <__ieee754_acos+0x288>)
 8010f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f54:	f7ef f90a 	bl	800016c <__adddf3>
 8010f58:	4622      	mov	r2, r4
 8010f5a:	462b      	mov	r3, r5
 8010f5c:	f7ef fabc 	bl	80004d8 <__aeabi_dmul>
 8010f60:	a339      	add	r3, pc, #228	; (adr r3, 8011048 <__ieee754_acos+0x290>)
 8010f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f66:	f7ef f8ff 	bl	8000168 <__aeabi_dsub>
 8010f6a:	4622      	mov	r2, r4
 8010f6c:	462b      	mov	r3, r5
 8010f6e:	f7ef fab3 	bl	80004d8 <__aeabi_dmul>
 8010f72:	a337      	add	r3, pc, #220	; (adr r3, 8011050 <__ieee754_acos+0x298>)
 8010f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f78:	f7ef f8f8 	bl	800016c <__adddf3>
 8010f7c:	4622      	mov	r2, r4
 8010f7e:	462b      	mov	r3, r5
 8010f80:	f7ef faaa 	bl	80004d8 <__aeabi_dmul>
 8010f84:	4680      	mov	r8, r0
 8010f86:	4689      	mov	r9, r1
 8010f88:	4620      	mov	r0, r4
 8010f8a:	4629      	mov	r1, r5
 8010f8c:	f7ff fa58 	bl	8010440 <__ieee754_sqrt>
 8010f90:	a331      	add	r3, pc, #196	; (adr r3, 8011058 <__ieee754_acos+0x2a0>)
 8010f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f96:	4606      	mov	r6, r0
 8010f98:	460f      	mov	r7, r1
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	4629      	mov	r1, r5
 8010f9e:	f7ef fa9b 	bl	80004d8 <__aeabi_dmul>
 8010fa2:	a32f      	add	r3, pc, #188	; (adr r3, 8011060 <__ieee754_acos+0x2a8>)
 8010fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa8:	f7ef f8de 	bl	8000168 <__aeabi_dsub>
 8010fac:	4622      	mov	r2, r4
 8010fae:	462b      	mov	r3, r5
 8010fb0:	f7ef fa92 	bl	80004d8 <__aeabi_dmul>
 8010fb4:	a32c      	add	r3, pc, #176	; (adr r3, 8011068 <__ieee754_acos+0x2b0>)
 8010fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fba:	f7ef f8d7 	bl	800016c <__adddf3>
 8010fbe:	4622      	mov	r2, r4
 8010fc0:	462b      	mov	r3, r5
 8010fc2:	f7ef fa89 	bl	80004d8 <__aeabi_dmul>
 8010fc6:	a32a      	add	r3, pc, #168	; (adr r3, 8011070 <__ieee754_acos+0x2b8>)
 8010fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fcc:	f7ef f8cc 	bl	8000168 <__aeabi_dsub>
 8010fd0:	4622      	mov	r2, r4
 8010fd2:	462b      	mov	r3, r5
 8010fd4:	f7ef fa80 	bl	80004d8 <__aeabi_dmul>
 8010fd8:	2200      	movs	r2, #0
 8010fda:	4b2e      	ldr	r3, [pc, #184]	; (8011094 <__ieee754_acos+0x2dc>)
 8010fdc:	f7ef f8c6 	bl	800016c <__adddf3>
 8010fe0:	4602      	mov	r2, r0
 8010fe2:	460b      	mov	r3, r1
 8010fe4:	4640      	mov	r0, r8
 8010fe6:	4649      	mov	r1, r9
 8010fe8:	f7ef fba0 	bl	800072c <__aeabi_ddiv>
 8010fec:	4632      	mov	r2, r6
 8010fee:	463b      	mov	r3, r7
 8010ff0:	f7ef fa72 	bl	80004d8 <__aeabi_dmul>
 8010ff4:	a320      	add	r3, pc, #128	; (adr r3, 8011078 <__ieee754_acos+0x2c0>)
 8010ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffa:	f7ef f8b5 	bl	8000168 <__aeabi_dsub>
 8010ffe:	4632      	mov	r2, r6
 8011000:	463b      	mov	r3, r7
 8011002:	f7ef f8b3 	bl	800016c <__adddf3>
 8011006:	4602      	mov	r2, r0
 8011008:	460b      	mov	r3, r1
 801100a:	f7ef f8af 	bl	800016c <__adddf3>
 801100e:	4602      	mov	r2, r0
 8011010:	460b      	mov	r3, r1
 8011012:	a103      	add	r1, pc, #12	; (adr r1, 8011020 <__ieee754_acos+0x268>)
 8011014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011018:	e772      	b.n	8010f00 <__ieee754_acos+0x148>
 801101a:	bf00      	nop
 801101c:	f3af 8000 	nop.w
 8011020:	54442d18 	.word	0x54442d18
 8011024:	400921fb 	.word	0x400921fb
 8011028:	0dfdf709 	.word	0x0dfdf709
 801102c:	3f023de1 	.word	0x3f023de1
 8011030:	7501b288 	.word	0x7501b288
 8011034:	3f49efe0 	.word	0x3f49efe0
 8011038:	b5688f3b 	.word	0xb5688f3b
 801103c:	3fa48228 	.word	0x3fa48228
 8011040:	0e884455 	.word	0x0e884455
 8011044:	3fc9c155 	.word	0x3fc9c155
 8011048:	03eb6f7d 	.word	0x03eb6f7d
 801104c:	3fd4d612 	.word	0x3fd4d612
 8011050:	55555555 	.word	0x55555555
 8011054:	3fc55555 	.word	0x3fc55555
 8011058:	b12e9282 	.word	0xb12e9282
 801105c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011060:	1b8d0159 	.word	0x1b8d0159
 8011064:	3fe6066c 	.word	0x3fe6066c
 8011068:	9c598ac8 	.word	0x9c598ac8
 801106c:	40002ae5 	.word	0x40002ae5
 8011070:	1c8a2d4b 	.word	0x1c8a2d4b
 8011074:	40033a27 	.word	0x40033a27
 8011078:	33145c07 	.word	0x33145c07
 801107c:	3c91a626 	.word	0x3c91a626
 8011080:	54442d18 	.word	0x54442d18
 8011084:	3ff921fb 	.word	0x3ff921fb
 8011088:	3fefffff 	.word	0x3fefffff
 801108c:	3fdfffff 	.word	0x3fdfffff
 8011090:	3c600000 	.word	0x3c600000
 8011094:	3ff00000 	.word	0x3ff00000
 8011098:	3fe00000 	.word	0x3fe00000
 801109c:	4602      	mov	r2, r0
 801109e:	460b      	mov	r3, r1
 80110a0:	2000      	movs	r0, #0
 80110a2:	4969      	ldr	r1, [pc, #420]	; (8011248 <__ieee754_acos+0x490>)
 80110a4:	f7ef f860 	bl	8000168 <__aeabi_dsub>
 80110a8:	2200      	movs	r2, #0
 80110aa:	4b68      	ldr	r3, [pc, #416]	; (801124c <__ieee754_acos+0x494>)
 80110ac:	f7ef fa14 	bl	80004d8 <__aeabi_dmul>
 80110b0:	4604      	mov	r4, r0
 80110b2:	460d      	mov	r5, r1
 80110b4:	f7ff f9c4 	bl	8010440 <__ieee754_sqrt>
 80110b8:	a34d      	add	r3, pc, #308	; (adr r3, 80111f0 <__ieee754_acos+0x438>)
 80110ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110be:	4689      	mov	r9, r1
 80110c0:	4680      	mov	r8, r0
 80110c2:	4629      	mov	r1, r5
 80110c4:	4620      	mov	r0, r4
 80110c6:	f7ef fa07 	bl	80004d8 <__aeabi_dmul>
 80110ca:	a34b      	add	r3, pc, #300	; (adr r3, 80111f8 <__ieee754_acos+0x440>)
 80110cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d0:	f7ef f84c 	bl	800016c <__adddf3>
 80110d4:	4622      	mov	r2, r4
 80110d6:	462b      	mov	r3, r5
 80110d8:	f7ef f9fe 	bl	80004d8 <__aeabi_dmul>
 80110dc:	a348      	add	r3, pc, #288	; (adr r3, 8011200 <__ieee754_acos+0x448>)
 80110de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e2:	f7ef f841 	bl	8000168 <__aeabi_dsub>
 80110e6:	4622      	mov	r2, r4
 80110e8:	462b      	mov	r3, r5
 80110ea:	f7ef f9f5 	bl	80004d8 <__aeabi_dmul>
 80110ee:	a346      	add	r3, pc, #280	; (adr r3, 8011208 <__ieee754_acos+0x450>)
 80110f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f4:	f7ef f83a 	bl	800016c <__adddf3>
 80110f8:	4622      	mov	r2, r4
 80110fa:	462b      	mov	r3, r5
 80110fc:	f7ef f9ec 	bl	80004d8 <__aeabi_dmul>
 8011100:	a343      	add	r3, pc, #268	; (adr r3, 8011210 <__ieee754_acos+0x458>)
 8011102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011106:	f7ef f82f 	bl	8000168 <__aeabi_dsub>
 801110a:	4622      	mov	r2, r4
 801110c:	462b      	mov	r3, r5
 801110e:	f7ef f9e3 	bl	80004d8 <__aeabi_dmul>
 8011112:	a341      	add	r3, pc, #260	; (adr r3, 8011218 <__ieee754_acos+0x460>)
 8011114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011118:	f7ef f828 	bl	800016c <__adddf3>
 801111c:	4622      	mov	r2, r4
 801111e:	462b      	mov	r3, r5
 8011120:	f7ef f9da 	bl	80004d8 <__aeabi_dmul>
 8011124:	a33e      	add	r3, pc, #248	; (adr r3, 8011220 <__ieee754_acos+0x468>)
 8011126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112a:	4682      	mov	sl, r0
 801112c:	468b      	mov	fp, r1
 801112e:	4620      	mov	r0, r4
 8011130:	4629      	mov	r1, r5
 8011132:	f7ef f9d1 	bl	80004d8 <__aeabi_dmul>
 8011136:	a33c      	add	r3, pc, #240	; (adr r3, 8011228 <__ieee754_acos+0x470>)
 8011138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801113c:	f7ef f814 	bl	8000168 <__aeabi_dsub>
 8011140:	4622      	mov	r2, r4
 8011142:	462b      	mov	r3, r5
 8011144:	f7ef f9c8 	bl	80004d8 <__aeabi_dmul>
 8011148:	a339      	add	r3, pc, #228	; (adr r3, 8011230 <__ieee754_acos+0x478>)
 801114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114e:	f7ef f80d 	bl	800016c <__adddf3>
 8011152:	4622      	mov	r2, r4
 8011154:	462b      	mov	r3, r5
 8011156:	f7ef f9bf 	bl	80004d8 <__aeabi_dmul>
 801115a:	a337      	add	r3, pc, #220	; (adr r3, 8011238 <__ieee754_acos+0x480>)
 801115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011160:	f7ef f802 	bl	8000168 <__aeabi_dsub>
 8011164:	4622      	mov	r2, r4
 8011166:	462b      	mov	r3, r5
 8011168:	f7ef f9b6 	bl	80004d8 <__aeabi_dmul>
 801116c:	2200      	movs	r2, #0
 801116e:	4b36      	ldr	r3, [pc, #216]	; (8011248 <__ieee754_acos+0x490>)
 8011170:	f7ee fffc 	bl	800016c <__adddf3>
 8011174:	4602      	mov	r2, r0
 8011176:	460b      	mov	r3, r1
 8011178:	4650      	mov	r0, sl
 801117a:	4659      	mov	r1, fp
 801117c:	f7ef fad6 	bl	800072c <__aeabi_ddiv>
 8011180:	4642      	mov	r2, r8
 8011182:	464b      	mov	r3, r9
 8011184:	f7ef f9a8 	bl	80004d8 <__aeabi_dmul>
 8011188:	2600      	movs	r6, #0
 801118a:	4682      	mov	sl, r0
 801118c:	468b      	mov	fp, r1
 801118e:	4632      	mov	r2, r6
 8011190:	464b      	mov	r3, r9
 8011192:	4630      	mov	r0, r6
 8011194:	4649      	mov	r1, r9
 8011196:	f7ef f99f 	bl	80004d8 <__aeabi_dmul>
 801119a:	4602      	mov	r2, r0
 801119c:	460b      	mov	r3, r1
 801119e:	4620      	mov	r0, r4
 80111a0:	4629      	mov	r1, r5
 80111a2:	f7ee ffe1 	bl	8000168 <__aeabi_dsub>
 80111a6:	4632      	mov	r2, r6
 80111a8:	4604      	mov	r4, r0
 80111aa:	460d      	mov	r5, r1
 80111ac:	464b      	mov	r3, r9
 80111ae:	4640      	mov	r0, r8
 80111b0:	4649      	mov	r1, r9
 80111b2:	f7ee ffdb 	bl	800016c <__adddf3>
 80111b6:	4602      	mov	r2, r0
 80111b8:	460b      	mov	r3, r1
 80111ba:	4620      	mov	r0, r4
 80111bc:	4629      	mov	r1, r5
 80111be:	f7ef fab5 	bl	800072c <__aeabi_ddiv>
 80111c2:	4602      	mov	r2, r0
 80111c4:	460b      	mov	r3, r1
 80111c6:	4650      	mov	r0, sl
 80111c8:	4659      	mov	r1, fp
 80111ca:	f7ee ffcf 	bl	800016c <__adddf3>
 80111ce:	4632      	mov	r2, r6
 80111d0:	464b      	mov	r3, r9
 80111d2:	f7ee ffcb 	bl	800016c <__adddf3>
 80111d6:	4602      	mov	r2, r0
 80111d8:	460b      	mov	r3, r1
 80111da:	f7ee ffc7 	bl	800016c <__adddf3>
 80111de:	e600      	b.n	8010de2 <__ieee754_acos+0x2a>
 80111e0:	2000      	movs	r0, #0
 80111e2:	2100      	movs	r1, #0
 80111e4:	e5fd      	b.n	8010de2 <__ieee754_acos+0x2a>
 80111e6:	a116      	add	r1, pc, #88	; (adr r1, 8011240 <__ieee754_acos+0x488>)
 80111e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111ec:	e5f9      	b.n	8010de2 <__ieee754_acos+0x2a>
 80111ee:	bf00      	nop
 80111f0:	0dfdf709 	.word	0x0dfdf709
 80111f4:	3f023de1 	.word	0x3f023de1
 80111f8:	7501b288 	.word	0x7501b288
 80111fc:	3f49efe0 	.word	0x3f49efe0
 8011200:	b5688f3b 	.word	0xb5688f3b
 8011204:	3fa48228 	.word	0x3fa48228
 8011208:	0e884455 	.word	0x0e884455
 801120c:	3fc9c155 	.word	0x3fc9c155
 8011210:	03eb6f7d 	.word	0x03eb6f7d
 8011214:	3fd4d612 	.word	0x3fd4d612
 8011218:	55555555 	.word	0x55555555
 801121c:	3fc55555 	.word	0x3fc55555
 8011220:	b12e9282 	.word	0xb12e9282
 8011224:	3fb3b8c5 	.word	0x3fb3b8c5
 8011228:	1b8d0159 	.word	0x1b8d0159
 801122c:	3fe6066c 	.word	0x3fe6066c
 8011230:	9c598ac8 	.word	0x9c598ac8
 8011234:	40002ae5 	.word	0x40002ae5
 8011238:	1c8a2d4b 	.word	0x1c8a2d4b
 801123c:	40033a27 	.word	0x40033a27
 8011240:	54442d18 	.word	0x54442d18
 8011244:	3ff921fb 	.word	0x3ff921fb
 8011248:	3ff00000 	.word	0x3ff00000
 801124c:	3fe00000 	.word	0x3fe00000

08011250 <__ieee754_pow>:
 8011250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011254:	b093      	sub	sp, #76	; 0x4c
 8011256:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801125a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 801125e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8011262:	4689      	mov	r9, r1
 8011264:	ea56 0102 	orrs.w	r1, r6, r2
 8011268:	4680      	mov	r8, r0
 801126a:	d111      	bne.n	8011290 <__ieee754_pow+0x40>
 801126c:	1803      	adds	r3, r0, r0
 801126e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8011272:	4152      	adcs	r2, r2
 8011274:	4299      	cmp	r1, r3
 8011276:	4b82      	ldr	r3, [pc, #520]	; (8011480 <__ieee754_pow+0x230>)
 8011278:	4193      	sbcs	r3, r2
 801127a:	f080 84ba 	bcs.w	8011bf2 <__ieee754_pow+0x9a2>
 801127e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011282:	4640      	mov	r0, r8
 8011284:	4649      	mov	r1, r9
 8011286:	f7ee ff71 	bl	800016c <__adddf3>
 801128a:	4683      	mov	fp, r0
 801128c:	468c      	mov	ip, r1
 801128e:	e06f      	b.n	8011370 <__ieee754_pow+0x120>
 8011290:	4b7c      	ldr	r3, [pc, #496]	; (8011484 <__ieee754_pow+0x234>)
 8011292:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8011296:	429c      	cmp	r4, r3
 8011298:	464d      	mov	r5, r9
 801129a:	4682      	mov	sl, r0
 801129c:	dc06      	bgt.n	80112ac <__ieee754_pow+0x5c>
 801129e:	d101      	bne.n	80112a4 <__ieee754_pow+0x54>
 80112a0:	2800      	cmp	r0, #0
 80112a2:	d1ec      	bne.n	801127e <__ieee754_pow+0x2e>
 80112a4:	429e      	cmp	r6, r3
 80112a6:	dc01      	bgt.n	80112ac <__ieee754_pow+0x5c>
 80112a8:	d10f      	bne.n	80112ca <__ieee754_pow+0x7a>
 80112aa:	b172      	cbz	r2, 80112ca <__ieee754_pow+0x7a>
 80112ac:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80112b0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80112b4:	ea55 050a 	orrs.w	r5, r5, sl
 80112b8:	d1e1      	bne.n	801127e <__ieee754_pow+0x2e>
 80112ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80112be:	18db      	adds	r3, r3, r3
 80112c0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80112c4:	4152      	adcs	r2, r2
 80112c6:	429d      	cmp	r5, r3
 80112c8:	e7d5      	b.n	8011276 <__ieee754_pow+0x26>
 80112ca:	2d00      	cmp	r5, #0
 80112cc:	da39      	bge.n	8011342 <__ieee754_pow+0xf2>
 80112ce:	4b6e      	ldr	r3, [pc, #440]	; (8011488 <__ieee754_pow+0x238>)
 80112d0:	429e      	cmp	r6, r3
 80112d2:	dc52      	bgt.n	801137a <__ieee754_pow+0x12a>
 80112d4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80112d8:	429e      	cmp	r6, r3
 80112da:	f340 849d 	ble.w	8011c18 <__ieee754_pow+0x9c8>
 80112de:	1533      	asrs	r3, r6, #20
 80112e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80112e4:	2b14      	cmp	r3, #20
 80112e6:	dd0f      	ble.n	8011308 <__ieee754_pow+0xb8>
 80112e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80112ec:	fa22 f103 	lsr.w	r1, r2, r3
 80112f0:	fa01 f303 	lsl.w	r3, r1, r3
 80112f4:	4293      	cmp	r3, r2
 80112f6:	f040 848f 	bne.w	8011c18 <__ieee754_pow+0x9c8>
 80112fa:	f001 0101 	and.w	r1, r1, #1
 80112fe:	f1c1 0302 	rsb	r3, r1, #2
 8011302:	9300      	str	r3, [sp, #0]
 8011304:	b182      	cbz	r2, 8011328 <__ieee754_pow+0xd8>
 8011306:	e05d      	b.n	80113c4 <__ieee754_pow+0x174>
 8011308:	2a00      	cmp	r2, #0
 801130a:	d159      	bne.n	80113c0 <__ieee754_pow+0x170>
 801130c:	f1c3 0314 	rsb	r3, r3, #20
 8011310:	fa46 f103 	asr.w	r1, r6, r3
 8011314:	fa01 f303 	lsl.w	r3, r1, r3
 8011318:	42b3      	cmp	r3, r6
 801131a:	f040 847a 	bne.w	8011c12 <__ieee754_pow+0x9c2>
 801131e:	f001 0101 	and.w	r1, r1, #1
 8011322:	f1c1 0302 	rsb	r3, r1, #2
 8011326:	9300      	str	r3, [sp, #0]
 8011328:	4b58      	ldr	r3, [pc, #352]	; (801148c <__ieee754_pow+0x23c>)
 801132a:	429e      	cmp	r6, r3
 801132c:	d132      	bne.n	8011394 <__ieee754_pow+0x144>
 801132e:	2f00      	cmp	r7, #0
 8011330:	f280 846b 	bge.w	8011c0a <__ieee754_pow+0x9ba>
 8011334:	4642      	mov	r2, r8
 8011336:	464b      	mov	r3, r9
 8011338:	2000      	movs	r0, #0
 801133a:	4954      	ldr	r1, [pc, #336]	; (801148c <__ieee754_pow+0x23c>)
 801133c:	f7ef f9f6 	bl	800072c <__aeabi_ddiv>
 8011340:	e7a3      	b.n	801128a <__ieee754_pow+0x3a>
 8011342:	2300      	movs	r3, #0
 8011344:	9300      	str	r3, [sp, #0]
 8011346:	2a00      	cmp	r2, #0
 8011348:	d13c      	bne.n	80113c4 <__ieee754_pow+0x174>
 801134a:	4b4e      	ldr	r3, [pc, #312]	; (8011484 <__ieee754_pow+0x234>)
 801134c:	429e      	cmp	r6, r3
 801134e:	d1eb      	bne.n	8011328 <__ieee754_pow+0xd8>
 8011350:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011354:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011358:	ea53 030a 	orrs.w	r3, r3, sl
 801135c:	f000 8449 	beq.w	8011bf2 <__ieee754_pow+0x9a2>
 8011360:	4b4b      	ldr	r3, [pc, #300]	; (8011490 <__ieee754_pow+0x240>)
 8011362:	429c      	cmp	r4, r3
 8011364:	dd0b      	ble.n	801137e <__ieee754_pow+0x12e>
 8011366:	2f00      	cmp	r7, #0
 8011368:	f2c0 8449 	blt.w	8011bfe <__ieee754_pow+0x9ae>
 801136c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8011370:	4658      	mov	r0, fp
 8011372:	4661      	mov	r1, ip
 8011374:	b013      	add	sp, #76	; 0x4c
 8011376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801137a:	2302      	movs	r3, #2
 801137c:	e7e2      	b.n	8011344 <__ieee754_pow+0xf4>
 801137e:	2f00      	cmp	r7, #0
 8011380:	f04f 0b00 	mov.w	fp, #0
 8011384:	f04f 0c00 	mov.w	ip, #0
 8011388:	daf2      	bge.n	8011370 <__ieee754_pow+0x120>
 801138a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801138e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8011392:	e7ed      	b.n	8011370 <__ieee754_pow+0x120>
 8011394:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8011398:	d106      	bne.n	80113a8 <__ieee754_pow+0x158>
 801139a:	4642      	mov	r2, r8
 801139c:	464b      	mov	r3, r9
 801139e:	4640      	mov	r0, r8
 80113a0:	4649      	mov	r1, r9
 80113a2:	f7ef f899 	bl	80004d8 <__aeabi_dmul>
 80113a6:	e770      	b.n	801128a <__ieee754_pow+0x3a>
 80113a8:	4b3a      	ldr	r3, [pc, #232]	; (8011494 <__ieee754_pow+0x244>)
 80113aa:	429f      	cmp	r7, r3
 80113ac:	d10a      	bne.n	80113c4 <__ieee754_pow+0x174>
 80113ae:	2d00      	cmp	r5, #0
 80113b0:	db08      	blt.n	80113c4 <__ieee754_pow+0x174>
 80113b2:	4640      	mov	r0, r8
 80113b4:	4649      	mov	r1, r9
 80113b6:	b013      	add	sp, #76	; 0x4c
 80113b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113bc:	f7ff b840 	b.w	8010440 <__ieee754_sqrt>
 80113c0:	2300      	movs	r3, #0
 80113c2:	9300      	str	r3, [sp, #0]
 80113c4:	4640      	mov	r0, r8
 80113c6:	4649      	mov	r1, r9
 80113c8:	f7fe ff9e 	bl	8010308 <fabs>
 80113cc:	4683      	mov	fp, r0
 80113ce:	468c      	mov	ip, r1
 80113d0:	f1ba 0f00 	cmp.w	sl, #0
 80113d4:	d128      	bne.n	8011428 <__ieee754_pow+0x1d8>
 80113d6:	b124      	cbz	r4, 80113e2 <__ieee754_pow+0x192>
 80113d8:	4b2c      	ldr	r3, [pc, #176]	; (801148c <__ieee754_pow+0x23c>)
 80113da:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80113de:	429a      	cmp	r2, r3
 80113e0:	d122      	bne.n	8011428 <__ieee754_pow+0x1d8>
 80113e2:	2f00      	cmp	r7, #0
 80113e4:	da07      	bge.n	80113f6 <__ieee754_pow+0x1a6>
 80113e6:	465a      	mov	r2, fp
 80113e8:	4663      	mov	r3, ip
 80113ea:	2000      	movs	r0, #0
 80113ec:	4927      	ldr	r1, [pc, #156]	; (801148c <__ieee754_pow+0x23c>)
 80113ee:	f7ef f99d 	bl	800072c <__aeabi_ddiv>
 80113f2:	4683      	mov	fp, r0
 80113f4:	468c      	mov	ip, r1
 80113f6:	2d00      	cmp	r5, #0
 80113f8:	daba      	bge.n	8011370 <__ieee754_pow+0x120>
 80113fa:	9b00      	ldr	r3, [sp, #0]
 80113fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011400:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011404:	431c      	orrs	r4, r3
 8011406:	d108      	bne.n	801141a <__ieee754_pow+0x1ca>
 8011408:	465a      	mov	r2, fp
 801140a:	4663      	mov	r3, ip
 801140c:	4658      	mov	r0, fp
 801140e:	4661      	mov	r1, ip
 8011410:	f7ee feaa 	bl	8000168 <__aeabi_dsub>
 8011414:	4602      	mov	r2, r0
 8011416:	460b      	mov	r3, r1
 8011418:	e790      	b.n	801133c <__ieee754_pow+0xec>
 801141a:	9b00      	ldr	r3, [sp, #0]
 801141c:	2b01      	cmp	r3, #1
 801141e:	d1a7      	bne.n	8011370 <__ieee754_pow+0x120>
 8011420:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8011424:	469c      	mov	ip, r3
 8011426:	e7a3      	b.n	8011370 <__ieee754_pow+0x120>
 8011428:	0feb      	lsrs	r3, r5, #31
 801142a:	3b01      	subs	r3, #1
 801142c:	930c      	str	r3, [sp, #48]	; 0x30
 801142e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011430:	9b00      	ldr	r3, [sp, #0]
 8011432:	4313      	orrs	r3, r2
 8011434:	d104      	bne.n	8011440 <__ieee754_pow+0x1f0>
 8011436:	4642      	mov	r2, r8
 8011438:	464b      	mov	r3, r9
 801143a:	4640      	mov	r0, r8
 801143c:	4649      	mov	r1, r9
 801143e:	e7e7      	b.n	8011410 <__ieee754_pow+0x1c0>
 8011440:	4b15      	ldr	r3, [pc, #84]	; (8011498 <__ieee754_pow+0x248>)
 8011442:	429e      	cmp	r6, r3
 8011444:	f340 80f6 	ble.w	8011634 <__ieee754_pow+0x3e4>
 8011448:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801144c:	429e      	cmp	r6, r3
 801144e:	4b10      	ldr	r3, [pc, #64]	; (8011490 <__ieee754_pow+0x240>)
 8011450:	dd09      	ble.n	8011466 <__ieee754_pow+0x216>
 8011452:	429c      	cmp	r4, r3
 8011454:	dc0c      	bgt.n	8011470 <__ieee754_pow+0x220>
 8011456:	2f00      	cmp	r7, #0
 8011458:	da0c      	bge.n	8011474 <__ieee754_pow+0x224>
 801145a:	2000      	movs	r0, #0
 801145c:	b013      	add	sp, #76	; 0x4c
 801145e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011462:	f001 b83a 	b.w	80124da <__math_oflow>
 8011466:	429c      	cmp	r4, r3
 8011468:	dbf5      	blt.n	8011456 <__ieee754_pow+0x206>
 801146a:	4b08      	ldr	r3, [pc, #32]	; (801148c <__ieee754_pow+0x23c>)
 801146c:	429c      	cmp	r4, r3
 801146e:	dd15      	ble.n	801149c <__ieee754_pow+0x24c>
 8011470:	2f00      	cmp	r7, #0
 8011472:	dcf2      	bgt.n	801145a <__ieee754_pow+0x20a>
 8011474:	2000      	movs	r0, #0
 8011476:	b013      	add	sp, #76	; 0x4c
 8011478:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801147c:	f001 b828 	b.w	80124d0 <__math_uflow>
 8011480:	fff00000 	.word	0xfff00000
 8011484:	7ff00000 	.word	0x7ff00000
 8011488:	433fffff 	.word	0x433fffff
 801148c:	3ff00000 	.word	0x3ff00000
 8011490:	3fefffff 	.word	0x3fefffff
 8011494:	3fe00000 	.word	0x3fe00000
 8011498:	41e00000 	.word	0x41e00000
 801149c:	4661      	mov	r1, ip
 801149e:	2200      	movs	r2, #0
 80114a0:	4658      	mov	r0, fp
 80114a2:	4b5f      	ldr	r3, [pc, #380]	; (8011620 <__ieee754_pow+0x3d0>)
 80114a4:	f7ee fe60 	bl	8000168 <__aeabi_dsub>
 80114a8:	a355      	add	r3, pc, #340	; (adr r3, 8011600 <__ieee754_pow+0x3b0>)
 80114aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ae:	4604      	mov	r4, r0
 80114b0:	460d      	mov	r5, r1
 80114b2:	f7ef f811 	bl	80004d8 <__aeabi_dmul>
 80114b6:	a354      	add	r3, pc, #336	; (adr r3, 8011608 <__ieee754_pow+0x3b8>)
 80114b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114bc:	4606      	mov	r6, r0
 80114be:	460f      	mov	r7, r1
 80114c0:	4620      	mov	r0, r4
 80114c2:	4629      	mov	r1, r5
 80114c4:	f7ef f808 	bl	80004d8 <__aeabi_dmul>
 80114c8:	2200      	movs	r2, #0
 80114ca:	4682      	mov	sl, r0
 80114cc:	468b      	mov	fp, r1
 80114ce:	4620      	mov	r0, r4
 80114d0:	4629      	mov	r1, r5
 80114d2:	4b54      	ldr	r3, [pc, #336]	; (8011624 <__ieee754_pow+0x3d4>)
 80114d4:	f7ef f800 	bl	80004d8 <__aeabi_dmul>
 80114d8:	4602      	mov	r2, r0
 80114da:	460b      	mov	r3, r1
 80114dc:	a14c      	add	r1, pc, #304	; (adr r1, 8011610 <__ieee754_pow+0x3c0>)
 80114de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114e2:	f7ee fe41 	bl	8000168 <__aeabi_dsub>
 80114e6:	4622      	mov	r2, r4
 80114e8:	462b      	mov	r3, r5
 80114ea:	f7ee fff5 	bl	80004d8 <__aeabi_dmul>
 80114ee:	4602      	mov	r2, r0
 80114f0:	460b      	mov	r3, r1
 80114f2:	2000      	movs	r0, #0
 80114f4:	494c      	ldr	r1, [pc, #304]	; (8011628 <__ieee754_pow+0x3d8>)
 80114f6:	f7ee fe37 	bl	8000168 <__aeabi_dsub>
 80114fa:	4622      	mov	r2, r4
 80114fc:	462b      	mov	r3, r5
 80114fe:	4680      	mov	r8, r0
 8011500:	4689      	mov	r9, r1
 8011502:	4620      	mov	r0, r4
 8011504:	4629      	mov	r1, r5
 8011506:	f7ee ffe7 	bl	80004d8 <__aeabi_dmul>
 801150a:	4602      	mov	r2, r0
 801150c:	460b      	mov	r3, r1
 801150e:	4640      	mov	r0, r8
 8011510:	4649      	mov	r1, r9
 8011512:	f7ee ffe1 	bl	80004d8 <__aeabi_dmul>
 8011516:	a340      	add	r3, pc, #256	; (adr r3, 8011618 <__ieee754_pow+0x3c8>)
 8011518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151c:	f7ee ffdc 	bl	80004d8 <__aeabi_dmul>
 8011520:	4602      	mov	r2, r0
 8011522:	460b      	mov	r3, r1
 8011524:	4650      	mov	r0, sl
 8011526:	4659      	mov	r1, fp
 8011528:	f7ee fe1e 	bl	8000168 <__aeabi_dsub>
 801152c:	4602      	mov	r2, r0
 801152e:	460b      	mov	r3, r1
 8011530:	4604      	mov	r4, r0
 8011532:	460d      	mov	r5, r1
 8011534:	4630      	mov	r0, r6
 8011536:	4639      	mov	r1, r7
 8011538:	f7ee fe18 	bl	800016c <__adddf3>
 801153c:	2000      	movs	r0, #0
 801153e:	4632      	mov	r2, r6
 8011540:	463b      	mov	r3, r7
 8011542:	4682      	mov	sl, r0
 8011544:	468b      	mov	fp, r1
 8011546:	f7ee fe0f 	bl	8000168 <__aeabi_dsub>
 801154a:	4602      	mov	r2, r0
 801154c:	460b      	mov	r3, r1
 801154e:	4620      	mov	r0, r4
 8011550:	4629      	mov	r1, r5
 8011552:	f7ee fe09 	bl	8000168 <__aeabi_dsub>
 8011556:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801155a:	9b00      	ldr	r3, [sp, #0]
 801155c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801155e:	3b01      	subs	r3, #1
 8011560:	4313      	orrs	r3, r2
 8011562:	f04f 0600 	mov.w	r6, #0
 8011566:	f04f 0200 	mov.w	r2, #0
 801156a:	bf0c      	ite	eq
 801156c:	4b2f      	ldreq	r3, [pc, #188]	; (801162c <__ieee754_pow+0x3dc>)
 801156e:	4b2c      	ldrne	r3, [pc, #176]	; (8011620 <__ieee754_pow+0x3d0>)
 8011570:	4604      	mov	r4, r0
 8011572:	460d      	mov	r5, r1
 8011574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011578:	e9cd 2300 	strd	r2, r3, [sp]
 801157c:	4632      	mov	r2, r6
 801157e:	463b      	mov	r3, r7
 8011580:	f7ee fdf2 	bl	8000168 <__aeabi_dsub>
 8011584:	4652      	mov	r2, sl
 8011586:	465b      	mov	r3, fp
 8011588:	f7ee ffa6 	bl	80004d8 <__aeabi_dmul>
 801158c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011590:	4680      	mov	r8, r0
 8011592:	4689      	mov	r9, r1
 8011594:	4620      	mov	r0, r4
 8011596:	4629      	mov	r1, r5
 8011598:	f7ee ff9e 	bl	80004d8 <__aeabi_dmul>
 801159c:	4602      	mov	r2, r0
 801159e:	460b      	mov	r3, r1
 80115a0:	4640      	mov	r0, r8
 80115a2:	4649      	mov	r1, r9
 80115a4:	f7ee fde2 	bl	800016c <__adddf3>
 80115a8:	4632      	mov	r2, r6
 80115aa:	463b      	mov	r3, r7
 80115ac:	4680      	mov	r8, r0
 80115ae:	4689      	mov	r9, r1
 80115b0:	4650      	mov	r0, sl
 80115b2:	4659      	mov	r1, fp
 80115b4:	f7ee ff90 	bl	80004d8 <__aeabi_dmul>
 80115b8:	4604      	mov	r4, r0
 80115ba:	460d      	mov	r5, r1
 80115bc:	460b      	mov	r3, r1
 80115be:	4602      	mov	r2, r0
 80115c0:	4649      	mov	r1, r9
 80115c2:	4640      	mov	r0, r8
 80115c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80115c8:	f7ee fdd0 	bl	800016c <__adddf3>
 80115cc:	4b18      	ldr	r3, [pc, #96]	; (8011630 <__ieee754_pow+0x3e0>)
 80115ce:	4682      	mov	sl, r0
 80115d0:	4299      	cmp	r1, r3
 80115d2:	460f      	mov	r7, r1
 80115d4:	460e      	mov	r6, r1
 80115d6:	f340 82e7 	ble.w	8011ba8 <__ieee754_pow+0x958>
 80115da:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80115de:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80115e2:	4303      	orrs	r3, r0
 80115e4:	f000 81e2 	beq.w	80119ac <__ieee754_pow+0x75c>
 80115e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115ec:	2200      	movs	r2, #0
 80115ee:	2300      	movs	r3, #0
 80115f0:	f7ef f9e4 	bl	80009bc <__aeabi_dcmplt>
 80115f4:	3800      	subs	r0, #0
 80115f6:	bf18      	it	ne
 80115f8:	2001      	movne	r0, #1
 80115fa:	e72f      	b.n	801145c <__ieee754_pow+0x20c>
 80115fc:	f3af 8000 	nop.w
 8011600:	60000000 	.word	0x60000000
 8011604:	3ff71547 	.word	0x3ff71547
 8011608:	f85ddf44 	.word	0xf85ddf44
 801160c:	3e54ae0b 	.word	0x3e54ae0b
 8011610:	55555555 	.word	0x55555555
 8011614:	3fd55555 	.word	0x3fd55555
 8011618:	652b82fe 	.word	0x652b82fe
 801161c:	3ff71547 	.word	0x3ff71547
 8011620:	3ff00000 	.word	0x3ff00000
 8011624:	3fd00000 	.word	0x3fd00000
 8011628:	3fe00000 	.word	0x3fe00000
 801162c:	bff00000 	.word	0xbff00000
 8011630:	408fffff 	.word	0x408fffff
 8011634:	4bd4      	ldr	r3, [pc, #848]	; (8011988 <__ieee754_pow+0x738>)
 8011636:	2200      	movs	r2, #0
 8011638:	402b      	ands	r3, r5
 801163a:	b943      	cbnz	r3, 801164e <__ieee754_pow+0x3fe>
 801163c:	4658      	mov	r0, fp
 801163e:	4661      	mov	r1, ip
 8011640:	4bd2      	ldr	r3, [pc, #840]	; (801198c <__ieee754_pow+0x73c>)
 8011642:	f7ee ff49 	bl	80004d8 <__aeabi_dmul>
 8011646:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801164a:	4683      	mov	fp, r0
 801164c:	460c      	mov	r4, r1
 801164e:	1523      	asrs	r3, r4, #20
 8011650:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011654:	4413      	add	r3, r2
 8011656:	930b      	str	r3, [sp, #44]	; 0x2c
 8011658:	4bcd      	ldr	r3, [pc, #820]	; (8011990 <__ieee754_pow+0x740>)
 801165a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801165e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011662:	429c      	cmp	r4, r3
 8011664:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011668:	dd08      	ble.n	801167c <__ieee754_pow+0x42c>
 801166a:	4bca      	ldr	r3, [pc, #808]	; (8011994 <__ieee754_pow+0x744>)
 801166c:	429c      	cmp	r4, r3
 801166e:	f340 8164 	ble.w	801193a <__ieee754_pow+0x6ea>
 8011672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011674:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011678:	3301      	adds	r3, #1
 801167a:	930b      	str	r3, [sp, #44]	; 0x2c
 801167c:	2600      	movs	r6, #0
 801167e:	00f3      	lsls	r3, r6, #3
 8011680:	930d      	str	r3, [sp, #52]	; 0x34
 8011682:	4bc5      	ldr	r3, [pc, #788]	; (8011998 <__ieee754_pow+0x748>)
 8011684:	4658      	mov	r0, fp
 8011686:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801168a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801168e:	4629      	mov	r1, r5
 8011690:	461a      	mov	r2, r3
 8011692:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8011696:	4623      	mov	r3, r4
 8011698:	f7ee fd66 	bl	8000168 <__aeabi_dsub>
 801169c:	46da      	mov	sl, fp
 801169e:	462b      	mov	r3, r5
 80116a0:	4652      	mov	r2, sl
 80116a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80116a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80116aa:	f7ee fd5f 	bl	800016c <__adddf3>
 80116ae:	4602      	mov	r2, r0
 80116b0:	460b      	mov	r3, r1
 80116b2:	2000      	movs	r0, #0
 80116b4:	49b9      	ldr	r1, [pc, #740]	; (801199c <__ieee754_pow+0x74c>)
 80116b6:	f7ef f839 	bl	800072c <__aeabi_ddiv>
 80116ba:	4602      	mov	r2, r0
 80116bc:	460b      	mov	r3, r1
 80116be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80116c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80116c6:	f7ee ff07 	bl	80004d8 <__aeabi_dmul>
 80116ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80116ce:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80116d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80116d6:	2300      	movs	r3, #0
 80116d8:	2200      	movs	r2, #0
 80116da:	46ab      	mov	fp, r5
 80116dc:	106d      	asrs	r5, r5, #1
 80116de:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80116e2:	9304      	str	r3, [sp, #16]
 80116e4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80116e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80116ec:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80116f0:	4640      	mov	r0, r8
 80116f2:	4649      	mov	r1, r9
 80116f4:	4614      	mov	r4, r2
 80116f6:	461d      	mov	r5, r3
 80116f8:	f7ee feee 	bl	80004d8 <__aeabi_dmul>
 80116fc:	4602      	mov	r2, r0
 80116fe:	460b      	mov	r3, r1
 8011700:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011704:	f7ee fd30 	bl	8000168 <__aeabi_dsub>
 8011708:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801170c:	4606      	mov	r6, r0
 801170e:	460f      	mov	r7, r1
 8011710:	4620      	mov	r0, r4
 8011712:	4629      	mov	r1, r5
 8011714:	f7ee fd28 	bl	8000168 <__aeabi_dsub>
 8011718:	4602      	mov	r2, r0
 801171a:	460b      	mov	r3, r1
 801171c:	4650      	mov	r0, sl
 801171e:	4659      	mov	r1, fp
 8011720:	f7ee fd22 	bl	8000168 <__aeabi_dsub>
 8011724:	4642      	mov	r2, r8
 8011726:	464b      	mov	r3, r9
 8011728:	f7ee fed6 	bl	80004d8 <__aeabi_dmul>
 801172c:	4602      	mov	r2, r0
 801172e:	460b      	mov	r3, r1
 8011730:	4630      	mov	r0, r6
 8011732:	4639      	mov	r1, r7
 8011734:	f7ee fd18 	bl	8000168 <__aeabi_dsub>
 8011738:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801173c:	f7ee fecc 	bl	80004d8 <__aeabi_dmul>
 8011740:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011744:	4682      	mov	sl, r0
 8011746:	468b      	mov	fp, r1
 8011748:	4610      	mov	r0, r2
 801174a:	4619      	mov	r1, r3
 801174c:	f7ee fec4 	bl	80004d8 <__aeabi_dmul>
 8011750:	a37b      	add	r3, pc, #492	; (adr r3, 8011940 <__ieee754_pow+0x6f0>)
 8011752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011756:	4604      	mov	r4, r0
 8011758:	460d      	mov	r5, r1
 801175a:	f7ee febd 	bl	80004d8 <__aeabi_dmul>
 801175e:	a37a      	add	r3, pc, #488	; (adr r3, 8011948 <__ieee754_pow+0x6f8>)
 8011760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011764:	f7ee fd02 	bl	800016c <__adddf3>
 8011768:	4622      	mov	r2, r4
 801176a:	462b      	mov	r3, r5
 801176c:	f7ee feb4 	bl	80004d8 <__aeabi_dmul>
 8011770:	a377      	add	r3, pc, #476	; (adr r3, 8011950 <__ieee754_pow+0x700>)
 8011772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011776:	f7ee fcf9 	bl	800016c <__adddf3>
 801177a:	4622      	mov	r2, r4
 801177c:	462b      	mov	r3, r5
 801177e:	f7ee feab 	bl	80004d8 <__aeabi_dmul>
 8011782:	a375      	add	r3, pc, #468	; (adr r3, 8011958 <__ieee754_pow+0x708>)
 8011784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011788:	f7ee fcf0 	bl	800016c <__adddf3>
 801178c:	4622      	mov	r2, r4
 801178e:	462b      	mov	r3, r5
 8011790:	f7ee fea2 	bl	80004d8 <__aeabi_dmul>
 8011794:	a372      	add	r3, pc, #456	; (adr r3, 8011960 <__ieee754_pow+0x710>)
 8011796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179a:	f7ee fce7 	bl	800016c <__adddf3>
 801179e:	4622      	mov	r2, r4
 80117a0:	462b      	mov	r3, r5
 80117a2:	f7ee fe99 	bl	80004d8 <__aeabi_dmul>
 80117a6:	a370      	add	r3, pc, #448	; (adr r3, 8011968 <__ieee754_pow+0x718>)
 80117a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ac:	f7ee fcde 	bl	800016c <__adddf3>
 80117b0:	4622      	mov	r2, r4
 80117b2:	4606      	mov	r6, r0
 80117b4:	460f      	mov	r7, r1
 80117b6:	462b      	mov	r3, r5
 80117b8:	4620      	mov	r0, r4
 80117ba:	4629      	mov	r1, r5
 80117bc:	f7ee fe8c 	bl	80004d8 <__aeabi_dmul>
 80117c0:	4602      	mov	r2, r0
 80117c2:	460b      	mov	r3, r1
 80117c4:	4630      	mov	r0, r6
 80117c6:	4639      	mov	r1, r7
 80117c8:	f7ee fe86 	bl	80004d8 <__aeabi_dmul>
 80117cc:	4604      	mov	r4, r0
 80117ce:	460d      	mov	r5, r1
 80117d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80117d4:	4642      	mov	r2, r8
 80117d6:	464b      	mov	r3, r9
 80117d8:	f7ee fcc8 	bl	800016c <__adddf3>
 80117dc:	4652      	mov	r2, sl
 80117de:	465b      	mov	r3, fp
 80117e0:	f7ee fe7a 	bl	80004d8 <__aeabi_dmul>
 80117e4:	4622      	mov	r2, r4
 80117e6:	462b      	mov	r3, r5
 80117e8:	f7ee fcc0 	bl	800016c <__adddf3>
 80117ec:	4642      	mov	r2, r8
 80117ee:	4606      	mov	r6, r0
 80117f0:	460f      	mov	r7, r1
 80117f2:	464b      	mov	r3, r9
 80117f4:	4640      	mov	r0, r8
 80117f6:	4649      	mov	r1, r9
 80117f8:	f7ee fe6e 	bl	80004d8 <__aeabi_dmul>
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011804:	2200      	movs	r2, #0
 8011806:	4b66      	ldr	r3, [pc, #408]	; (80119a0 <__ieee754_pow+0x750>)
 8011808:	f7ee fcb0 	bl	800016c <__adddf3>
 801180c:	4632      	mov	r2, r6
 801180e:	463b      	mov	r3, r7
 8011810:	f7ee fcac 	bl	800016c <__adddf3>
 8011814:	2400      	movs	r4, #0
 8011816:	460d      	mov	r5, r1
 8011818:	4622      	mov	r2, r4
 801181a:	460b      	mov	r3, r1
 801181c:	4640      	mov	r0, r8
 801181e:	4649      	mov	r1, r9
 8011820:	f7ee fe5a 	bl	80004d8 <__aeabi_dmul>
 8011824:	2200      	movs	r2, #0
 8011826:	4680      	mov	r8, r0
 8011828:	4689      	mov	r9, r1
 801182a:	4620      	mov	r0, r4
 801182c:	4629      	mov	r1, r5
 801182e:	4b5c      	ldr	r3, [pc, #368]	; (80119a0 <__ieee754_pow+0x750>)
 8011830:	f7ee fc9a 	bl	8000168 <__aeabi_dsub>
 8011834:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011838:	f7ee fc96 	bl	8000168 <__aeabi_dsub>
 801183c:	4602      	mov	r2, r0
 801183e:	460b      	mov	r3, r1
 8011840:	4630      	mov	r0, r6
 8011842:	4639      	mov	r1, r7
 8011844:	f7ee fc90 	bl	8000168 <__aeabi_dsub>
 8011848:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801184c:	f7ee fe44 	bl	80004d8 <__aeabi_dmul>
 8011850:	4622      	mov	r2, r4
 8011852:	4606      	mov	r6, r0
 8011854:	460f      	mov	r7, r1
 8011856:	462b      	mov	r3, r5
 8011858:	4650      	mov	r0, sl
 801185a:	4659      	mov	r1, fp
 801185c:	f7ee fe3c 	bl	80004d8 <__aeabi_dmul>
 8011860:	4602      	mov	r2, r0
 8011862:	460b      	mov	r3, r1
 8011864:	4630      	mov	r0, r6
 8011866:	4639      	mov	r1, r7
 8011868:	f7ee fc80 	bl	800016c <__adddf3>
 801186c:	2400      	movs	r4, #0
 801186e:	4606      	mov	r6, r0
 8011870:	460f      	mov	r7, r1
 8011872:	4602      	mov	r2, r0
 8011874:	460b      	mov	r3, r1
 8011876:	4640      	mov	r0, r8
 8011878:	4649      	mov	r1, r9
 801187a:	f7ee fc77 	bl	800016c <__adddf3>
 801187e:	a33c      	add	r3, pc, #240	; (adr r3, 8011970 <__ieee754_pow+0x720>)
 8011880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011884:	4620      	mov	r0, r4
 8011886:	460d      	mov	r5, r1
 8011888:	f7ee fe26 	bl	80004d8 <__aeabi_dmul>
 801188c:	4642      	mov	r2, r8
 801188e:	464b      	mov	r3, r9
 8011890:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011894:	4620      	mov	r0, r4
 8011896:	4629      	mov	r1, r5
 8011898:	f7ee fc66 	bl	8000168 <__aeabi_dsub>
 801189c:	4602      	mov	r2, r0
 801189e:	460b      	mov	r3, r1
 80118a0:	4630      	mov	r0, r6
 80118a2:	4639      	mov	r1, r7
 80118a4:	f7ee fc60 	bl	8000168 <__aeabi_dsub>
 80118a8:	a333      	add	r3, pc, #204	; (adr r3, 8011978 <__ieee754_pow+0x728>)
 80118aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ae:	f7ee fe13 	bl	80004d8 <__aeabi_dmul>
 80118b2:	a333      	add	r3, pc, #204	; (adr r3, 8011980 <__ieee754_pow+0x730>)
 80118b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b8:	4606      	mov	r6, r0
 80118ba:	460f      	mov	r7, r1
 80118bc:	4620      	mov	r0, r4
 80118be:	4629      	mov	r1, r5
 80118c0:	f7ee fe0a 	bl	80004d8 <__aeabi_dmul>
 80118c4:	4602      	mov	r2, r0
 80118c6:	460b      	mov	r3, r1
 80118c8:	4630      	mov	r0, r6
 80118ca:	4639      	mov	r1, r7
 80118cc:	f7ee fc4e 	bl	800016c <__adddf3>
 80118d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80118d2:	4b34      	ldr	r3, [pc, #208]	; (80119a4 <__ieee754_pow+0x754>)
 80118d4:	4413      	add	r3, r2
 80118d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118da:	f7ee fc47 	bl	800016c <__adddf3>
 80118de:	4680      	mov	r8, r0
 80118e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80118e2:	4689      	mov	r9, r1
 80118e4:	f7ee fd8e 	bl	8000404 <__aeabi_i2d>
 80118e8:	4604      	mov	r4, r0
 80118ea:	460d      	mov	r5, r1
 80118ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80118f2:	4b2d      	ldr	r3, [pc, #180]	; (80119a8 <__ieee754_pow+0x758>)
 80118f4:	4413      	add	r3, r2
 80118f6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80118fa:	4642      	mov	r2, r8
 80118fc:	464b      	mov	r3, r9
 80118fe:	f7ee fc35 	bl	800016c <__adddf3>
 8011902:	4632      	mov	r2, r6
 8011904:	463b      	mov	r3, r7
 8011906:	f7ee fc31 	bl	800016c <__adddf3>
 801190a:	4622      	mov	r2, r4
 801190c:	462b      	mov	r3, r5
 801190e:	f7ee fc2d 	bl	800016c <__adddf3>
 8011912:	2000      	movs	r0, #0
 8011914:	4622      	mov	r2, r4
 8011916:	462b      	mov	r3, r5
 8011918:	4682      	mov	sl, r0
 801191a:	468b      	mov	fp, r1
 801191c:	f7ee fc24 	bl	8000168 <__aeabi_dsub>
 8011920:	4632      	mov	r2, r6
 8011922:	463b      	mov	r3, r7
 8011924:	f7ee fc20 	bl	8000168 <__aeabi_dsub>
 8011928:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801192c:	f7ee fc1c 	bl	8000168 <__aeabi_dsub>
 8011930:	4602      	mov	r2, r0
 8011932:	460b      	mov	r3, r1
 8011934:	4640      	mov	r0, r8
 8011936:	4649      	mov	r1, r9
 8011938:	e60b      	b.n	8011552 <__ieee754_pow+0x302>
 801193a:	2601      	movs	r6, #1
 801193c:	e69f      	b.n	801167e <__ieee754_pow+0x42e>
 801193e:	bf00      	nop
 8011940:	4a454eef 	.word	0x4a454eef
 8011944:	3fca7e28 	.word	0x3fca7e28
 8011948:	93c9db65 	.word	0x93c9db65
 801194c:	3fcd864a 	.word	0x3fcd864a
 8011950:	a91d4101 	.word	0xa91d4101
 8011954:	3fd17460 	.word	0x3fd17460
 8011958:	518f264d 	.word	0x518f264d
 801195c:	3fd55555 	.word	0x3fd55555
 8011960:	db6fabff 	.word	0xdb6fabff
 8011964:	3fdb6db6 	.word	0x3fdb6db6
 8011968:	33333303 	.word	0x33333303
 801196c:	3fe33333 	.word	0x3fe33333
 8011970:	e0000000 	.word	0xe0000000
 8011974:	3feec709 	.word	0x3feec709
 8011978:	dc3a03fd 	.word	0xdc3a03fd
 801197c:	3feec709 	.word	0x3feec709
 8011980:	145b01f5 	.word	0x145b01f5
 8011984:	be3e2fe0 	.word	0xbe3e2fe0
 8011988:	7ff00000 	.word	0x7ff00000
 801198c:	43400000 	.word	0x43400000
 8011990:	0003988e 	.word	0x0003988e
 8011994:	000bb679 	.word	0x000bb679
 8011998:	08016130 	.word	0x08016130
 801199c:	3ff00000 	.word	0x3ff00000
 80119a0:	40080000 	.word	0x40080000
 80119a4:	08016150 	.word	0x08016150
 80119a8:	08016140 	.word	0x08016140
 80119ac:	a39c      	add	r3, pc, #624	; (adr r3, 8011c20 <__ieee754_pow+0x9d0>)
 80119ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b2:	4640      	mov	r0, r8
 80119b4:	4649      	mov	r1, r9
 80119b6:	f7ee fbd9 	bl	800016c <__adddf3>
 80119ba:	4622      	mov	r2, r4
 80119bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80119c0:	462b      	mov	r3, r5
 80119c2:	4650      	mov	r0, sl
 80119c4:	4639      	mov	r1, r7
 80119c6:	f7ee fbcf 	bl	8000168 <__aeabi_dsub>
 80119ca:	4602      	mov	r2, r0
 80119cc:	460b      	mov	r3, r1
 80119ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80119d2:	f7ef f811 	bl	80009f8 <__aeabi_dcmpgt>
 80119d6:	2800      	cmp	r0, #0
 80119d8:	f47f ae06 	bne.w	80115e8 <__ieee754_pow+0x398>
 80119dc:	4aa2      	ldr	r2, [pc, #648]	; (8011c68 <__ieee754_pow+0xa18>)
 80119de:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80119e2:	4293      	cmp	r3, r2
 80119e4:	f340 8100 	ble.w	8011be8 <__ieee754_pow+0x998>
 80119e8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80119ec:	151b      	asrs	r3, r3, #20
 80119ee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80119f2:	fa4a fa03 	asr.w	sl, sl, r3
 80119f6:	44b2      	add	sl, r6
 80119f8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80119fc:	489b      	ldr	r0, [pc, #620]	; (8011c6c <__ieee754_pow+0xa1c>)
 80119fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011a02:	4108      	asrs	r0, r1
 8011a04:	ea00 030a 	and.w	r3, r0, sl
 8011a08:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011a0c:	f1c1 0114 	rsb	r1, r1, #20
 8011a10:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011a14:	fa4a fa01 	asr.w	sl, sl, r1
 8011a18:	2e00      	cmp	r6, #0
 8011a1a:	f04f 0200 	mov.w	r2, #0
 8011a1e:	4620      	mov	r0, r4
 8011a20:	4629      	mov	r1, r5
 8011a22:	bfb8      	it	lt
 8011a24:	f1ca 0a00 	rsblt	sl, sl, #0
 8011a28:	f7ee fb9e 	bl	8000168 <__aeabi_dsub>
 8011a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a34:	2400      	movs	r4, #0
 8011a36:	4642      	mov	r2, r8
 8011a38:	464b      	mov	r3, r9
 8011a3a:	f7ee fb97 	bl	800016c <__adddf3>
 8011a3e:	a37a      	add	r3, pc, #488	; (adr r3, 8011c28 <__ieee754_pow+0x9d8>)
 8011a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a44:	4620      	mov	r0, r4
 8011a46:	460d      	mov	r5, r1
 8011a48:	f7ee fd46 	bl	80004d8 <__aeabi_dmul>
 8011a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011a50:	4606      	mov	r6, r0
 8011a52:	460f      	mov	r7, r1
 8011a54:	4620      	mov	r0, r4
 8011a56:	4629      	mov	r1, r5
 8011a58:	f7ee fb86 	bl	8000168 <__aeabi_dsub>
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	460b      	mov	r3, r1
 8011a60:	4640      	mov	r0, r8
 8011a62:	4649      	mov	r1, r9
 8011a64:	f7ee fb80 	bl	8000168 <__aeabi_dsub>
 8011a68:	a371      	add	r3, pc, #452	; (adr r3, 8011c30 <__ieee754_pow+0x9e0>)
 8011a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a6e:	f7ee fd33 	bl	80004d8 <__aeabi_dmul>
 8011a72:	a371      	add	r3, pc, #452	; (adr r3, 8011c38 <__ieee754_pow+0x9e8>)
 8011a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a78:	4680      	mov	r8, r0
 8011a7a:	4689      	mov	r9, r1
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	4629      	mov	r1, r5
 8011a80:	f7ee fd2a 	bl	80004d8 <__aeabi_dmul>
 8011a84:	4602      	mov	r2, r0
 8011a86:	460b      	mov	r3, r1
 8011a88:	4640      	mov	r0, r8
 8011a8a:	4649      	mov	r1, r9
 8011a8c:	f7ee fb6e 	bl	800016c <__adddf3>
 8011a90:	4604      	mov	r4, r0
 8011a92:	460d      	mov	r5, r1
 8011a94:	4602      	mov	r2, r0
 8011a96:	460b      	mov	r3, r1
 8011a98:	4630      	mov	r0, r6
 8011a9a:	4639      	mov	r1, r7
 8011a9c:	f7ee fb66 	bl	800016c <__adddf3>
 8011aa0:	4632      	mov	r2, r6
 8011aa2:	463b      	mov	r3, r7
 8011aa4:	4680      	mov	r8, r0
 8011aa6:	4689      	mov	r9, r1
 8011aa8:	f7ee fb5e 	bl	8000168 <__aeabi_dsub>
 8011aac:	4602      	mov	r2, r0
 8011aae:	460b      	mov	r3, r1
 8011ab0:	4620      	mov	r0, r4
 8011ab2:	4629      	mov	r1, r5
 8011ab4:	f7ee fb58 	bl	8000168 <__aeabi_dsub>
 8011ab8:	4642      	mov	r2, r8
 8011aba:	4606      	mov	r6, r0
 8011abc:	460f      	mov	r7, r1
 8011abe:	464b      	mov	r3, r9
 8011ac0:	4640      	mov	r0, r8
 8011ac2:	4649      	mov	r1, r9
 8011ac4:	f7ee fd08 	bl	80004d8 <__aeabi_dmul>
 8011ac8:	a35d      	add	r3, pc, #372	; (adr r3, 8011c40 <__ieee754_pow+0x9f0>)
 8011aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ace:	4604      	mov	r4, r0
 8011ad0:	460d      	mov	r5, r1
 8011ad2:	f7ee fd01 	bl	80004d8 <__aeabi_dmul>
 8011ad6:	a35c      	add	r3, pc, #368	; (adr r3, 8011c48 <__ieee754_pow+0x9f8>)
 8011ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011adc:	f7ee fb44 	bl	8000168 <__aeabi_dsub>
 8011ae0:	4622      	mov	r2, r4
 8011ae2:	462b      	mov	r3, r5
 8011ae4:	f7ee fcf8 	bl	80004d8 <__aeabi_dmul>
 8011ae8:	a359      	add	r3, pc, #356	; (adr r3, 8011c50 <__ieee754_pow+0xa00>)
 8011aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aee:	f7ee fb3d 	bl	800016c <__adddf3>
 8011af2:	4622      	mov	r2, r4
 8011af4:	462b      	mov	r3, r5
 8011af6:	f7ee fcef 	bl	80004d8 <__aeabi_dmul>
 8011afa:	a357      	add	r3, pc, #348	; (adr r3, 8011c58 <__ieee754_pow+0xa08>)
 8011afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b00:	f7ee fb32 	bl	8000168 <__aeabi_dsub>
 8011b04:	4622      	mov	r2, r4
 8011b06:	462b      	mov	r3, r5
 8011b08:	f7ee fce6 	bl	80004d8 <__aeabi_dmul>
 8011b0c:	a354      	add	r3, pc, #336	; (adr r3, 8011c60 <__ieee754_pow+0xa10>)
 8011b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b12:	f7ee fb2b 	bl	800016c <__adddf3>
 8011b16:	4622      	mov	r2, r4
 8011b18:	462b      	mov	r3, r5
 8011b1a:	f7ee fcdd 	bl	80004d8 <__aeabi_dmul>
 8011b1e:	4602      	mov	r2, r0
 8011b20:	460b      	mov	r3, r1
 8011b22:	4640      	mov	r0, r8
 8011b24:	4649      	mov	r1, r9
 8011b26:	f7ee fb1f 	bl	8000168 <__aeabi_dsub>
 8011b2a:	4604      	mov	r4, r0
 8011b2c:	460d      	mov	r5, r1
 8011b2e:	4602      	mov	r2, r0
 8011b30:	460b      	mov	r3, r1
 8011b32:	4640      	mov	r0, r8
 8011b34:	4649      	mov	r1, r9
 8011b36:	f7ee fccf 	bl	80004d8 <__aeabi_dmul>
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011b44:	4620      	mov	r0, r4
 8011b46:	4629      	mov	r1, r5
 8011b48:	f7ee fb0e 	bl	8000168 <__aeabi_dsub>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	460b      	mov	r3, r1
 8011b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b54:	f7ee fdea 	bl	800072c <__aeabi_ddiv>
 8011b58:	4632      	mov	r2, r6
 8011b5a:	4604      	mov	r4, r0
 8011b5c:	460d      	mov	r5, r1
 8011b5e:	463b      	mov	r3, r7
 8011b60:	4640      	mov	r0, r8
 8011b62:	4649      	mov	r1, r9
 8011b64:	f7ee fcb8 	bl	80004d8 <__aeabi_dmul>
 8011b68:	4632      	mov	r2, r6
 8011b6a:	463b      	mov	r3, r7
 8011b6c:	f7ee fafe 	bl	800016c <__adddf3>
 8011b70:	4602      	mov	r2, r0
 8011b72:	460b      	mov	r3, r1
 8011b74:	4620      	mov	r0, r4
 8011b76:	4629      	mov	r1, r5
 8011b78:	f7ee faf6 	bl	8000168 <__aeabi_dsub>
 8011b7c:	4642      	mov	r2, r8
 8011b7e:	464b      	mov	r3, r9
 8011b80:	f7ee faf2 	bl	8000168 <__aeabi_dsub>
 8011b84:	4602      	mov	r2, r0
 8011b86:	460b      	mov	r3, r1
 8011b88:	2000      	movs	r0, #0
 8011b8a:	4939      	ldr	r1, [pc, #228]	; (8011c70 <__ieee754_pow+0xa20>)
 8011b8c:	f7ee faec 	bl	8000168 <__aeabi_dsub>
 8011b90:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011b94:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011b98:	da29      	bge.n	8011bee <__ieee754_pow+0x99e>
 8011b9a:	4652      	mov	r2, sl
 8011b9c:	f000 fbfc 	bl	8012398 <scalbn>
 8011ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ba4:	f7ff bbfd 	b.w	80113a2 <__ieee754_pow+0x152>
 8011ba8:	4b32      	ldr	r3, [pc, #200]	; (8011c74 <__ieee754_pow+0xa24>)
 8011baa:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8011bae:	429f      	cmp	r7, r3
 8011bb0:	f77f af14 	ble.w	80119dc <__ieee754_pow+0x78c>
 8011bb4:	4b30      	ldr	r3, [pc, #192]	; (8011c78 <__ieee754_pow+0xa28>)
 8011bb6:	440b      	add	r3, r1
 8011bb8:	4303      	orrs	r3, r0
 8011bba:	d009      	beq.n	8011bd0 <__ieee754_pow+0x980>
 8011bbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	f7ee fefa 	bl	80009bc <__aeabi_dcmplt>
 8011bc8:	3800      	subs	r0, #0
 8011bca:	bf18      	it	ne
 8011bcc:	2001      	movne	r0, #1
 8011bce:	e452      	b.n	8011476 <__ieee754_pow+0x226>
 8011bd0:	4622      	mov	r2, r4
 8011bd2:	462b      	mov	r3, r5
 8011bd4:	f7ee fac8 	bl	8000168 <__aeabi_dsub>
 8011bd8:	4642      	mov	r2, r8
 8011bda:	464b      	mov	r3, r9
 8011bdc:	f7ee ff02 	bl	80009e4 <__aeabi_dcmpge>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	f43f aefb 	beq.w	80119dc <__ieee754_pow+0x78c>
 8011be6:	e7e9      	b.n	8011bbc <__ieee754_pow+0x96c>
 8011be8:	f04f 0a00 	mov.w	sl, #0
 8011bec:	e720      	b.n	8011a30 <__ieee754_pow+0x7e0>
 8011bee:	4621      	mov	r1, r4
 8011bf0:	e7d6      	b.n	8011ba0 <__ieee754_pow+0x950>
 8011bf2:	f04f 0b00 	mov.w	fp, #0
 8011bf6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8011c70 <__ieee754_pow+0xa20>
 8011bfa:	f7ff bbb9 	b.w	8011370 <__ieee754_pow+0x120>
 8011bfe:	f04f 0b00 	mov.w	fp, #0
 8011c02:	f04f 0c00 	mov.w	ip, #0
 8011c06:	f7ff bbb3 	b.w	8011370 <__ieee754_pow+0x120>
 8011c0a:	4640      	mov	r0, r8
 8011c0c:	4649      	mov	r1, r9
 8011c0e:	f7ff bb3c 	b.w	801128a <__ieee754_pow+0x3a>
 8011c12:	9200      	str	r2, [sp, #0]
 8011c14:	f7ff bb88 	b.w	8011328 <__ieee754_pow+0xd8>
 8011c18:	2300      	movs	r3, #0
 8011c1a:	f7ff bb72 	b.w	8011302 <__ieee754_pow+0xb2>
 8011c1e:	bf00      	nop
 8011c20:	652b82fe 	.word	0x652b82fe
 8011c24:	3c971547 	.word	0x3c971547
 8011c28:	00000000 	.word	0x00000000
 8011c2c:	3fe62e43 	.word	0x3fe62e43
 8011c30:	fefa39ef 	.word	0xfefa39ef
 8011c34:	3fe62e42 	.word	0x3fe62e42
 8011c38:	0ca86c39 	.word	0x0ca86c39
 8011c3c:	be205c61 	.word	0xbe205c61
 8011c40:	72bea4d0 	.word	0x72bea4d0
 8011c44:	3e663769 	.word	0x3e663769
 8011c48:	c5d26bf1 	.word	0xc5d26bf1
 8011c4c:	3ebbbd41 	.word	0x3ebbbd41
 8011c50:	af25de2c 	.word	0xaf25de2c
 8011c54:	3f11566a 	.word	0x3f11566a
 8011c58:	16bebd93 	.word	0x16bebd93
 8011c5c:	3f66c16c 	.word	0x3f66c16c
 8011c60:	5555553e 	.word	0x5555553e
 8011c64:	3fc55555 	.word	0x3fc55555
 8011c68:	3fe00000 	.word	0x3fe00000
 8011c6c:	fff00000 	.word	0xfff00000
 8011c70:	3ff00000 	.word	0x3ff00000
 8011c74:	4090cbff 	.word	0x4090cbff
 8011c78:	3f6f3400 	.word	0x3f6f3400
 8011c7c:	00000000 	.word	0x00000000

08011c80 <__ieee754_rem_pio2>:
 8011c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c84:	4614      	mov	r4, r2
 8011c86:	4ac2      	ldr	r2, [pc, #776]	; (8011f90 <__ieee754_rem_pio2+0x310>)
 8011c88:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8011c8c:	b08d      	sub	sp, #52	; 0x34
 8011c8e:	4592      	cmp	sl, r2
 8011c90:	9104      	str	r1, [sp, #16]
 8011c92:	dc07      	bgt.n	8011ca4 <__ieee754_rem_pio2+0x24>
 8011c94:	2200      	movs	r2, #0
 8011c96:	2300      	movs	r3, #0
 8011c98:	e9c4 0100 	strd	r0, r1, [r4]
 8011c9c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8011ca0:	2500      	movs	r5, #0
 8011ca2:	e024      	b.n	8011cee <__ieee754_rem_pio2+0x6e>
 8011ca4:	4abb      	ldr	r2, [pc, #748]	; (8011f94 <__ieee754_rem_pio2+0x314>)
 8011ca6:	4592      	cmp	sl, r2
 8011ca8:	dc72      	bgt.n	8011d90 <__ieee754_rem_pio2+0x110>
 8011caa:	9b04      	ldr	r3, [sp, #16]
 8011cac:	4dba      	ldr	r5, [pc, #744]	; (8011f98 <__ieee754_rem_pio2+0x318>)
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	a3a9      	add	r3, pc, #676	; (adr r3, 8011f58 <__ieee754_rem_pio2+0x2d8>)
 8011cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb6:	dd36      	ble.n	8011d26 <__ieee754_rem_pio2+0xa6>
 8011cb8:	f7ee fa56 	bl	8000168 <__aeabi_dsub>
 8011cbc:	45aa      	cmp	sl, r5
 8011cbe:	4606      	mov	r6, r0
 8011cc0:	460f      	mov	r7, r1
 8011cc2:	d018      	beq.n	8011cf6 <__ieee754_rem_pio2+0x76>
 8011cc4:	a3a6      	add	r3, pc, #664	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2e0>)
 8011cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cca:	f7ee fa4d 	bl	8000168 <__aeabi_dsub>
 8011cce:	4602      	mov	r2, r0
 8011cd0:	460b      	mov	r3, r1
 8011cd2:	4630      	mov	r0, r6
 8011cd4:	e9c4 2300 	strd	r2, r3, [r4]
 8011cd8:	4639      	mov	r1, r7
 8011cda:	f7ee fa45 	bl	8000168 <__aeabi_dsub>
 8011cde:	a3a0      	add	r3, pc, #640	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2e0>)
 8011ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce4:	f7ee fa40 	bl	8000168 <__aeabi_dsub>
 8011ce8:	2501      	movs	r5, #1
 8011cea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011cee:	4628      	mov	r0, r5
 8011cf0:	b00d      	add	sp, #52	; 0x34
 8011cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf6:	a39c      	add	r3, pc, #624	; (adr r3, 8011f68 <__ieee754_rem_pio2+0x2e8>)
 8011cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cfc:	f7ee fa34 	bl	8000168 <__aeabi_dsub>
 8011d00:	a39b      	add	r3, pc, #620	; (adr r3, 8011f70 <__ieee754_rem_pio2+0x2f0>)
 8011d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d06:	4606      	mov	r6, r0
 8011d08:	460f      	mov	r7, r1
 8011d0a:	f7ee fa2d 	bl	8000168 <__aeabi_dsub>
 8011d0e:	4602      	mov	r2, r0
 8011d10:	460b      	mov	r3, r1
 8011d12:	4630      	mov	r0, r6
 8011d14:	e9c4 2300 	strd	r2, r3, [r4]
 8011d18:	4639      	mov	r1, r7
 8011d1a:	f7ee fa25 	bl	8000168 <__aeabi_dsub>
 8011d1e:	a394      	add	r3, pc, #592	; (adr r3, 8011f70 <__ieee754_rem_pio2+0x2f0>)
 8011d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d24:	e7de      	b.n	8011ce4 <__ieee754_rem_pio2+0x64>
 8011d26:	f7ee fa21 	bl	800016c <__adddf3>
 8011d2a:	45aa      	cmp	sl, r5
 8011d2c:	4606      	mov	r6, r0
 8011d2e:	460f      	mov	r7, r1
 8011d30:	d016      	beq.n	8011d60 <__ieee754_rem_pio2+0xe0>
 8011d32:	a38b      	add	r3, pc, #556	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2e0>)
 8011d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d38:	f7ee fa18 	bl	800016c <__adddf3>
 8011d3c:	4602      	mov	r2, r0
 8011d3e:	460b      	mov	r3, r1
 8011d40:	4630      	mov	r0, r6
 8011d42:	e9c4 2300 	strd	r2, r3, [r4]
 8011d46:	4639      	mov	r1, r7
 8011d48:	f7ee fa0e 	bl	8000168 <__aeabi_dsub>
 8011d4c:	a384      	add	r3, pc, #528	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2e0>)
 8011d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d52:	f7ee fa0b 	bl	800016c <__adddf3>
 8011d56:	f04f 35ff 	mov.w	r5, #4294967295
 8011d5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011d5e:	e7c6      	b.n	8011cee <__ieee754_rem_pio2+0x6e>
 8011d60:	a381      	add	r3, pc, #516	; (adr r3, 8011f68 <__ieee754_rem_pio2+0x2e8>)
 8011d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d66:	f7ee fa01 	bl	800016c <__adddf3>
 8011d6a:	a381      	add	r3, pc, #516	; (adr r3, 8011f70 <__ieee754_rem_pio2+0x2f0>)
 8011d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d70:	4606      	mov	r6, r0
 8011d72:	460f      	mov	r7, r1
 8011d74:	f7ee f9fa 	bl	800016c <__adddf3>
 8011d78:	4602      	mov	r2, r0
 8011d7a:	460b      	mov	r3, r1
 8011d7c:	4630      	mov	r0, r6
 8011d7e:	e9c4 2300 	strd	r2, r3, [r4]
 8011d82:	4639      	mov	r1, r7
 8011d84:	f7ee f9f0 	bl	8000168 <__aeabi_dsub>
 8011d88:	a379      	add	r3, pc, #484	; (adr r3, 8011f70 <__ieee754_rem_pio2+0x2f0>)
 8011d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d8e:	e7e0      	b.n	8011d52 <__ieee754_rem_pio2+0xd2>
 8011d90:	4a82      	ldr	r2, [pc, #520]	; (8011f9c <__ieee754_rem_pio2+0x31c>)
 8011d92:	4592      	cmp	sl, r2
 8011d94:	f300 80d4 	bgt.w	8011f40 <__ieee754_rem_pio2+0x2c0>
 8011d98:	f7fe fab6 	bl	8010308 <fabs>
 8011d9c:	a376      	add	r3, pc, #472	; (adr r3, 8011f78 <__ieee754_rem_pio2+0x2f8>)
 8011d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da2:	4606      	mov	r6, r0
 8011da4:	460f      	mov	r7, r1
 8011da6:	f7ee fb97 	bl	80004d8 <__aeabi_dmul>
 8011daa:	2200      	movs	r2, #0
 8011dac:	4b7c      	ldr	r3, [pc, #496]	; (8011fa0 <__ieee754_rem_pio2+0x320>)
 8011dae:	f7ee f9dd 	bl	800016c <__adddf3>
 8011db2:	f7ee fe41 	bl	8000a38 <__aeabi_d2iz>
 8011db6:	4605      	mov	r5, r0
 8011db8:	f7ee fb24 	bl	8000404 <__aeabi_i2d>
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	460b      	mov	r3, r1
 8011dc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011dc4:	a364      	add	r3, pc, #400	; (adr r3, 8011f58 <__ieee754_rem_pio2+0x2d8>)
 8011dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dca:	f7ee fb85 	bl	80004d8 <__aeabi_dmul>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	4639      	mov	r1, r7
 8011dd6:	f7ee f9c7 	bl	8000168 <__aeabi_dsub>
 8011dda:	a361      	add	r3, pc, #388	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2e0>)
 8011ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de0:	4680      	mov	r8, r0
 8011de2:	4689      	mov	r9, r1
 8011de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011de8:	f7ee fb76 	bl	80004d8 <__aeabi_dmul>
 8011dec:	2d1f      	cmp	r5, #31
 8011dee:	4606      	mov	r6, r0
 8011df0:	460f      	mov	r7, r1
 8011df2:	dc0e      	bgt.n	8011e12 <__ieee754_rem_pio2+0x192>
 8011df4:	4b6b      	ldr	r3, [pc, #428]	; (8011fa4 <__ieee754_rem_pio2+0x324>)
 8011df6:	1e6a      	subs	r2, r5, #1
 8011df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dfc:	4553      	cmp	r3, sl
 8011dfe:	d008      	beq.n	8011e12 <__ieee754_rem_pio2+0x192>
 8011e00:	4632      	mov	r2, r6
 8011e02:	463b      	mov	r3, r7
 8011e04:	4640      	mov	r0, r8
 8011e06:	4649      	mov	r1, r9
 8011e08:	f7ee f9ae 	bl	8000168 <__aeabi_dsub>
 8011e0c:	e9c4 0100 	strd	r0, r1, [r4]
 8011e10:	e012      	b.n	8011e38 <__ieee754_rem_pio2+0x1b8>
 8011e12:	463b      	mov	r3, r7
 8011e14:	4632      	mov	r2, r6
 8011e16:	4640      	mov	r0, r8
 8011e18:	4649      	mov	r1, r9
 8011e1a:	f7ee f9a5 	bl	8000168 <__aeabi_dsub>
 8011e1e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8011e22:	9305      	str	r3, [sp, #20]
 8011e24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011e28:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 8011e2c:	2b10      	cmp	r3, #16
 8011e2e:	dc1f      	bgt.n	8011e70 <__ieee754_rem_pio2+0x1f0>
 8011e30:	4602      	mov	r2, r0
 8011e32:	460b      	mov	r3, r1
 8011e34:	e9c4 2300 	strd	r2, r3, [r4]
 8011e38:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8011e3c:	4640      	mov	r0, r8
 8011e3e:	4653      	mov	r3, sl
 8011e40:	4649      	mov	r1, r9
 8011e42:	f7ee f991 	bl	8000168 <__aeabi_dsub>
 8011e46:	4632      	mov	r2, r6
 8011e48:	463b      	mov	r3, r7
 8011e4a:	f7ee f98d 	bl	8000168 <__aeabi_dsub>
 8011e4e:	460b      	mov	r3, r1
 8011e50:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011e54:	9904      	ldr	r1, [sp, #16]
 8011e56:	4602      	mov	r2, r0
 8011e58:	2900      	cmp	r1, #0
 8011e5a:	f6bf af48 	bge.w	8011cee <__ieee754_rem_pio2+0x6e>
 8011e5e:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8011e62:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8011e66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011e6a:	60e3      	str	r3, [r4, #12]
 8011e6c:	426d      	negs	r5, r5
 8011e6e:	e73e      	b.n	8011cee <__ieee754_rem_pio2+0x6e>
 8011e70:	a33d      	add	r3, pc, #244	; (adr r3, 8011f68 <__ieee754_rem_pio2+0x2e8>)
 8011e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e7a:	f7ee fb2d 	bl	80004d8 <__aeabi_dmul>
 8011e7e:	4606      	mov	r6, r0
 8011e80:	460f      	mov	r7, r1
 8011e82:	4602      	mov	r2, r0
 8011e84:	460b      	mov	r3, r1
 8011e86:	4640      	mov	r0, r8
 8011e88:	4649      	mov	r1, r9
 8011e8a:	f7ee f96d 	bl	8000168 <__aeabi_dsub>
 8011e8e:	4602      	mov	r2, r0
 8011e90:	460b      	mov	r3, r1
 8011e92:	4682      	mov	sl, r0
 8011e94:	468b      	mov	fp, r1
 8011e96:	4640      	mov	r0, r8
 8011e98:	4649      	mov	r1, r9
 8011e9a:	f7ee f965 	bl	8000168 <__aeabi_dsub>
 8011e9e:	4632      	mov	r2, r6
 8011ea0:	463b      	mov	r3, r7
 8011ea2:	f7ee f961 	bl	8000168 <__aeabi_dsub>
 8011ea6:	a332      	add	r3, pc, #200	; (adr r3, 8011f70 <__ieee754_rem_pio2+0x2f0>)
 8011ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eac:	4606      	mov	r6, r0
 8011eae:	460f      	mov	r7, r1
 8011eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011eb4:	f7ee fb10 	bl	80004d8 <__aeabi_dmul>
 8011eb8:	4632      	mov	r2, r6
 8011eba:	463b      	mov	r3, r7
 8011ebc:	f7ee f954 	bl	8000168 <__aeabi_dsub>
 8011ec0:	4602      	mov	r2, r0
 8011ec2:	460b      	mov	r3, r1
 8011ec4:	4606      	mov	r6, r0
 8011ec6:	460f      	mov	r7, r1
 8011ec8:	4650      	mov	r0, sl
 8011eca:	4659      	mov	r1, fp
 8011ecc:	f7ee f94c 	bl	8000168 <__aeabi_dsub>
 8011ed0:	9a05      	ldr	r2, [sp, #20]
 8011ed2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011ed6:	1ad3      	subs	r3, r2, r3
 8011ed8:	2b31      	cmp	r3, #49	; 0x31
 8011eda:	dc06      	bgt.n	8011eea <__ieee754_rem_pio2+0x26a>
 8011edc:	4602      	mov	r2, r0
 8011ede:	460b      	mov	r3, r1
 8011ee0:	46d0      	mov	r8, sl
 8011ee2:	46d9      	mov	r9, fp
 8011ee4:	e9c4 2300 	strd	r2, r3, [r4]
 8011ee8:	e7a6      	b.n	8011e38 <__ieee754_rem_pio2+0x1b8>
 8011eea:	a325      	add	r3, pc, #148	; (adr r3, 8011f80 <__ieee754_rem_pio2+0x300>)
 8011eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ef4:	f7ee faf0 	bl	80004d8 <__aeabi_dmul>
 8011ef8:	4606      	mov	r6, r0
 8011efa:	460f      	mov	r7, r1
 8011efc:	4602      	mov	r2, r0
 8011efe:	460b      	mov	r3, r1
 8011f00:	4650      	mov	r0, sl
 8011f02:	4659      	mov	r1, fp
 8011f04:	f7ee f930 	bl	8000168 <__aeabi_dsub>
 8011f08:	4602      	mov	r2, r0
 8011f0a:	460b      	mov	r3, r1
 8011f0c:	4680      	mov	r8, r0
 8011f0e:	4689      	mov	r9, r1
 8011f10:	4650      	mov	r0, sl
 8011f12:	4659      	mov	r1, fp
 8011f14:	f7ee f928 	bl	8000168 <__aeabi_dsub>
 8011f18:	4632      	mov	r2, r6
 8011f1a:	463b      	mov	r3, r7
 8011f1c:	f7ee f924 	bl	8000168 <__aeabi_dsub>
 8011f20:	a319      	add	r3, pc, #100	; (adr r3, 8011f88 <__ieee754_rem_pio2+0x308>)
 8011f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f26:	4606      	mov	r6, r0
 8011f28:	460f      	mov	r7, r1
 8011f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f2e:	f7ee fad3 	bl	80004d8 <__aeabi_dmul>
 8011f32:	4632      	mov	r2, r6
 8011f34:	463b      	mov	r3, r7
 8011f36:	f7ee f917 	bl	8000168 <__aeabi_dsub>
 8011f3a:	4606      	mov	r6, r0
 8011f3c:	460f      	mov	r7, r1
 8011f3e:	e75f      	b.n	8011e00 <__ieee754_rem_pio2+0x180>
 8011f40:	4a19      	ldr	r2, [pc, #100]	; (8011fa8 <__ieee754_rem_pio2+0x328>)
 8011f42:	4592      	cmp	sl, r2
 8011f44:	dd32      	ble.n	8011fac <__ieee754_rem_pio2+0x32c>
 8011f46:	4602      	mov	r2, r0
 8011f48:	460b      	mov	r3, r1
 8011f4a:	f7ee f90d 	bl	8000168 <__aeabi_dsub>
 8011f4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f52:	e9c4 0100 	strd	r0, r1, [r4]
 8011f56:	e6a3      	b.n	8011ca0 <__ieee754_rem_pio2+0x20>
 8011f58:	54400000 	.word	0x54400000
 8011f5c:	3ff921fb 	.word	0x3ff921fb
 8011f60:	1a626331 	.word	0x1a626331
 8011f64:	3dd0b461 	.word	0x3dd0b461
 8011f68:	1a600000 	.word	0x1a600000
 8011f6c:	3dd0b461 	.word	0x3dd0b461
 8011f70:	2e037073 	.word	0x2e037073
 8011f74:	3ba3198a 	.word	0x3ba3198a
 8011f78:	6dc9c883 	.word	0x6dc9c883
 8011f7c:	3fe45f30 	.word	0x3fe45f30
 8011f80:	2e000000 	.word	0x2e000000
 8011f84:	3ba3198a 	.word	0x3ba3198a
 8011f88:	252049c1 	.word	0x252049c1
 8011f8c:	397b839a 	.word	0x397b839a
 8011f90:	3fe921fb 	.word	0x3fe921fb
 8011f94:	4002d97b 	.word	0x4002d97b
 8011f98:	3ff921fb 	.word	0x3ff921fb
 8011f9c:	413921fb 	.word	0x413921fb
 8011fa0:	3fe00000 	.word	0x3fe00000
 8011fa4:	08016160 	.word	0x08016160
 8011fa8:	7fefffff 	.word	0x7fefffff
 8011fac:	ea4f 552a 	mov.w	r5, sl, asr #20
 8011fb0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011fb4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8011fb8:	460f      	mov	r7, r1
 8011fba:	4606      	mov	r6, r0
 8011fbc:	f7ee fd3c 	bl	8000a38 <__aeabi_d2iz>
 8011fc0:	f7ee fa20 	bl	8000404 <__aeabi_i2d>
 8011fc4:	4602      	mov	r2, r0
 8011fc6:	460b      	mov	r3, r1
 8011fc8:	4630      	mov	r0, r6
 8011fca:	4639      	mov	r1, r7
 8011fcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011fd0:	f7ee f8ca 	bl	8000168 <__aeabi_dsub>
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	4b22      	ldr	r3, [pc, #136]	; (8012060 <__ieee754_rem_pio2+0x3e0>)
 8011fd8:	f7ee fa7e 	bl	80004d8 <__aeabi_dmul>
 8011fdc:	460f      	mov	r7, r1
 8011fde:	4606      	mov	r6, r0
 8011fe0:	f7ee fd2a 	bl	8000a38 <__aeabi_d2iz>
 8011fe4:	f7ee fa0e 	bl	8000404 <__aeabi_i2d>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	460b      	mov	r3, r1
 8011fec:	4630      	mov	r0, r6
 8011fee:	4639      	mov	r1, r7
 8011ff0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011ff4:	f7ee f8b8 	bl	8000168 <__aeabi_dsub>
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	4b19      	ldr	r3, [pc, #100]	; (8012060 <__ieee754_rem_pio2+0x3e0>)
 8011ffc:	f7ee fa6c 	bl	80004d8 <__aeabi_dmul>
 8012000:	f04f 0803 	mov.w	r8, #3
 8012004:	2600      	movs	r6, #0
 8012006:	2700      	movs	r7, #0
 8012008:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801200c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012010:	4632      	mov	r2, r6
 8012012:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012016:	463b      	mov	r3, r7
 8012018:	46c2      	mov	sl, r8
 801201a:	f108 38ff 	add.w	r8, r8, #4294967295
 801201e:	f7ee fcc3 	bl	80009a8 <__aeabi_dcmpeq>
 8012022:	2800      	cmp	r0, #0
 8012024:	d1f4      	bne.n	8012010 <__ieee754_rem_pio2+0x390>
 8012026:	4b0f      	ldr	r3, [pc, #60]	; (8012064 <__ieee754_rem_pio2+0x3e4>)
 8012028:	462a      	mov	r2, r5
 801202a:	9301      	str	r3, [sp, #4]
 801202c:	2302      	movs	r3, #2
 801202e:	4621      	mov	r1, r4
 8012030:	9300      	str	r3, [sp, #0]
 8012032:	a806      	add	r0, sp, #24
 8012034:	4653      	mov	r3, sl
 8012036:	f000 fa55 	bl	80124e4 <__kernel_rem_pio2>
 801203a:	9b04      	ldr	r3, [sp, #16]
 801203c:	4605      	mov	r5, r0
 801203e:	2b00      	cmp	r3, #0
 8012040:	f6bf ae55 	bge.w	8011cee <__ieee754_rem_pio2+0x6e>
 8012044:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012048:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801204c:	e9c4 2300 	strd	r2, r3, [r4]
 8012050:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8012054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012058:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801205c:	e706      	b.n	8011e6c <__ieee754_rem_pio2+0x1ec>
 801205e:	bf00      	nop
 8012060:	41700000 	.word	0x41700000
 8012064:	080161e0 	.word	0x080161e0

08012068 <__ieee754_atan2f>:
 8012068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801206a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801206e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8012072:	4603      	mov	r3, r0
 8012074:	dc05      	bgt.n	8012082 <__ieee754_atan2f+0x1a>
 8012076:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801207a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801207e:	4607      	mov	r7, r0
 8012080:	dd04      	ble.n	801208c <__ieee754_atan2f+0x24>
 8012082:	4618      	mov	r0, r3
 8012084:	f7ee fd76 	bl	8000b74 <__addsf3>
 8012088:	4603      	mov	r3, r0
 801208a:	e011      	b.n	80120b0 <__ieee754_atan2f+0x48>
 801208c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8012090:	d103      	bne.n	801209a <__ieee754_atan2f+0x32>
 8012092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012096:	f000 b86d 	b.w	8012174 <atanf>
 801209a:	178c      	asrs	r4, r1, #30
 801209c:	f004 0402 	and.w	r4, r4, #2
 80120a0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80120a4:	b932      	cbnz	r2, 80120b4 <__ieee754_atan2f+0x4c>
 80120a6:	2c02      	cmp	r4, #2
 80120a8:	d04c      	beq.n	8012144 <__ieee754_atan2f+0xdc>
 80120aa:	2c03      	cmp	r4, #3
 80120ac:	d100      	bne.n	80120b0 <__ieee754_atan2f+0x48>
 80120ae:	4b29      	ldr	r3, [pc, #164]	; (8012154 <__ieee754_atan2f+0xec>)
 80120b0:	4618      	mov	r0, r3
 80120b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120b4:	b91e      	cbnz	r6, 80120be <__ieee754_atan2f+0x56>
 80120b6:	2f00      	cmp	r7, #0
 80120b8:	da4a      	bge.n	8012150 <__ieee754_atan2f+0xe8>
 80120ba:	4b27      	ldr	r3, [pc, #156]	; (8012158 <__ieee754_atan2f+0xf0>)
 80120bc:	e7f8      	b.n	80120b0 <__ieee754_atan2f+0x48>
 80120be:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80120c2:	d10e      	bne.n	80120e2 <__ieee754_atan2f+0x7a>
 80120c4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80120c8:	f104 34ff 	add.w	r4, r4, #4294967295
 80120cc:	d105      	bne.n	80120da <__ieee754_atan2f+0x72>
 80120ce:	2c02      	cmp	r4, #2
 80120d0:	d83a      	bhi.n	8012148 <__ieee754_atan2f+0xe0>
 80120d2:	4b22      	ldr	r3, [pc, #136]	; (801215c <__ieee754_atan2f+0xf4>)
 80120d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80120d8:	e7ea      	b.n	80120b0 <__ieee754_atan2f+0x48>
 80120da:	2c02      	cmp	r4, #2
 80120dc:	d836      	bhi.n	801214c <__ieee754_atan2f+0xe4>
 80120de:	4b20      	ldr	r3, [pc, #128]	; (8012160 <__ieee754_atan2f+0xf8>)
 80120e0:	e7f8      	b.n	80120d4 <__ieee754_atan2f+0x6c>
 80120e2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80120e6:	d0e6      	beq.n	80120b6 <__ieee754_atan2f+0x4e>
 80120e8:	1b92      	subs	r2, r2, r6
 80120ea:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 80120ee:	ea4f 50e2 	mov.w	r0, r2, asr #23
 80120f2:	da17      	bge.n	8012124 <__ieee754_atan2f+0xbc>
 80120f4:	2900      	cmp	r1, #0
 80120f6:	da01      	bge.n	80120fc <__ieee754_atan2f+0x94>
 80120f8:	303c      	adds	r0, #60	; 0x3c
 80120fa:	db15      	blt.n	8012128 <__ieee754_atan2f+0xc0>
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7ee fef5 	bl	8000eec <__aeabi_fdiv>
 8012102:	f000 f943 	bl	801238c <fabsf>
 8012106:	f000 f835 	bl	8012174 <atanf>
 801210a:	4603      	mov	r3, r0
 801210c:	2c01      	cmp	r4, #1
 801210e:	d00d      	beq.n	801212c <__ieee754_atan2f+0xc4>
 8012110:	2c02      	cmp	r4, #2
 8012112:	d00e      	beq.n	8012132 <__ieee754_atan2f+0xca>
 8012114:	2c00      	cmp	r4, #0
 8012116:	d0cb      	beq.n	80120b0 <__ieee754_atan2f+0x48>
 8012118:	4912      	ldr	r1, [pc, #72]	; (8012164 <__ieee754_atan2f+0xfc>)
 801211a:	4618      	mov	r0, r3
 801211c:	f7ee fd2a 	bl	8000b74 <__addsf3>
 8012120:	4911      	ldr	r1, [pc, #68]	; (8012168 <__ieee754_atan2f+0x100>)
 8012122:	e00c      	b.n	801213e <__ieee754_atan2f+0xd6>
 8012124:	4b11      	ldr	r3, [pc, #68]	; (801216c <__ieee754_atan2f+0x104>)
 8012126:	e7f1      	b.n	801210c <__ieee754_atan2f+0xa4>
 8012128:	2300      	movs	r3, #0
 801212a:	e7ef      	b.n	801210c <__ieee754_atan2f+0xa4>
 801212c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012130:	e7be      	b.n	80120b0 <__ieee754_atan2f+0x48>
 8012132:	490c      	ldr	r1, [pc, #48]	; (8012164 <__ieee754_atan2f+0xfc>)
 8012134:	4618      	mov	r0, r3
 8012136:	f7ee fd1d 	bl	8000b74 <__addsf3>
 801213a:	4601      	mov	r1, r0
 801213c:	480a      	ldr	r0, [pc, #40]	; (8012168 <__ieee754_atan2f+0x100>)
 801213e:	f7ee fd17 	bl	8000b70 <__aeabi_fsub>
 8012142:	e7a1      	b.n	8012088 <__ieee754_atan2f+0x20>
 8012144:	4b08      	ldr	r3, [pc, #32]	; (8012168 <__ieee754_atan2f+0x100>)
 8012146:	e7b3      	b.n	80120b0 <__ieee754_atan2f+0x48>
 8012148:	4b09      	ldr	r3, [pc, #36]	; (8012170 <__ieee754_atan2f+0x108>)
 801214a:	e7b1      	b.n	80120b0 <__ieee754_atan2f+0x48>
 801214c:	2300      	movs	r3, #0
 801214e:	e7af      	b.n	80120b0 <__ieee754_atan2f+0x48>
 8012150:	4b06      	ldr	r3, [pc, #24]	; (801216c <__ieee754_atan2f+0x104>)
 8012152:	e7ad      	b.n	80120b0 <__ieee754_atan2f+0x48>
 8012154:	c0490fdb 	.word	0xc0490fdb
 8012158:	bfc90fdb 	.word	0xbfc90fdb
 801215c:	080162e8 	.word	0x080162e8
 8012160:	080162f4 	.word	0x080162f4
 8012164:	33bbbd2e 	.word	0x33bbbd2e
 8012168:	40490fdb 	.word	0x40490fdb
 801216c:	3fc90fdb 	.word	0x3fc90fdb
 8012170:	3f490fdb 	.word	0x3f490fdb

08012174 <atanf>:
 8012174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012178:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 801217c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8012180:	4604      	mov	r4, r0
 8012182:	4680      	mov	r8, r0
 8012184:	db0e      	blt.n	80121a4 <atanf+0x30>
 8012186:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801218a:	dd04      	ble.n	8012196 <atanf+0x22>
 801218c:	4601      	mov	r1, r0
 801218e:	f7ee fcf1 	bl	8000b74 <__addsf3>
 8012192:	4604      	mov	r4, r0
 8012194:	e003      	b.n	801219e <atanf+0x2a>
 8012196:	2800      	cmp	r0, #0
 8012198:	f300 80ce 	bgt.w	8012338 <atanf+0x1c4>
 801219c:	4c67      	ldr	r4, [pc, #412]	; (801233c <atanf+0x1c8>)
 801219e:	4620      	mov	r0, r4
 80121a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121a4:	4b66      	ldr	r3, [pc, #408]	; (8012340 <atanf+0x1cc>)
 80121a6:	429d      	cmp	r5, r3
 80121a8:	dc0e      	bgt.n	80121c8 <atanf+0x54>
 80121aa:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80121ae:	da08      	bge.n	80121c2 <atanf+0x4e>
 80121b0:	4964      	ldr	r1, [pc, #400]	; (8012344 <atanf+0x1d0>)
 80121b2:	f7ee fcdf 	bl	8000b74 <__addsf3>
 80121b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80121ba:	f7ee ff9f 	bl	80010fc <__aeabi_fcmpgt>
 80121be:	2800      	cmp	r0, #0
 80121c0:	d1ed      	bne.n	801219e <atanf+0x2a>
 80121c2:	f04f 36ff 	mov.w	r6, #4294967295
 80121c6:	e01c      	b.n	8012202 <atanf+0x8e>
 80121c8:	f000 f8e0 	bl	801238c <fabsf>
 80121cc:	4b5e      	ldr	r3, [pc, #376]	; (8012348 <atanf+0x1d4>)
 80121ce:	4604      	mov	r4, r0
 80121d0:	429d      	cmp	r5, r3
 80121d2:	dc7c      	bgt.n	80122ce <atanf+0x15a>
 80121d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80121d8:	429d      	cmp	r5, r3
 80121da:	dc67      	bgt.n	80122ac <atanf+0x138>
 80121dc:	4601      	mov	r1, r0
 80121de:	f7ee fcc9 	bl	8000b74 <__addsf3>
 80121e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80121e6:	f7ee fcc3 	bl	8000b70 <__aeabi_fsub>
 80121ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80121ee:	4605      	mov	r5, r0
 80121f0:	4620      	mov	r0, r4
 80121f2:	f7ee fcbf 	bl	8000b74 <__addsf3>
 80121f6:	4601      	mov	r1, r0
 80121f8:	4628      	mov	r0, r5
 80121fa:	f7ee fe77 	bl	8000eec <__aeabi_fdiv>
 80121fe:	2600      	movs	r6, #0
 8012200:	4604      	mov	r4, r0
 8012202:	4621      	mov	r1, r4
 8012204:	4620      	mov	r0, r4
 8012206:	f7ee fdbd 	bl	8000d84 <__aeabi_fmul>
 801220a:	4601      	mov	r1, r0
 801220c:	4607      	mov	r7, r0
 801220e:	f7ee fdb9 	bl	8000d84 <__aeabi_fmul>
 8012212:	4605      	mov	r5, r0
 8012214:	494d      	ldr	r1, [pc, #308]	; (801234c <atanf+0x1d8>)
 8012216:	f7ee fdb5 	bl	8000d84 <__aeabi_fmul>
 801221a:	494d      	ldr	r1, [pc, #308]	; (8012350 <atanf+0x1dc>)
 801221c:	f7ee fcaa 	bl	8000b74 <__addsf3>
 8012220:	4629      	mov	r1, r5
 8012222:	f7ee fdaf 	bl	8000d84 <__aeabi_fmul>
 8012226:	494b      	ldr	r1, [pc, #300]	; (8012354 <atanf+0x1e0>)
 8012228:	f7ee fca4 	bl	8000b74 <__addsf3>
 801222c:	4629      	mov	r1, r5
 801222e:	f7ee fda9 	bl	8000d84 <__aeabi_fmul>
 8012232:	4949      	ldr	r1, [pc, #292]	; (8012358 <atanf+0x1e4>)
 8012234:	f7ee fc9e 	bl	8000b74 <__addsf3>
 8012238:	4629      	mov	r1, r5
 801223a:	f7ee fda3 	bl	8000d84 <__aeabi_fmul>
 801223e:	4947      	ldr	r1, [pc, #284]	; (801235c <atanf+0x1e8>)
 8012240:	f7ee fc98 	bl	8000b74 <__addsf3>
 8012244:	4629      	mov	r1, r5
 8012246:	f7ee fd9d 	bl	8000d84 <__aeabi_fmul>
 801224a:	4945      	ldr	r1, [pc, #276]	; (8012360 <atanf+0x1ec>)
 801224c:	f7ee fc92 	bl	8000b74 <__addsf3>
 8012250:	4639      	mov	r1, r7
 8012252:	f7ee fd97 	bl	8000d84 <__aeabi_fmul>
 8012256:	4943      	ldr	r1, [pc, #268]	; (8012364 <atanf+0x1f0>)
 8012258:	4607      	mov	r7, r0
 801225a:	4628      	mov	r0, r5
 801225c:	f7ee fd92 	bl	8000d84 <__aeabi_fmul>
 8012260:	4941      	ldr	r1, [pc, #260]	; (8012368 <atanf+0x1f4>)
 8012262:	f7ee fc85 	bl	8000b70 <__aeabi_fsub>
 8012266:	4629      	mov	r1, r5
 8012268:	f7ee fd8c 	bl	8000d84 <__aeabi_fmul>
 801226c:	493f      	ldr	r1, [pc, #252]	; (801236c <atanf+0x1f8>)
 801226e:	f7ee fc7f 	bl	8000b70 <__aeabi_fsub>
 8012272:	4629      	mov	r1, r5
 8012274:	f7ee fd86 	bl	8000d84 <__aeabi_fmul>
 8012278:	493d      	ldr	r1, [pc, #244]	; (8012370 <atanf+0x1fc>)
 801227a:	f7ee fc79 	bl	8000b70 <__aeabi_fsub>
 801227e:	4629      	mov	r1, r5
 8012280:	f7ee fd80 	bl	8000d84 <__aeabi_fmul>
 8012284:	493b      	ldr	r1, [pc, #236]	; (8012374 <atanf+0x200>)
 8012286:	f7ee fc73 	bl	8000b70 <__aeabi_fsub>
 801228a:	4629      	mov	r1, r5
 801228c:	f7ee fd7a 	bl	8000d84 <__aeabi_fmul>
 8012290:	4601      	mov	r1, r0
 8012292:	4638      	mov	r0, r7
 8012294:	f7ee fc6e 	bl	8000b74 <__addsf3>
 8012298:	4621      	mov	r1, r4
 801229a:	f7ee fd73 	bl	8000d84 <__aeabi_fmul>
 801229e:	1c73      	adds	r3, r6, #1
 80122a0:	4601      	mov	r1, r0
 80122a2:	d133      	bne.n	801230c <atanf+0x198>
 80122a4:	4620      	mov	r0, r4
 80122a6:	f7ee fc63 	bl	8000b70 <__aeabi_fsub>
 80122aa:	e772      	b.n	8012192 <atanf+0x1e>
 80122ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80122b0:	f7ee fc5e 	bl	8000b70 <__aeabi_fsub>
 80122b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80122b8:	4605      	mov	r5, r0
 80122ba:	4620      	mov	r0, r4
 80122bc:	f7ee fc5a 	bl	8000b74 <__addsf3>
 80122c0:	4601      	mov	r1, r0
 80122c2:	4628      	mov	r0, r5
 80122c4:	f7ee fe12 	bl	8000eec <__aeabi_fdiv>
 80122c8:	2601      	movs	r6, #1
 80122ca:	4604      	mov	r4, r0
 80122cc:	e799      	b.n	8012202 <atanf+0x8e>
 80122ce:	4b2a      	ldr	r3, [pc, #168]	; (8012378 <atanf+0x204>)
 80122d0:	429d      	cmp	r5, r3
 80122d2:	dc14      	bgt.n	80122fe <atanf+0x18a>
 80122d4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80122d8:	f7ee fc4a 	bl	8000b70 <__aeabi_fsub>
 80122dc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80122e0:	4605      	mov	r5, r0
 80122e2:	4620      	mov	r0, r4
 80122e4:	f7ee fd4e 	bl	8000d84 <__aeabi_fmul>
 80122e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80122ec:	f7ee fc42 	bl	8000b74 <__addsf3>
 80122f0:	4601      	mov	r1, r0
 80122f2:	4628      	mov	r0, r5
 80122f4:	f7ee fdfa 	bl	8000eec <__aeabi_fdiv>
 80122f8:	2602      	movs	r6, #2
 80122fa:	4604      	mov	r4, r0
 80122fc:	e781      	b.n	8012202 <atanf+0x8e>
 80122fe:	4601      	mov	r1, r0
 8012300:	481e      	ldr	r0, [pc, #120]	; (801237c <atanf+0x208>)
 8012302:	f7ee fdf3 	bl	8000eec <__aeabi_fdiv>
 8012306:	2603      	movs	r6, #3
 8012308:	4604      	mov	r4, r0
 801230a:	e77a      	b.n	8012202 <atanf+0x8e>
 801230c:	4b1c      	ldr	r3, [pc, #112]	; (8012380 <atanf+0x20c>)
 801230e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8012312:	f7ee fc2d 	bl	8000b70 <__aeabi_fsub>
 8012316:	4621      	mov	r1, r4
 8012318:	f7ee fc2a 	bl	8000b70 <__aeabi_fsub>
 801231c:	4b19      	ldr	r3, [pc, #100]	; (8012384 <atanf+0x210>)
 801231e:	4601      	mov	r1, r0
 8012320:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012324:	f7ee fc24 	bl	8000b70 <__aeabi_fsub>
 8012328:	f1b8 0f00 	cmp.w	r8, #0
 801232c:	4604      	mov	r4, r0
 801232e:	f6bf af36 	bge.w	801219e <atanf+0x2a>
 8012332:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8012336:	e732      	b.n	801219e <atanf+0x2a>
 8012338:	4c13      	ldr	r4, [pc, #76]	; (8012388 <atanf+0x214>)
 801233a:	e730      	b.n	801219e <atanf+0x2a>
 801233c:	bfc90fdb 	.word	0xbfc90fdb
 8012340:	3edfffff 	.word	0x3edfffff
 8012344:	7149f2ca 	.word	0x7149f2ca
 8012348:	3f97ffff 	.word	0x3f97ffff
 801234c:	3c8569d7 	.word	0x3c8569d7
 8012350:	3d4bda59 	.word	0x3d4bda59
 8012354:	3d886b35 	.word	0x3d886b35
 8012358:	3dba2e6e 	.word	0x3dba2e6e
 801235c:	3e124925 	.word	0x3e124925
 8012360:	3eaaaaab 	.word	0x3eaaaaab
 8012364:	bd15a221 	.word	0xbd15a221
 8012368:	3d6ef16b 	.word	0x3d6ef16b
 801236c:	3d9d8795 	.word	0x3d9d8795
 8012370:	3de38e38 	.word	0x3de38e38
 8012374:	3e4ccccd 	.word	0x3e4ccccd
 8012378:	401bffff 	.word	0x401bffff
 801237c:	bf800000 	.word	0xbf800000
 8012380:	08016310 	.word	0x08016310
 8012384:	08016300 	.word	0x08016300
 8012388:	3fc90fdb 	.word	0x3fc90fdb

0801238c <fabsf>:
 801238c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012390:	4770      	bx	lr
 8012392:	0000      	movs	r0, r0
 8012394:	0000      	movs	r0, r0
	...

08012398 <scalbn>:
 8012398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801239a:	4616      	mov	r6, r2
 801239c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80123a0:	4604      	mov	r4, r0
 80123a2:	460d      	mov	r5, r1
 80123a4:	460b      	mov	r3, r1
 80123a6:	b992      	cbnz	r2, 80123ce <scalbn+0x36>
 80123a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80123ac:	4303      	orrs	r3, r0
 80123ae:	d03c      	beq.n	801242a <scalbn+0x92>
 80123b0:	4b31      	ldr	r3, [pc, #196]	; (8012478 <scalbn+0xe0>)
 80123b2:	2200      	movs	r2, #0
 80123b4:	f7ee f890 	bl	80004d8 <__aeabi_dmul>
 80123b8:	4b30      	ldr	r3, [pc, #192]	; (801247c <scalbn+0xe4>)
 80123ba:	4604      	mov	r4, r0
 80123bc:	429e      	cmp	r6, r3
 80123be:	460d      	mov	r5, r1
 80123c0:	da0f      	bge.n	80123e2 <scalbn+0x4a>
 80123c2:	a329      	add	r3, pc, #164	; (adr r3, 8012468 <scalbn+0xd0>)
 80123c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c8:	f7ee f886 	bl	80004d8 <__aeabi_dmul>
 80123cc:	e006      	b.n	80123dc <scalbn+0x44>
 80123ce:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80123d2:	42ba      	cmp	r2, r7
 80123d4:	d109      	bne.n	80123ea <scalbn+0x52>
 80123d6:	4602      	mov	r2, r0
 80123d8:	f7ed fec8 	bl	800016c <__adddf3>
 80123dc:	4604      	mov	r4, r0
 80123de:	460d      	mov	r5, r1
 80123e0:	e023      	b.n	801242a <scalbn+0x92>
 80123e2:	460b      	mov	r3, r1
 80123e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80123e8:	3a36      	subs	r2, #54	; 0x36
 80123ea:	f24c 3150 	movw	r1, #50000	; 0xc350
 80123ee:	428e      	cmp	r6, r1
 80123f0:	dd0e      	ble.n	8012410 <scalbn+0x78>
 80123f2:	a31f      	add	r3, pc, #124	; (adr r3, 8012470 <scalbn+0xd8>)
 80123f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80123fc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8012400:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8012404:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8012408:	481d      	ldr	r0, [pc, #116]	; (8012480 <scalbn+0xe8>)
 801240a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 801240e:	e7db      	b.n	80123c8 <scalbn+0x30>
 8012410:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012414:	4432      	add	r2, r6
 8012416:	428a      	cmp	r2, r1
 8012418:	dceb      	bgt.n	80123f2 <scalbn+0x5a>
 801241a:	2a00      	cmp	r2, #0
 801241c:	dd08      	ble.n	8012430 <scalbn+0x98>
 801241e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012422:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012426:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801242a:	4620      	mov	r0, r4
 801242c:	4629      	mov	r1, r5
 801242e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012430:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012434:	da0c      	bge.n	8012450 <scalbn+0xb8>
 8012436:	a30c      	add	r3, pc, #48	; (adr r3, 8012468 <scalbn+0xd0>)
 8012438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801243c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8012440:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8012444:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8012448:	480e      	ldr	r0, [pc, #56]	; (8012484 <scalbn+0xec>)
 801244a:	f041 011f 	orr.w	r1, r1, #31
 801244e:	e7bb      	b.n	80123c8 <scalbn+0x30>
 8012450:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012454:	3236      	adds	r2, #54	; 0x36
 8012456:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801245a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801245e:	4620      	mov	r0, r4
 8012460:	4629      	mov	r1, r5
 8012462:	2200      	movs	r2, #0
 8012464:	4b08      	ldr	r3, [pc, #32]	; (8012488 <scalbn+0xf0>)
 8012466:	e7af      	b.n	80123c8 <scalbn+0x30>
 8012468:	c2f8f359 	.word	0xc2f8f359
 801246c:	01a56e1f 	.word	0x01a56e1f
 8012470:	8800759c 	.word	0x8800759c
 8012474:	7e37e43c 	.word	0x7e37e43c
 8012478:	43500000 	.word	0x43500000
 801247c:	ffff3cb0 	.word	0xffff3cb0
 8012480:	8800759c 	.word	0x8800759c
 8012484:	c2f8f359 	.word	0xc2f8f359
 8012488:	3c900000 	.word	0x3c900000

0801248c <with_errno>:
 801248c:	b570      	push	{r4, r5, r6, lr}
 801248e:	4604      	mov	r4, r0
 8012490:	460d      	mov	r5, r1
 8012492:	4616      	mov	r6, r2
 8012494:	f001 fb96 	bl	8013bc4 <__errno>
 8012498:	4629      	mov	r1, r5
 801249a:	6006      	str	r6, [r0, #0]
 801249c:	4620      	mov	r0, r4
 801249e:	bd70      	pop	{r4, r5, r6, pc}

080124a0 <xflow>:
 80124a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124a2:	4615      	mov	r5, r2
 80124a4:	461c      	mov	r4, r3
 80124a6:	b180      	cbz	r0, 80124ca <xflow+0x2a>
 80124a8:	4610      	mov	r0, r2
 80124aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80124ae:	e9cd 0100 	strd	r0, r1, [sp]
 80124b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124b6:	4628      	mov	r0, r5
 80124b8:	4621      	mov	r1, r4
 80124ba:	f7ee f80d 	bl	80004d8 <__aeabi_dmul>
 80124be:	2222      	movs	r2, #34	; 0x22
 80124c0:	b003      	add	sp, #12
 80124c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80124c6:	f7ff bfe1 	b.w	801248c <with_errno>
 80124ca:	4610      	mov	r0, r2
 80124cc:	4619      	mov	r1, r3
 80124ce:	e7ee      	b.n	80124ae <xflow+0xe>

080124d0 <__math_uflow>:
 80124d0:	2200      	movs	r2, #0
 80124d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80124d6:	f7ff bfe3 	b.w	80124a0 <xflow>

080124da <__math_oflow>:
 80124da:	2200      	movs	r2, #0
 80124dc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80124e0:	f7ff bfde 	b.w	80124a0 <xflow>

080124e4 <__kernel_rem_pio2>:
 80124e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80124ec:	9308      	str	r3, [sp, #32]
 80124ee:	9106      	str	r1, [sp, #24]
 80124f0:	4bb6      	ldr	r3, [pc, #728]	; (80127cc <__kernel_rem_pio2+0x2e8>)
 80124f2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80124f4:	f112 0f14 	cmn.w	r2, #20
 80124f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80124fc:	bfa8      	it	ge
 80124fe:	1ed4      	subge	r4, r2, #3
 8012500:	9302      	str	r3, [sp, #8]
 8012502:	9b08      	ldr	r3, [sp, #32]
 8012504:	bfb8      	it	lt
 8012506:	2400      	movlt	r4, #0
 8012508:	f103 33ff 	add.w	r3, r3, #4294967295
 801250c:	9307      	str	r3, [sp, #28]
 801250e:	bfa4      	itt	ge
 8012510:	2318      	movge	r3, #24
 8012512:	fb94 f4f3 	sdivge	r4, r4, r3
 8012516:	f06f 0317 	mvn.w	r3, #23
 801251a:	fb04 3303 	mla	r3, r4, r3, r3
 801251e:	eb03 0b02 	add.w	fp, r3, r2
 8012522:	9a07      	ldr	r2, [sp, #28]
 8012524:	9b02      	ldr	r3, [sp, #8]
 8012526:	1aa7      	subs	r7, r4, r2
 8012528:	eb03 0802 	add.w	r8, r3, r2
 801252c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801252e:	2500      	movs	r5, #0
 8012530:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012534:	2200      	movs	r2, #0
 8012536:	2300      	movs	r3, #0
 8012538:	9009      	str	r0, [sp, #36]	; 0x24
 801253a:	ae20      	add	r6, sp, #128	; 0x80
 801253c:	4545      	cmp	r5, r8
 801253e:	dd14      	ble.n	801256a <__kernel_rem_pio2+0x86>
 8012540:	f04f 0800 	mov.w	r8, #0
 8012544:	9a08      	ldr	r2, [sp, #32]
 8012546:	ab20      	add	r3, sp, #128	; 0x80
 8012548:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 801254c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8012550:	9b02      	ldr	r3, [sp, #8]
 8012552:	4598      	cmp	r8, r3
 8012554:	dc35      	bgt.n	80125c2 <__kernel_rem_pio2+0xde>
 8012556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012558:	2200      	movs	r2, #0
 801255a:	f1a3 0908 	sub.w	r9, r3, #8
 801255e:	2300      	movs	r3, #0
 8012560:	462f      	mov	r7, r5
 8012562:	2600      	movs	r6, #0
 8012564:	e9cd 2300 	strd	r2, r3, [sp]
 8012568:	e01f      	b.n	80125aa <__kernel_rem_pio2+0xc6>
 801256a:	42ef      	cmn	r7, r5
 801256c:	d40b      	bmi.n	8012586 <__kernel_rem_pio2+0xa2>
 801256e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012572:	e9cd 2300 	strd	r2, r3, [sp]
 8012576:	f7ed ff45 	bl	8000404 <__aeabi_i2d>
 801257a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801257e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012582:	3501      	adds	r5, #1
 8012584:	e7da      	b.n	801253c <__kernel_rem_pio2+0x58>
 8012586:	4610      	mov	r0, r2
 8012588:	4619      	mov	r1, r3
 801258a:	e7f8      	b.n	801257e <__kernel_rem_pio2+0x9a>
 801258c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012590:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8012594:	f7ed ffa0 	bl	80004d8 <__aeabi_dmul>
 8012598:	4602      	mov	r2, r0
 801259a:	460b      	mov	r3, r1
 801259c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125a0:	f7ed fde4 	bl	800016c <__adddf3>
 80125a4:	e9cd 0100 	strd	r0, r1, [sp]
 80125a8:	3601      	adds	r6, #1
 80125aa:	9b07      	ldr	r3, [sp, #28]
 80125ac:	3f08      	subs	r7, #8
 80125ae:	429e      	cmp	r6, r3
 80125b0:	ddec      	ble.n	801258c <__kernel_rem_pio2+0xa8>
 80125b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125b6:	f108 0801 	add.w	r8, r8, #1
 80125ba:	e8ea 2302 	strd	r2, r3, [sl], #8
 80125be:	3508      	adds	r5, #8
 80125c0:	e7c6      	b.n	8012550 <__kernel_rem_pio2+0x6c>
 80125c2:	9b02      	ldr	r3, [sp, #8]
 80125c4:	aa0c      	add	r2, sp, #48	; 0x30
 80125c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80125ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80125cc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80125ce:	9e02      	ldr	r6, [sp, #8]
 80125d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80125d4:	930a      	str	r3, [sp, #40]	; 0x28
 80125d6:	ab98      	add	r3, sp, #608	; 0x260
 80125d8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80125dc:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80125e0:	ab70      	add	r3, sp, #448	; 0x1c0
 80125e2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80125e6:	46d0      	mov	r8, sl
 80125e8:	46b1      	mov	r9, r6
 80125ea:	af0c      	add	r7, sp, #48	; 0x30
 80125ec:	9700      	str	r7, [sp, #0]
 80125ee:	f1b9 0f00 	cmp.w	r9, #0
 80125f2:	f1a8 0808 	sub.w	r8, r8, #8
 80125f6:	dc70      	bgt.n	80126da <__kernel_rem_pio2+0x1f6>
 80125f8:	465a      	mov	r2, fp
 80125fa:	4620      	mov	r0, r4
 80125fc:	4629      	mov	r1, r5
 80125fe:	f7ff fecb 	bl	8012398 <scalbn>
 8012602:	2200      	movs	r2, #0
 8012604:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012608:	4604      	mov	r4, r0
 801260a:	460d      	mov	r5, r1
 801260c:	f7ed ff64 	bl	80004d8 <__aeabi_dmul>
 8012610:	f000 faaa 	bl	8012b68 <floor>
 8012614:	2200      	movs	r2, #0
 8012616:	4b6e      	ldr	r3, [pc, #440]	; (80127d0 <__kernel_rem_pio2+0x2ec>)
 8012618:	f7ed ff5e 	bl	80004d8 <__aeabi_dmul>
 801261c:	4602      	mov	r2, r0
 801261e:	460b      	mov	r3, r1
 8012620:	4620      	mov	r0, r4
 8012622:	4629      	mov	r1, r5
 8012624:	f7ed fda0 	bl	8000168 <__aeabi_dsub>
 8012628:	460d      	mov	r5, r1
 801262a:	4604      	mov	r4, r0
 801262c:	f7ee fa04 	bl	8000a38 <__aeabi_d2iz>
 8012630:	9004      	str	r0, [sp, #16]
 8012632:	f7ed fee7 	bl	8000404 <__aeabi_i2d>
 8012636:	4602      	mov	r2, r0
 8012638:	460b      	mov	r3, r1
 801263a:	4620      	mov	r0, r4
 801263c:	4629      	mov	r1, r5
 801263e:	f7ed fd93 	bl	8000168 <__aeabi_dsub>
 8012642:	f1bb 0f00 	cmp.w	fp, #0
 8012646:	4680      	mov	r8, r0
 8012648:	4689      	mov	r9, r1
 801264a:	dd6f      	ble.n	801272c <__kernel_rem_pio2+0x248>
 801264c:	1e71      	subs	r1, r6, #1
 801264e:	ab0c      	add	r3, sp, #48	; 0x30
 8012650:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012654:	9c04      	ldr	r4, [sp, #16]
 8012656:	f1cb 0018 	rsb	r0, fp, #24
 801265a:	fa43 f200 	asr.w	r2, r3, r0
 801265e:	4414      	add	r4, r2
 8012660:	4082      	lsls	r2, r0
 8012662:	1a9b      	subs	r3, r3, r2
 8012664:	aa0c      	add	r2, sp, #48	; 0x30
 8012666:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801266a:	f1cb 0217 	rsb	r2, fp, #23
 801266e:	9404      	str	r4, [sp, #16]
 8012670:	4113      	asrs	r3, r2
 8012672:	9300      	str	r3, [sp, #0]
 8012674:	9b00      	ldr	r3, [sp, #0]
 8012676:	2b00      	cmp	r3, #0
 8012678:	dd66      	ble.n	8012748 <__kernel_rem_pio2+0x264>
 801267a:	2200      	movs	r2, #0
 801267c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012680:	4614      	mov	r4, r2
 8012682:	9b04      	ldr	r3, [sp, #16]
 8012684:	3301      	adds	r3, #1
 8012686:	9304      	str	r3, [sp, #16]
 8012688:	4296      	cmp	r6, r2
 801268a:	f300 80ad 	bgt.w	80127e8 <__kernel_rem_pio2+0x304>
 801268e:	f1bb 0f00 	cmp.w	fp, #0
 8012692:	dd07      	ble.n	80126a4 <__kernel_rem_pio2+0x1c0>
 8012694:	f1bb 0f01 	cmp.w	fp, #1
 8012698:	f000 80b5 	beq.w	8012806 <__kernel_rem_pio2+0x322>
 801269c:	f1bb 0f02 	cmp.w	fp, #2
 80126a0:	f000 80bb 	beq.w	801281a <__kernel_rem_pio2+0x336>
 80126a4:	9b00      	ldr	r3, [sp, #0]
 80126a6:	2b02      	cmp	r3, #2
 80126a8:	d14e      	bne.n	8012748 <__kernel_rem_pio2+0x264>
 80126aa:	4642      	mov	r2, r8
 80126ac:	464b      	mov	r3, r9
 80126ae:	2000      	movs	r0, #0
 80126b0:	4948      	ldr	r1, [pc, #288]	; (80127d4 <__kernel_rem_pio2+0x2f0>)
 80126b2:	f7ed fd59 	bl	8000168 <__aeabi_dsub>
 80126b6:	4680      	mov	r8, r0
 80126b8:	4689      	mov	r9, r1
 80126ba:	2c00      	cmp	r4, #0
 80126bc:	d044      	beq.n	8012748 <__kernel_rem_pio2+0x264>
 80126be:	465a      	mov	r2, fp
 80126c0:	2000      	movs	r0, #0
 80126c2:	4944      	ldr	r1, [pc, #272]	; (80127d4 <__kernel_rem_pio2+0x2f0>)
 80126c4:	f7ff fe68 	bl	8012398 <scalbn>
 80126c8:	4602      	mov	r2, r0
 80126ca:	460b      	mov	r3, r1
 80126cc:	4640      	mov	r0, r8
 80126ce:	4649      	mov	r1, r9
 80126d0:	f7ed fd4a 	bl	8000168 <__aeabi_dsub>
 80126d4:	4680      	mov	r8, r0
 80126d6:	4689      	mov	r9, r1
 80126d8:	e036      	b.n	8012748 <__kernel_rem_pio2+0x264>
 80126da:	2200      	movs	r2, #0
 80126dc:	4b3e      	ldr	r3, [pc, #248]	; (80127d8 <__kernel_rem_pio2+0x2f4>)
 80126de:	4620      	mov	r0, r4
 80126e0:	4629      	mov	r1, r5
 80126e2:	f7ed fef9 	bl	80004d8 <__aeabi_dmul>
 80126e6:	f7ee f9a7 	bl	8000a38 <__aeabi_d2iz>
 80126ea:	f7ed fe8b 	bl	8000404 <__aeabi_i2d>
 80126ee:	4602      	mov	r2, r0
 80126f0:	460b      	mov	r3, r1
 80126f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80126f6:	2200      	movs	r2, #0
 80126f8:	4b38      	ldr	r3, [pc, #224]	; (80127dc <__kernel_rem_pio2+0x2f8>)
 80126fa:	f7ed feed 	bl	80004d8 <__aeabi_dmul>
 80126fe:	4602      	mov	r2, r0
 8012700:	460b      	mov	r3, r1
 8012702:	4620      	mov	r0, r4
 8012704:	4629      	mov	r1, r5
 8012706:	f7ed fd2f 	bl	8000168 <__aeabi_dsub>
 801270a:	f7ee f995 	bl	8000a38 <__aeabi_d2iz>
 801270e:	9b00      	ldr	r3, [sp, #0]
 8012710:	f109 39ff 	add.w	r9, r9, #4294967295
 8012714:	f843 0b04 	str.w	r0, [r3], #4
 8012718:	9300      	str	r3, [sp, #0]
 801271a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801271e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012722:	f7ed fd23 	bl	800016c <__adddf3>
 8012726:	4604      	mov	r4, r0
 8012728:	460d      	mov	r5, r1
 801272a:	e760      	b.n	80125ee <__kernel_rem_pio2+0x10a>
 801272c:	d105      	bne.n	801273a <__kernel_rem_pio2+0x256>
 801272e:	1e73      	subs	r3, r6, #1
 8012730:	aa0c      	add	r2, sp, #48	; 0x30
 8012732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012736:	15db      	asrs	r3, r3, #23
 8012738:	e79b      	b.n	8012672 <__kernel_rem_pio2+0x18e>
 801273a:	2200      	movs	r2, #0
 801273c:	4b28      	ldr	r3, [pc, #160]	; (80127e0 <__kernel_rem_pio2+0x2fc>)
 801273e:	f7ee f951 	bl	80009e4 <__aeabi_dcmpge>
 8012742:	2800      	cmp	r0, #0
 8012744:	d13e      	bne.n	80127c4 <__kernel_rem_pio2+0x2e0>
 8012746:	9000      	str	r0, [sp, #0]
 8012748:	2200      	movs	r2, #0
 801274a:	2300      	movs	r3, #0
 801274c:	4640      	mov	r0, r8
 801274e:	4649      	mov	r1, r9
 8012750:	f7ee f92a 	bl	80009a8 <__aeabi_dcmpeq>
 8012754:	2800      	cmp	r0, #0
 8012756:	f000 80b2 	beq.w	80128be <__kernel_rem_pio2+0x3da>
 801275a:	1e74      	subs	r4, r6, #1
 801275c:	4623      	mov	r3, r4
 801275e:	2200      	movs	r2, #0
 8012760:	9902      	ldr	r1, [sp, #8]
 8012762:	428b      	cmp	r3, r1
 8012764:	da60      	bge.n	8012828 <__kernel_rem_pio2+0x344>
 8012766:	2a00      	cmp	r2, #0
 8012768:	d075      	beq.n	8012856 <__kernel_rem_pio2+0x372>
 801276a:	ab0c      	add	r3, sp, #48	; 0x30
 801276c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012770:	f1ab 0b18 	sub.w	fp, fp, #24
 8012774:	2b00      	cmp	r3, #0
 8012776:	f000 80a0 	beq.w	80128ba <__kernel_rem_pio2+0x3d6>
 801277a:	465a      	mov	r2, fp
 801277c:	2000      	movs	r0, #0
 801277e:	4915      	ldr	r1, [pc, #84]	; (80127d4 <__kernel_rem_pio2+0x2f0>)
 8012780:	f7ff fe0a 	bl	8012398 <scalbn>
 8012784:	46a2      	mov	sl, r4
 8012786:	4606      	mov	r6, r0
 8012788:	460f      	mov	r7, r1
 801278a:	f04f 0800 	mov.w	r8, #0
 801278e:	ab70      	add	r3, sp, #448	; 0x1c0
 8012790:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80127d8 <__kernel_rem_pio2+0x2f4>
 8012794:	00e5      	lsls	r5, r4, #3
 8012796:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 801279a:	f1ba 0f00 	cmp.w	sl, #0
 801279e:	f280 80c4 	bge.w	801292a <__kernel_rem_pio2+0x446>
 80127a2:	4626      	mov	r6, r4
 80127a4:	2e00      	cmp	r6, #0
 80127a6:	f2c0 80f6 	blt.w	8012996 <__kernel_rem_pio2+0x4b2>
 80127aa:	4b0e      	ldr	r3, [pc, #56]	; (80127e4 <__kernel_rem_pio2+0x300>)
 80127ac:	f04f 0a00 	mov.w	sl, #0
 80127b0:	9307      	str	r3, [sp, #28]
 80127b2:	ab70      	add	r3, sp, #448	; 0x1c0
 80127b4:	f04f 0b00 	mov.w	fp, #0
 80127b8:	f04f 0800 	mov.w	r8, #0
 80127bc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80127c0:	1ba7      	subs	r7, r4, r6
 80127c2:	e0dc      	b.n	801297e <__kernel_rem_pio2+0x49a>
 80127c4:	2302      	movs	r3, #2
 80127c6:	9300      	str	r3, [sp, #0]
 80127c8:	e757      	b.n	801267a <__kernel_rem_pio2+0x196>
 80127ca:	bf00      	nop
 80127cc:	08016360 	.word	0x08016360
 80127d0:	40200000 	.word	0x40200000
 80127d4:	3ff00000 	.word	0x3ff00000
 80127d8:	3e700000 	.word	0x3e700000
 80127dc:	41700000 	.word	0x41700000
 80127e0:	3fe00000 	.word	0x3fe00000
 80127e4:	08016320 	.word	0x08016320
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	b944      	cbnz	r4, 80127fe <__kernel_rem_pio2+0x31a>
 80127ec:	b11b      	cbz	r3, 80127f6 <__kernel_rem_pio2+0x312>
 80127ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80127f2:	603b      	str	r3, [r7, #0]
 80127f4:	2301      	movs	r3, #1
 80127f6:	461c      	mov	r4, r3
 80127f8:	3201      	adds	r2, #1
 80127fa:	3704      	adds	r7, #4
 80127fc:	e744      	b.n	8012688 <__kernel_rem_pio2+0x1a4>
 80127fe:	1acb      	subs	r3, r1, r3
 8012800:	603b      	str	r3, [r7, #0]
 8012802:	4623      	mov	r3, r4
 8012804:	e7f7      	b.n	80127f6 <__kernel_rem_pio2+0x312>
 8012806:	1e72      	subs	r2, r6, #1
 8012808:	ab0c      	add	r3, sp, #48	; 0x30
 801280a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801280e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012812:	a90c      	add	r1, sp, #48	; 0x30
 8012814:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012818:	e744      	b.n	80126a4 <__kernel_rem_pio2+0x1c0>
 801281a:	1e72      	subs	r2, r6, #1
 801281c:	ab0c      	add	r3, sp, #48	; 0x30
 801281e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012822:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012826:	e7f4      	b.n	8012812 <__kernel_rem_pio2+0x32e>
 8012828:	a90c      	add	r1, sp, #48	; 0x30
 801282a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801282e:	3b01      	subs	r3, #1
 8012830:	430a      	orrs	r2, r1
 8012832:	e795      	b.n	8012760 <__kernel_rem_pio2+0x27c>
 8012834:	3301      	adds	r3, #1
 8012836:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801283a:	2900      	cmp	r1, #0
 801283c:	d0fa      	beq.n	8012834 <__kernel_rem_pio2+0x350>
 801283e:	9a08      	ldr	r2, [sp, #32]
 8012840:	a920      	add	r1, sp, #128	; 0x80
 8012842:	18b2      	adds	r2, r6, r2
 8012844:	f106 0801 	add.w	r8, r6, #1
 8012848:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801284c:	18f4      	adds	r4, r6, r3
 801284e:	4544      	cmp	r4, r8
 8012850:	da04      	bge.n	801285c <__kernel_rem_pio2+0x378>
 8012852:	4626      	mov	r6, r4
 8012854:	e6bf      	b.n	80125d6 <__kernel_rem_pio2+0xf2>
 8012856:	2301      	movs	r3, #1
 8012858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801285a:	e7ec      	b.n	8012836 <__kernel_rem_pio2+0x352>
 801285c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801285e:	f04f 0900 	mov.w	r9, #0
 8012862:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012866:	f7ed fdcd 	bl	8000404 <__aeabi_i2d>
 801286a:	2600      	movs	r6, #0
 801286c:	2700      	movs	r7, #0
 801286e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012870:	e9c5 0100 	strd	r0, r1, [r5]
 8012874:	3b08      	subs	r3, #8
 8012876:	9300      	str	r3, [sp, #0]
 8012878:	9504      	str	r5, [sp, #16]
 801287a:	9b07      	ldr	r3, [sp, #28]
 801287c:	4599      	cmp	r9, r3
 801287e:	dd05      	ble.n	801288c <__kernel_rem_pio2+0x3a8>
 8012880:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8012884:	f108 0801 	add.w	r8, r8, #1
 8012888:	3508      	adds	r5, #8
 801288a:	e7e0      	b.n	801284e <__kernel_rem_pio2+0x36a>
 801288c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8012890:	9900      	ldr	r1, [sp, #0]
 8012892:	f109 0901 	add.w	r9, r9, #1
 8012896:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 801289a:	9100      	str	r1, [sp, #0]
 801289c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80128a0:	f8cd c010 	str.w	ip, [sp, #16]
 80128a4:	f7ed fe18 	bl	80004d8 <__aeabi_dmul>
 80128a8:	4602      	mov	r2, r0
 80128aa:	460b      	mov	r3, r1
 80128ac:	4630      	mov	r0, r6
 80128ae:	4639      	mov	r1, r7
 80128b0:	f7ed fc5c 	bl	800016c <__adddf3>
 80128b4:	4606      	mov	r6, r0
 80128b6:	460f      	mov	r7, r1
 80128b8:	e7df      	b.n	801287a <__kernel_rem_pio2+0x396>
 80128ba:	3c01      	subs	r4, #1
 80128bc:	e755      	b.n	801276a <__kernel_rem_pio2+0x286>
 80128be:	f1cb 0200 	rsb	r2, fp, #0
 80128c2:	4640      	mov	r0, r8
 80128c4:	4649      	mov	r1, r9
 80128c6:	f7ff fd67 	bl	8012398 <scalbn>
 80128ca:	2200      	movs	r2, #0
 80128cc:	4ba3      	ldr	r3, [pc, #652]	; (8012b5c <__kernel_rem_pio2+0x678>)
 80128ce:	4604      	mov	r4, r0
 80128d0:	460d      	mov	r5, r1
 80128d2:	f7ee f887 	bl	80009e4 <__aeabi_dcmpge>
 80128d6:	b1f8      	cbz	r0, 8012918 <__kernel_rem_pio2+0x434>
 80128d8:	2200      	movs	r2, #0
 80128da:	4ba1      	ldr	r3, [pc, #644]	; (8012b60 <__kernel_rem_pio2+0x67c>)
 80128dc:	4620      	mov	r0, r4
 80128de:	4629      	mov	r1, r5
 80128e0:	f7ed fdfa 	bl	80004d8 <__aeabi_dmul>
 80128e4:	f7ee f8a8 	bl	8000a38 <__aeabi_d2iz>
 80128e8:	4607      	mov	r7, r0
 80128ea:	f7ed fd8b 	bl	8000404 <__aeabi_i2d>
 80128ee:	2200      	movs	r2, #0
 80128f0:	4b9a      	ldr	r3, [pc, #616]	; (8012b5c <__kernel_rem_pio2+0x678>)
 80128f2:	f7ed fdf1 	bl	80004d8 <__aeabi_dmul>
 80128f6:	460b      	mov	r3, r1
 80128f8:	4602      	mov	r2, r0
 80128fa:	4629      	mov	r1, r5
 80128fc:	4620      	mov	r0, r4
 80128fe:	f7ed fc33 	bl	8000168 <__aeabi_dsub>
 8012902:	f7ee f899 	bl	8000a38 <__aeabi_d2iz>
 8012906:	1c74      	adds	r4, r6, #1
 8012908:	ab0c      	add	r3, sp, #48	; 0x30
 801290a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 801290e:	f10b 0b18 	add.w	fp, fp, #24
 8012912:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8012916:	e730      	b.n	801277a <__kernel_rem_pio2+0x296>
 8012918:	4620      	mov	r0, r4
 801291a:	4629      	mov	r1, r5
 801291c:	f7ee f88c 	bl	8000a38 <__aeabi_d2iz>
 8012920:	ab0c      	add	r3, sp, #48	; 0x30
 8012922:	4634      	mov	r4, r6
 8012924:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8012928:	e727      	b.n	801277a <__kernel_rem_pio2+0x296>
 801292a:	ab0c      	add	r3, sp, #48	; 0x30
 801292c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012930:	f7ed fd68 	bl	8000404 <__aeabi_i2d>
 8012934:	4632      	mov	r2, r6
 8012936:	463b      	mov	r3, r7
 8012938:	f7ed fdce 	bl	80004d8 <__aeabi_dmul>
 801293c:	4642      	mov	r2, r8
 801293e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8012942:	464b      	mov	r3, r9
 8012944:	4630      	mov	r0, r6
 8012946:	4639      	mov	r1, r7
 8012948:	f7ed fdc6 	bl	80004d8 <__aeabi_dmul>
 801294c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012950:	4606      	mov	r6, r0
 8012952:	460f      	mov	r7, r1
 8012954:	e721      	b.n	801279a <__kernel_rem_pio2+0x2b6>
 8012956:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801295a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801295e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8012962:	f8cd c01c 	str.w	ip, [sp, #28]
 8012966:	f7ed fdb7 	bl	80004d8 <__aeabi_dmul>
 801296a:	4602      	mov	r2, r0
 801296c:	460b      	mov	r3, r1
 801296e:	4650      	mov	r0, sl
 8012970:	4659      	mov	r1, fp
 8012972:	f7ed fbfb 	bl	800016c <__adddf3>
 8012976:	4682      	mov	sl, r0
 8012978:	468b      	mov	fp, r1
 801297a:	f108 0801 	add.w	r8, r8, #1
 801297e:	9b02      	ldr	r3, [sp, #8]
 8012980:	4598      	cmp	r8, r3
 8012982:	dc01      	bgt.n	8012988 <__kernel_rem_pio2+0x4a4>
 8012984:	45b8      	cmp	r8, r7
 8012986:	dde6      	ble.n	8012956 <__kernel_rem_pio2+0x472>
 8012988:	ab48      	add	r3, sp, #288	; 0x120
 801298a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801298e:	e9c7 ab00 	strd	sl, fp, [r7]
 8012992:	3e01      	subs	r6, #1
 8012994:	e706      	b.n	80127a4 <__kernel_rem_pio2+0x2c0>
 8012996:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8012998:	2b02      	cmp	r3, #2
 801299a:	dc09      	bgt.n	80129b0 <__kernel_rem_pio2+0x4cc>
 801299c:	2b00      	cmp	r3, #0
 801299e:	dc32      	bgt.n	8012a06 <__kernel_rem_pio2+0x522>
 80129a0:	d058      	beq.n	8012a54 <__kernel_rem_pio2+0x570>
 80129a2:	9b04      	ldr	r3, [sp, #16]
 80129a4:	f003 0007 	and.w	r0, r3, #7
 80129a8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80129ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129b0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80129b2:	2b03      	cmp	r3, #3
 80129b4:	d1f5      	bne.n	80129a2 <__kernel_rem_pio2+0x4be>
 80129b6:	ab48      	add	r3, sp, #288	; 0x120
 80129b8:	441d      	add	r5, r3
 80129ba:	46aa      	mov	sl, r5
 80129bc:	46a3      	mov	fp, r4
 80129be:	f1bb 0f00 	cmp.w	fp, #0
 80129c2:	dc74      	bgt.n	8012aae <__kernel_rem_pio2+0x5ca>
 80129c4:	46aa      	mov	sl, r5
 80129c6:	46a3      	mov	fp, r4
 80129c8:	f1bb 0f01 	cmp.w	fp, #1
 80129cc:	f300 808e 	bgt.w	8012aec <__kernel_rem_pio2+0x608>
 80129d0:	2700      	movs	r7, #0
 80129d2:	463e      	mov	r6, r7
 80129d4:	2c01      	cmp	r4, #1
 80129d6:	f300 80a8 	bgt.w	8012b2a <__kernel_rem_pio2+0x646>
 80129da:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80129de:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80129e2:	9b00      	ldr	r3, [sp, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f040 80aa 	bne.w	8012b3e <__kernel_rem_pio2+0x65a>
 80129ea:	4603      	mov	r3, r0
 80129ec:	462a      	mov	r2, r5
 80129ee:	9806      	ldr	r0, [sp, #24]
 80129f0:	e9c0 2300 	strd	r2, r3, [r0]
 80129f4:	4622      	mov	r2, r4
 80129f6:	460b      	mov	r3, r1
 80129f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80129fc:	463a      	mov	r2, r7
 80129fe:	4633      	mov	r3, r6
 8012a00:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012a04:	e7cd      	b.n	80129a2 <__kernel_rem_pio2+0x4be>
 8012a06:	2000      	movs	r0, #0
 8012a08:	46a0      	mov	r8, r4
 8012a0a:	4601      	mov	r1, r0
 8012a0c:	ab48      	add	r3, sp, #288	; 0x120
 8012a0e:	441d      	add	r5, r3
 8012a10:	f1b8 0f00 	cmp.w	r8, #0
 8012a14:	da38      	bge.n	8012a88 <__kernel_rem_pio2+0x5a4>
 8012a16:	9b00      	ldr	r3, [sp, #0]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d03c      	beq.n	8012a96 <__kernel_rem_pio2+0x5b2>
 8012a1c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8012a20:	4602      	mov	r2, r0
 8012a22:	462b      	mov	r3, r5
 8012a24:	9d06      	ldr	r5, [sp, #24]
 8012a26:	2601      	movs	r6, #1
 8012a28:	e9c5 2300 	strd	r2, r3, [r5]
 8012a2c:	460b      	mov	r3, r1
 8012a2e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012a32:	f7ed fb99 	bl	8000168 <__aeabi_dsub>
 8012a36:	4684      	mov	ip, r0
 8012a38:	460f      	mov	r7, r1
 8012a3a:	ad48      	add	r5, sp, #288	; 0x120
 8012a3c:	42b4      	cmp	r4, r6
 8012a3e:	da2c      	bge.n	8012a9a <__kernel_rem_pio2+0x5b6>
 8012a40:	9b00      	ldr	r3, [sp, #0]
 8012a42:	b10b      	cbz	r3, 8012a48 <__kernel_rem_pio2+0x564>
 8012a44:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8012a48:	4662      	mov	r2, ip
 8012a4a:	463b      	mov	r3, r7
 8012a4c:	9906      	ldr	r1, [sp, #24]
 8012a4e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8012a52:	e7a6      	b.n	80129a2 <__kernel_rem_pio2+0x4be>
 8012a54:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8012a56:	ab48      	add	r3, sp, #288	; 0x120
 8012a58:	4637      	mov	r7, r6
 8012a5a:	441d      	add	r5, r3
 8012a5c:	2c00      	cmp	r4, #0
 8012a5e:	da09      	bge.n	8012a74 <__kernel_rem_pio2+0x590>
 8012a60:	9b00      	ldr	r3, [sp, #0]
 8012a62:	b10b      	cbz	r3, 8012a68 <__kernel_rem_pio2+0x584>
 8012a64:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8012a68:	4632      	mov	r2, r6
 8012a6a:	463b      	mov	r3, r7
 8012a6c:	9906      	ldr	r1, [sp, #24]
 8012a6e:	e9c1 2300 	strd	r2, r3, [r1]
 8012a72:	e796      	b.n	80129a2 <__kernel_rem_pio2+0x4be>
 8012a74:	4630      	mov	r0, r6
 8012a76:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8012a7a:	4639      	mov	r1, r7
 8012a7c:	f7ed fb76 	bl	800016c <__adddf3>
 8012a80:	3c01      	subs	r4, #1
 8012a82:	4606      	mov	r6, r0
 8012a84:	460f      	mov	r7, r1
 8012a86:	e7e9      	b.n	8012a5c <__kernel_rem_pio2+0x578>
 8012a88:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8012a8c:	f7ed fb6e 	bl	800016c <__adddf3>
 8012a90:	f108 38ff 	add.w	r8, r8, #4294967295
 8012a94:	e7bc      	b.n	8012a10 <__kernel_rem_pio2+0x52c>
 8012a96:	460d      	mov	r5, r1
 8012a98:	e7c2      	b.n	8012a20 <__kernel_rem_pio2+0x53c>
 8012a9a:	4660      	mov	r0, ip
 8012a9c:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8012aa0:	4639      	mov	r1, r7
 8012aa2:	f7ed fb63 	bl	800016c <__adddf3>
 8012aa6:	3601      	adds	r6, #1
 8012aa8:	4684      	mov	ip, r0
 8012aaa:	460f      	mov	r7, r1
 8012aac:	e7c6      	b.n	8012a3c <__kernel_rem_pio2+0x558>
 8012aae:	e9da 6700 	ldrd	r6, r7, [sl]
 8012ab2:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8012ab6:	4632      	mov	r2, r6
 8012ab8:	463b      	mov	r3, r7
 8012aba:	4640      	mov	r0, r8
 8012abc:	4649      	mov	r1, r9
 8012abe:	f7ed fb55 	bl	800016c <__adddf3>
 8012ac2:	4602      	mov	r2, r0
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012aca:	4640      	mov	r0, r8
 8012acc:	4649      	mov	r1, r9
 8012ace:	f7ed fb4b 	bl	8000168 <__aeabi_dsub>
 8012ad2:	4632      	mov	r2, r6
 8012ad4:	463b      	mov	r3, r7
 8012ad6:	f7ed fb49 	bl	800016c <__adddf3>
 8012ada:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ade:	e86a 0102 	strd	r0, r1, [sl], #-8
 8012ae2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012ae6:	e9ca 2300 	strd	r2, r3, [sl]
 8012aea:	e768      	b.n	80129be <__kernel_rem_pio2+0x4da>
 8012aec:	e9da 8900 	ldrd	r8, r9, [sl]
 8012af0:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8012af4:	4642      	mov	r2, r8
 8012af6:	464b      	mov	r3, r9
 8012af8:	4630      	mov	r0, r6
 8012afa:	4639      	mov	r1, r7
 8012afc:	f7ed fb36 	bl	800016c <__adddf3>
 8012b00:	4602      	mov	r2, r0
 8012b02:	460b      	mov	r3, r1
 8012b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b08:	4630      	mov	r0, r6
 8012b0a:	4639      	mov	r1, r7
 8012b0c:	f7ed fb2c 	bl	8000168 <__aeabi_dsub>
 8012b10:	4642      	mov	r2, r8
 8012b12:	464b      	mov	r3, r9
 8012b14:	f7ed fb2a 	bl	800016c <__adddf3>
 8012b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b1c:	e86a 0102 	strd	r0, r1, [sl], #-8
 8012b20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b24:	e9ca 2300 	strd	r2, r3, [sl]
 8012b28:	e74e      	b.n	80129c8 <__kernel_rem_pio2+0x4e4>
 8012b2a:	4638      	mov	r0, r7
 8012b2c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8012b30:	4631      	mov	r1, r6
 8012b32:	f7ed fb1b 	bl	800016c <__adddf3>
 8012b36:	3c01      	subs	r4, #1
 8012b38:	4607      	mov	r7, r0
 8012b3a:	460e      	mov	r6, r1
 8012b3c:	e74a      	b.n	80129d4 <__kernel_rem_pio2+0x4f0>
 8012b3e:	9b06      	ldr	r3, [sp, #24]
 8012b40:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012b44:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8012b48:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8012b4c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8012b50:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8012b54:	601d      	str	r5, [r3, #0]
 8012b56:	615e      	str	r6, [r3, #20]
 8012b58:	e723      	b.n	80129a2 <__kernel_rem_pio2+0x4be>
 8012b5a:	bf00      	nop
 8012b5c:	41700000 	.word	0x41700000
 8012b60:	3e700000 	.word	0x3e700000
 8012b64:	00000000 	.word	0x00000000

08012b68 <floor>:
 8012b68:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b70:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012b74:	2e13      	cmp	r6, #19
 8012b76:	460b      	mov	r3, r1
 8012b78:	4607      	mov	r7, r0
 8012b7a:	460c      	mov	r4, r1
 8012b7c:	4605      	mov	r5, r0
 8012b7e:	dc32      	bgt.n	8012be6 <floor+0x7e>
 8012b80:	2e00      	cmp	r6, #0
 8012b82:	da14      	bge.n	8012bae <floor+0x46>
 8012b84:	a334      	add	r3, pc, #208	; (adr r3, 8012c58 <floor+0xf0>)
 8012b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b8a:	f7ed faef 	bl	800016c <__adddf3>
 8012b8e:	2200      	movs	r2, #0
 8012b90:	2300      	movs	r3, #0
 8012b92:	f7ed ff31 	bl	80009f8 <__aeabi_dcmpgt>
 8012b96:	b138      	cbz	r0, 8012ba8 <floor+0x40>
 8012b98:	2c00      	cmp	r4, #0
 8012b9a:	da56      	bge.n	8012c4a <floor+0xe2>
 8012b9c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8012ba0:	4325      	orrs	r5, r4
 8012ba2:	d055      	beq.n	8012c50 <floor+0xe8>
 8012ba4:	2500      	movs	r5, #0
 8012ba6:	4c2e      	ldr	r4, [pc, #184]	; (8012c60 <floor+0xf8>)
 8012ba8:	4623      	mov	r3, r4
 8012baa:	462f      	mov	r7, r5
 8012bac:	e025      	b.n	8012bfa <floor+0x92>
 8012bae:	4a2d      	ldr	r2, [pc, #180]	; (8012c64 <floor+0xfc>)
 8012bb0:	fa42 f806 	asr.w	r8, r2, r6
 8012bb4:	ea01 0208 	and.w	r2, r1, r8
 8012bb8:	4302      	orrs	r2, r0
 8012bba:	d01e      	beq.n	8012bfa <floor+0x92>
 8012bbc:	a326      	add	r3, pc, #152	; (adr r3, 8012c58 <floor+0xf0>)
 8012bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc2:	f7ed fad3 	bl	800016c <__adddf3>
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	2300      	movs	r3, #0
 8012bca:	f7ed ff15 	bl	80009f8 <__aeabi_dcmpgt>
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	d0ea      	beq.n	8012ba8 <floor+0x40>
 8012bd2:	2c00      	cmp	r4, #0
 8012bd4:	bfbe      	ittt	lt
 8012bd6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012bda:	4133      	asrlt	r3, r6
 8012bdc:	18e4      	addlt	r4, r4, r3
 8012bde:	2500      	movs	r5, #0
 8012be0:	ea24 0408 	bic.w	r4, r4, r8
 8012be4:	e7e0      	b.n	8012ba8 <floor+0x40>
 8012be6:	2e33      	cmp	r6, #51	; 0x33
 8012be8:	dd0b      	ble.n	8012c02 <floor+0x9a>
 8012bea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012bee:	d104      	bne.n	8012bfa <floor+0x92>
 8012bf0:	4602      	mov	r2, r0
 8012bf2:	f7ed fabb 	bl	800016c <__adddf3>
 8012bf6:	4607      	mov	r7, r0
 8012bf8:	460b      	mov	r3, r1
 8012bfa:	4638      	mov	r0, r7
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c02:	f04f 38ff 	mov.w	r8, #4294967295
 8012c06:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012c0a:	fa28 f802 	lsr.w	r8, r8, r2
 8012c0e:	ea10 0f08 	tst.w	r0, r8
 8012c12:	d0f2      	beq.n	8012bfa <floor+0x92>
 8012c14:	a310      	add	r3, pc, #64	; (adr r3, 8012c58 <floor+0xf0>)
 8012c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c1a:	f7ed faa7 	bl	800016c <__adddf3>
 8012c1e:	2200      	movs	r2, #0
 8012c20:	2300      	movs	r3, #0
 8012c22:	f7ed fee9 	bl	80009f8 <__aeabi_dcmpgt>
 8012c26:	2800      	cmp	r0, #0
 8012c28:	d0be      	beq.n	8012ba8 <floor+0x40>
 8012c2a:	2c00      	cmp	r4, #0
 8012c2c:	da0a      	bge.n	8012c44 <floor+0xdc>
 8012c2e:	2e14      	cmp	r6, #20
 8012c30:	d101      	bne.n	8012c36 <floor+0xce>
 8012c32:	3401      	adds	r4, #1
 8012c34:	e006      	b.n	8012c44 <floor+0xdc>
 8012c36:	2301      	movs	r3, #1
 8012c38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012c3c:	40b3      	lsls	r3, r6
 8012c3e:	441d      	add	r5, r3
 8012c40:	42af      	cmp	r7, r5
 8012c42:	d8f6      	bhi.n	8012c32 <floor+0xca>
 8012c44:	ea25 0508 	bic.w	r5, r5, r8
 8012c48:	e7ae      	b.n	8012ba8 <floor+0x40>
 8012c4a:	2500      	movs	r5, #0
 8012c4c:	462c      	mov	r4, r5
 8012c4e:	e7ab      	b.n	8012ba8 <floor+0x40>
 8012c50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012c54:	e7a8      	b.n	8012ba8 <floor+0x40>
 8012c56:	bf00      	nop
 8012c58:	8800759c 	.word	0x8800759c
 8012c5c:	7e37e43c 	.word	0x7e37e43c
 8012c60:	bff00000 	.word	0xbff00000
 8012c64:	000fffff 	.word	0x000fffff

08012c68 <calloc>:
 8012c68:	4b02      	ldr	r3, [pc, #8]	; (8012c74 <calloc+0xc>)
 8012c6a:	460a      	mov	r2, r1
 8012c6c:	4601      	mov	r1, r0
 8012c6e:	6818      	ldr	r0, [r3, #0]
 8012c70:	f000 b802 	b.w	8012c78 <_calloc_r>
 8012c74:	20000098 	.word	0x20000098

08012c78 <_calloc_r>:
 8012c78:	b570      	push	{r4, r5, r6, lr}
 8012c7a:	fba1 5402 	umull	r5, r4, r1, r2
 8012c7e:	b934      	cbnz	r4, 8012c8e <_calloc_r+0x16>
 8012c80:	4629      	mov	r1, r5
 8012c82:	f000 f83d 	bl	8012d00 <_malloc_r>
 8012c86:	4606      	mov	r6, r0
 8012c88:	b928      	cbnz	r0, 8012c96 <_calloc_r+0x1e>
 8012c8a:	4630      	mov	r0, r6
 8012c8c:	bd70      	pop	{r4, r5, r6, pc}
 8012c8e:	220c      	movs	r2, #12
 8012c90:	2600      	movs	r6, #0
 8012c92:	6002      	str	r2, [r0, #0]
 8012c94:	e7f9      	b.n	8012c8a <_calloc_r+0x12>
 8012c96:	462a      	mov	r2, r5
 8012c98:	4621      	mov	r1, r4
 8012c9a:	f000 ff31 	bl	8013b00 <memset>
 8012c9e:	e7f4      	b.n	8012c8a <_calloc_r+0x12>

08012ca0 <malloc>:
 8012ca0:	4b02      	ldr	r3, [pc, #8]	; (8012cac <malloc+0xc>)
 8012ca2:	4601      	mov	r1, r0
 8012ca4:	6818      	ldr	r0, [r3, #0]
 8012ca6:	f000 b82b 	b.w	8012d00 <_malloc_r>
 8012caa:	bf00      	nop
 8012cac:	20000098 	.word	0x20000098

08012cb0 <free>:
 8012cb0:	4b02      	ldr	r3, [pc, #8]	; (8012cbc <free+0xc>)
 8012cb2:	4601      	mov	r1, r0
 8012cb4:	6818      	ldr	r0, [r3, #0]
 8012cb6:	f001 be3b 	b.w	8014930 <_free_r>
 8012cba:	bf00      	nop
 8012cbc:	20000098 	.word	0x20000098

08012cc0 <sbrk_aligned>:
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	4e0e      	ldr	r6, [pc, #56]	; (8012cfc <sbrk_aligned+0x3c>)
 8012cc4:	460c      	mov	r4, r1
 8012cc6:	6831      	ldr	r1, [r6, #0]
 8012cc8:	4605      	mov	r5, r0
 8012cca:	b911      	cbnz	r1, 8012cd2 <sbrk_aligned+0x12>
 8012ccc:	f000 ff58 	bl	8013b80 <_sbrk_r>
 8012cd0:	6030      	str	r0, [r6, #0]
 8012cd2:	4621      	mov	r1, r4
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	f000 ff53 	bl	8013b80 <_sbrk_r>
 8012cda:	1c43      	adds	r3, r0, #1
 8012cdc:	d00a      	beq.n	8012cf4 <sbrk_aligned+0x34>
 8012cde:	1cc4      	adds	r4, r0, #3
 8012ce0:	f024 0403 	bic.w	r4, r4, #3
 8012ce4:	42a0      	cmp	r0, r4
 8012ce6:	d007      	beq.n	8012cf8 <sbrk_aligned+0x38>
 8012ce8:	1a21      	subs	r1, r4, r0
 8012cea:	4628      	mov	r0, r5
 8012cec:	f000 ff48 	bl	8013b80 <_sbrk_r>
 8012cf0:	3001      	adds	r0, #1
 8012cf2:	d101      	bne.n	8012cf8 <sbrk_aligned+0x38>
 8012cf4:	f04f 34ff 	mov.w	r4, #4294967295
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	bd70      	pop	{r4, r5, r6, pc}
 8012cfc:	200027d8 	.word	0x200027d8

08012d00 <_malloc_r>:
 8012d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d04:	1ccd      	adds	r5, r1, #3
 8012d06:	f025 0503 	bic.w	r5, r5, #3
 8012d0a:	3508      	adds	r5, #8
 8012d0c:	2d0c      	cmp	r5, #12
 8012d0e:	bf38      	it	cc
 8012d10:	250c      	movcc	r5, #12
 8012d12:	2d00      	cmp	r5, #0
 8012d14:	4607      	mov	r7, r0
 8012d16:	db01      	blt.n	8012d1c <_malloc_r+0x1c>
 8012d18:	42a9      	cmp	r1, r5
 8012d1a:	d905      	bls.n	8012d28 <_malloc_r+0x28>
 8012d1c:	230c      	movs	r3, #12
 8012d1e:	2600      	movs	r6, #0
 8012d20:	603b      	str	r3, [r7, #0]
 8012d22:	4630      	mov	r0, r6
 8012d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012dfc <_malloc_r+0xfc>
 8012d2c:	f000 f868 	bl	8012e00 <__malloc_lock>
 8012d30:	f8d8 3000 	ldr.w	r3, [r8]
 8012d34:	461c      	mov	r4, r3
 8012d36:	bb5c      	cbnz	r4, 8012d90 <_malloc_r+0x90>
 8012d38:	4629      	mov	r1, r5
 8012d3a:	4638      	mov	r0, r7
 8012d3c:	f7ff ffc0 	bl	8012cc0 <sbrk_aligned>
 8012d40:	1c43      	adds	r3, r0, #1
 8012d42:	4604      	mov	r4, r0
 8012d44:	d155      	bne.n	8012df2 <_malloc_r+0xf2>
 8012d46:	f8d8 4000 	ldr.w	r4, [r8]
 8012d4a:	4626      	mov	r6, r4
 8012d4c:	2e00      	cmp	r6, #0
 8012d4e:	d145      	bne.n	8012ddc <_malloc_r+0xdc>
 8012d50:	2c00      	cmp	r4, #0
 8012d52:	d048      	beq.n	8012de6 <_malloc_r+0xe6>
 8012d54:	6823      	ldr	r3, [r4, #0]
 8012d56:	4631      	mov	r1, r6
 8012d58:	4638      	mov	r0, r7
 8012d5a:	eb04 0903 	add.w	r9, r4, r3
 8012d5e:	f000 ff0f 	bl	8013b80 <_sbrk_r>
 8012d62:	4581      	cmp	r9, r0
 8012d64:	d13f      	bne.n	8012de6 <_malloc_r+0xe6>
 8012d66:	6821      	ldr	r1, [r4, #0]
 8012d68:	4638      	mov	r0, r7
 8012d6a:	1a6d      	subs	r5, r5, r1
 8012d6c:	4629      	mov	r1, r5
 8012d6e:	f7ff ffa7 	bl	8012cc0 <sbrk_aligned>
 8012d72:	3001      	adds	r0, #1
 8012d74:	d037      	beq.n	8012de6 <_malloc_r+0xe6>
 8012d76:	6823      	ldr	r3, [r4, #0]
 8012d78:	442b      	add	r3, r5
 8012d7a:	6023      	str	r3, [r4, #0]
 8012d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d038      	beq.n	8012df6 <_malloc_r+0xf6>
 8012d84:	685a      	ldr	r2, [r3, #4]
 8012d86:	42a2      	cmp	r2, r4
 8012d88:	d12b      	bne.n	8012de2 <_malloc_r+0xe2>
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	605a      	str	r2, [r3, #4]
 8012d8e:	e00f      	b.n	8012db0 <_malloc_r+0xb0>
 8012d90:	6822      	ldr	r2, [r4, #0]
 8012d92:	1b52      	subs	r2, r2, r5
 8012d94:	d41f      	bmi.n	8012dd6 <_malloc_r+0xd6>
 8012d96:	2a0b      	cmp	r2, #11
 8012d98:	d917      	bls.n	8012dca <_malloc_r+0xca>
 8012d9a:	1961      	adds	r1, r4, r5
 8012d9c:	42a3      	cmp	r3, r4
 8012d9e:	6025      	str	r5, [r4, #0]
 8012da0:	bf18      	it	ne
 8012da2:	6059      	strne	r1, [r3, #4]
 8012da4:	6863      	ldr	r3, [r4, #4]
 8012da6:	bf08      	it	eq
 8012da8:	f8c8 1000 	streq.w	r1, [r8]
 8012dac:	5162      	str	r2, [r4, r5]
 8012dae:	604b      	str	r3, [r1, #4]
 8012db0:	4638      	mov	r0, r7
 8012db2:	f104 060b 	add.w	r6, r4, #11
 8012db6:	f000 f829 	bl	8012e0c <__malloc_unlock>
 8012dba:	f026 0607 	bic.w	r6, r6, #7
 8012dbe:	1d23      	adds	r3, r4, #4
 8012dc0:	1af2      	subs	r2, r6, r3
 8012dc2:	d0ae      	beq.n	8012d22 <_malloc_r+0x22>
 8012dc4:	1b9b      	subs	r3, r3, r6
 8012dc6:	50a3      	str	r3, [r4, r2]
 8012dc8:	e7ab      	b.n	8012d22 <_malloc_r+0x22>
 8012dca:	42a3      	cmp	r3, r4
 8012dcc:	6862      	ldr	r2, [r4, #4]
 8012dce:	d1dd      	bne.n	8012d8c <_malloc_r+0x8c>
 8012dd0:	f8c8 2000 	str.w	r2, [r8]
 8012dd4:	e7ec      	b.n	8012db0 <_malloc_r+0xb0>
 8012dd6:	4623      	mov	r3, r4
 8012dd8:	6864      	ldr	r4, [r4, #4]
 8012dda:	e7ac      	b.n	8012d36 <_malloc_r+0x36>
 8012ddc:	4634      	mov	r4, r6
 8012dde:	6876      	ldr	r6, [r6, #4]
 8012de0:	e7b4      	b.n	8012d4c <_malloc_r+0x4c>
 8012de2:	4613      	mov	r3, r2
 8012de4:	e7cc      	b.n	8012d80 <_malloc_r+0x80>
 8012de6:	230c      	movs	r3, #12
 8012de8:	4638      	mov	r0, r7
 8012dea:	603b      	str	r3, [r7, #0]
 8012dec:	f000 f80e 	bl	8012e0c <__malloc_unlock>
 8012df0:	e797      	b.n	8012d22 <_malloc_r+0x22>
 8012df2:	6025      	str	r5, [r4, #0]
 8012df4:	e7dc      	b.n	8012db0 <_malloc_r+0xb0>
 8012df6:	605b      	str	r3, [r3, #4]
 8012df8:	deff      	udf	#255	; 0xff
 8012dfa:	bf00      	nop
 8012dfc:	200027d4 	.word	0x200027d4

08012e00 <__malloc_lock>:
 8012e00:	4801      	ldr	r0, [pc, #4]	; (8012e08 <__malloc_lock+0x8>)
 8012e02:	f000 bf09 	b.w	8013c18 <__retarget_lock_acquire_recursive>
 8012e06:	bf00      	nop
 8012e08:	2000291c 	.word	0x2000291c

08012e0c <__malloc_unlock>:
 8012e0c:	4801      	ldr	r0, [pc, #4]	; (8012e14 <__malloc_unlock+0x8>)
 8012e0e:	f000 bf04 	b.w	8013c1a <__retarget_lock_release_recursive>
 8012e12:	bf00      	nop
 8012e14:	2000291c 	.word	0x2000291c

08012e18 <__cvt>:
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e1e:	461f      	mov	r7, r3
 8012e20:	bfbb      	ittet	lt
 8012e22:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8012e26:	461f      	movlt	r7, r3
 8012e28:	2300      	movge	r3, #0
 8012e2a:	232d      	movlt	r3, #45	; 0x2d
 8012e2c:	b088      	sub	sp, #32
 8012e2e:	4614      	mov	r4, r2
 8012e30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012e32:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012e34:	7013      	strb	r3, [r2, #0]
 8012e36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012e38:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8012e3c:	f023 0820 	bic.w	r8, r3, #32
 8012e40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012e44:	d005      	beq.n	8012e52 <__cvt+0x3a>
 8012e46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012e4a:	d100      	bne.n	8012e4e <__cvt+0x36>
 8012e4c:	3501      	adds	r5, #1
 8012e4e:	2302      	movs	r3, #2
 8012e50:	e000      	b.n	8012e54 <__cvt+0x3c>
 8012e52:	2303      	movs	r3, #3
 8012e54:	aa07      	add	r2, sp, #28
 8012e56:	9204      	str	r2, [sp, #16]
 8012e58:	aa06      	add	r2, sp, #24
 8012e5a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8012e5e:	e9cd 3500 	strd	r3, r5, [sp]
 8012e62:	4622      	mov	r2, r4
 8012e64:	463b      	mov	r3, r7
 8012e66:	f000 ff7f 	bl	8013d68 <_dtoa_r>
 8012e6a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012e6e:	4606      	mov	r6, r0
 8012e70:	d102      	bne.n	8012e78 <__cvt+0x60>
 8012e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012e74:	07db      	lsls	r3, r3, #31
 8012e76:	d522      	bpl.n	8012ebe <__cvt+0xa6>
 8012e78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012e7c:	eb06 0905 	add.w	r9, r6, r5
 8012e80:	d110      	bne.n	8012ea4 <__cvt+0x8c>
 8012e82:	7833      	ldrb	r3, [r6, #0]
 8012e84:	2b30      	cmp	r3, #48	; 0x30
 8012e86:	d10a      	bne.n	8012e9e <__cvt+0x86>
 8012e88:	2200      	movs	r2, #0
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	4639      	mov	r1, r7
 8012e90:	f7ed fd8a 	bl	80009a8 <__aeabi_dcmpeq>
 8012e94:	b918      	cbnz	r0, 8012e9e <__cvt+0x86>
 8012e96:	f1c5 0501 	rsb	r5, r5, #1
 8012e9a:	f8ca 5000 	str.w	r5, [sl]
 8012e9e:	f8da 3000 	ldr.w	r3, [sl]
 8012ea2:	4499      	add	r9, r3
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	4639      	mov	r1, r7
 8012eac:	f7ed fd7c 	bl	80009a8 <__aeabi_dcmpeq>
 8012eb0:	b108      	cbz	r0, 8012eb6 <__cvt+0x9e>
 8012eb2:	f8cd 901c 	str.w	r9, [sp, #28]
 8012eb6:	2230      	movs	r2, #48	; 0x30
 8012eb8:	9b07      	ldr	r3, [sp, #28]
 8012eba:	454b      	cmp	r3, r9
 8012ebc:	d307      	bcc.n	8012ece <__cvt+0xb6>
 8012ebe:	4630      	mov	r0, r6
 8012ec0:	9b07      	ldr	r3, [sp, #28]
 8012ec2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012ec4:	1b9b      	subs	r3, r3, r6
 8012ec6:	6013      	str	r3, [r2, #0]
 8012ec8:	b008      	add	sp, #32
 8012eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ece:	1c59      	adds	r1, r3, #1
 8012ed0:	9107      	str	r1, [sp, #28]
 8012ed2:	701a      	strb	r2, [r3, #0]
 8012ed4:	e7f0      	b.n	8012eb8 <__cvt+0xa0>

08012ed6 <__exponent>:
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012eda:	2900      	cmp	r1, #0
 8012edc:	f803 2b02 	strb.w	r2, [r3], #2
 8012ee0:	bfb6      	itet	lt
 8012ee2:	222d      	movlt	r2, #45	; 0x2d
 8012ee4:	222b      	movge	r2, #43	; 0x2b
 8012ee6:	4249      	neglt	r1, r1
 8012ee8:	2909      	cmp	r1, #9
 8012eea:	7042      	strb	r2, [r0, #1]
 8012eec:	dd2a      	ble.n	8012f44 <__exponent+0x6e>
 8012eee:	f10d 0207 	add.w	r2, sp, #7
 8012ef2:	4617      	mov	r7, r2
 8012ef4:	260a      	movs	r6, #10
 8012ef6:	fb91 f5f6 	sdiv	r5, r1, r6
 8012efa:	4694      	mov	ip, r2
 8012efc:	fb06 1415 	mls	r4, r6, r5, r1
 8012f00:	3430      	adds	r4, #48	; 0x30
 8012f02:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8012f06:	460c      	mov	r4, r1
 8012f08:	2c63      	cmp	r4, #99	; 0x63
 8012f0a:	4629      	mov	r1, r5
 8012f0c:	f102 32ff 	add.w	r2, r2, #4294967295
 8012f10:	dcf1      	bgt.n	8012ef6 <__exponent+0x20>
 8012f12:	3130      	adds	r1, #48	; 0x30
 8012f14:	f1ac 0402 	sub.w	r4, ip, #2
 8012f18:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012f1c:	4622      	mov	r2, r4
 8012f1e:	1c41      	adds	r1, r0, #1
 8012f20:	42ba      	cmp	r2, r7
 8012f22:	d30a      	bcc.n	8012f3a <__exponent+0x64>
 8012f24:	f10d 0209 	add.w	r2, sp, #9
 8012f28:	eba2 020c 	sub.w	r2, r2, ip
 8012f2c:	42bc      	cmp	r4, r7
 8012f2e:	bf88      	it	hi
 8012f30:	2200      	movhi	r2, #0
 8012f32:	4413      	add	r3, r2
 8012f34:	1a18      	subs	r0, r3, r0
 8012f36:	b003      	add	sp, #12
 8012f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f3a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012f3e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8012f42:	e7ed      	b.n	8012f20 <__exponent+0x4a>
 8012f44:	2330      	movs	r3, #48	; 0x30
 8012f46:	3130      	adds	r1, #48	; 0x30
 8012f48:	7083      	strb	r3, [r0, #2]
 8012f4a:	70c1      	strb	r1, [r0, #3]
 8012f4c:	1d03      	adds	r3, r0, #4
 8012f4e:	e7f1      	b.n	8012f34 <__exponent+0x5e>

08012f50 <_printf_float>:
 8012f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f54:	b091      	sub	sp, #68	; 0x44
 8012f56:	460c      	mov	r4, r1
 8012f58:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012f5c:	4616      	mov	r6, r2
 8012f5e:	461f      	mov	r7, r3
 8012f60:	4605      	mov	r5, r0
 8012f62:	f000 fdd5 	bl	8013b10 <_localeconv_r>
 8012f66:	6803      	ldr	r3, [r0, #0]
 8012f68:	4618      	mov	r0, r3
 8012f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8012f6c:	f7ed f8f0 	bl	8000150 <strlen>
 8012f70:	2300      	movs	r3, #0
 8012f72:	930e      	str	r3, [sp, #56]	; 0x38
 8012f74:	f8d8 3000 	ldr.w	r3, [r8]
 8012f78:	900a      	str	r0, [sp, #40]	; 0x28
 8012f7a:	3307      	adds	r3, #7
 8012f7c:	f023 0307 	bic.w	r3, r3, #7
 8012f80:	f103 0208 	add.w	r2, r3, #8
 8012f84:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012f88:	f8d4 b000 	ldr.w	fp, [r4]
 8012f8c:	f8c8 2000 	str.w	r2, [r8]
 8012f90:	e9d3 a800 	ldrd	sl, r8, [r3]
 8012f94:	4652      	mov	r2, sl
 8012f96:	4643      	mov	r3, r8
 8012f98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012f9c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8012fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8012fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8012fa6:	4650      	mov	r0, sl
 8012fa8:	4b9c      	ldr	r3, [pc, #624]	; (801321c <_printf_float+0x2cc>)
 8012faa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012fac:	f7ed fd2e 	bl	8000a0c <__aeabi_dcmpun>
 8012fb0:	bb70      	cbnz	r0, 8013010 <_printf_float+0xc0>
 8012fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8012fb6:	4650      	mov	r0, sl
 8012fb8:	4b98      	ldr	r3, [pc, #608]	; (801321c <_printf_float+0x2cc>)
 8012fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012fbc:	f7ed fd08 	bl	80009d0 <__aeabi_dcmple>
 8012fc0:	bb30      	cbnz	r0, 8013010 <_printf_float+0xc0>
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	4650      	mov	r0, sl
 8012fc8:	4641      	mov	r1, r8
 8012fca:	f7ed fcf7 	bl	80009bc <__aeabi_dcmplt>
 8012fce:	b110      	cbz	r0, 8012fd6 <_printf_float+0x86>
 8012fd0:	232d      	movs	r3, #45	; 0x2d
 8012fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fd6:	4a92      	ldr	r2, [pc, #584]	; (8013220 <_printf_float+0x2d0>)
 8012fd8:	4b92      	ldr	r3, [pc, #584]	; (8013224 <_printf_float+0x2d4>)
 8012fda:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012fde:	bf94      	ite	ls
 8012fe0:	4690      	movls	r8, r2
 8012fe2:	4698      	movhi	r8, r3
 8012fe4:	2303      	movs	r3, #3
 8012fe6:	f04f 0a00 	mov.w	sl, #0
 8012fea:	6123      	str	r3, [r4, #16]
 8012fec:	f02b 0304 	bic.w	r3, fp, #4
 8012ff0:	6023      	str	r3, [r4, #0]
 8012ff2:	4633      	mov	r3, r6
 8012ff4:	4621      	mov	r1, r4
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	9700      	str	r7, [sp, #0]
 8012ffa:	aa0f      	add	r2, sp, #60	; 0x3c
 8012ffc:	f000 f9d6 	bl	80133ac <_printf_common>
 8013000:	3001      	adds	r0, #1
 8013002:	f040 8090 	bne.w	8013126 <_printf_float+0x1d6>
 8013006:	f04f 30ff 	mov.w	r0, #4294967295
 801300a:	b011      	add	sp, #68	; 0x44
 801300c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013010:	4652      	mov	r2, sl
 8013012:	4643      	mov	r3, r8
 8013014:	4650      	mov	r0, sl
 8013016:	4641      	mov	r1, r8
 8013018:	f7ed fcf8 	bl	8000a0c <__aeabi_dcmpun>
 801301c:	b148      	cbz	r0, 8013032 <_printf_float+0xe2>
 801301e:	f1b8 0f00 	cmp.w	r8, #0
 8013022:	bfb8      	it	lt
 8013024:	232d      	movlt	r3, #45	; 0x2d
 8013026:	4a80      	ldr	r2, [pc, #512]	; (8013228 <_printf_float+0x2d8>)
 8013028:	bfb8      	it	lt
 801302a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801302e:	4b7f      	ldr	r3, [pc, #508]	; (801322c <_printf_float+0x2dc>)
 8013030:	e7d3      	b.n	8012fda <_printf_float+0x8a>
 8013032:	6863      	ldr	r3, [r4, #4]
 8013034:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013038:	1c5a      	adds	r2, r3, #1
 801303a:	d142      	bne.n	80130c2 <_printf_float+0x172>
 801303c:	2306      	movs	r3, #6
 801303e:	6063      	str	r3, [r4, #4]
 8013040:	2200      	movs	r2, #0
 8013042:	9206      	str	r2, [sp, #24]
 8013044:	aa0e      	add	r2, sp, #56	; 0x38
 8013046:	e9cd 9204 	strd	r9, r2, [sp, #16]
 801304a:	aa0d      	add	r2, sp, #52	; 0x34
 801304c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8013050:	9203      	str	r2, [sp, #12]
 8013052:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8013056:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801305a:	6023      	str	r3, [r4, #0]
 801305c:	6863      	ldr	r3, [r4, #4]
 801305e:	4652      	mov	r2, sl
 8013060:	9300      	str	r3, [sp, #0]
 8013062:	4628      	mov	r0, r5
 8013064:	4643      	mov	r3, r8
 8013066:	910b      	str	r1, [sp, #44]	; 0x2c
 8013068:	f7ff fed6 	bl	8012e18 <__cvt>
 801306c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801306e:	4680      	mov	r8, r0
 8013070:	2947      	cmp	r1, #71	; 0x47
 8013072:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013074:	d108      	bne.n	8013088 <_printf_float+0x138>
 8013076:	1cc8      	adds	r0, r1, #3
 8013078:	db02      	blt.n	8013080 <_printf_float+0x130>
 801307a:	6863      	ldr	r3, [r4, #4]
 801307c:	4299      	cmp	r1, r3
 801307e:	dd40      	ble.n	8013102 <_printf_float+0x1b2>
 8013080:	f1a9 0902 	sub.w	r9, r9, #2
 8013084:	fa5f f989 	uxtb.w	r9, r9
 8013088:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801308c:	d81f      	bhi.n	80130ce <_printf_float+0x17e>
 801308e:	464a      	mov	r2, r9
 8013090:	3901      	subs	r1, #1
 8013092:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013096:	910d      	str	r1, [sp, #52]	; 0x34
 8013098:	f7ff ff1d 	bl	8012ed6 <__exponent>
 801309c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801309e:	4682      	mov	sl, r0
 80130a0:	1813      	adds	r3, r2, r0
 80130a2:	2a01      	cmp	r2, #1
 80130a4:	6123      	str	r3, [r4, #16]
 80130a6:	dc02      	bgt.n	80130ae <_printf_float+0x15e>
 80130a8:	6822      	ldr	r2, [r4, #0]
 80130aa:	07d2      	lsls	r2, r2, #31
 80130ac:	d501      	bpl.n	80130b2 <_printf_float+0x162>
 80130ae:	3301      	adds	r3, #1
 80130b0:	6123      	str	r3, [r4, #16]
 80130b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d09b      	beq.n	8012ff2 <_printf_float+0xa2>
 80130ba:	232d      	movs	r3, #45	; 0x2d
 80130bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130c0:	e797      	b.n	8012ff2 <_printf_float+0xa2>
 80130c2:	2947      	cmp	r1, #71	; 0x47
 80130c4:	d1bc      	bne.n	8013040 <_printf_float+0xf0>
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d1ba      	bne.n	8013040 <_printf_float+0xf0>
 80130ca:	2301      	movs	r3, #1
 80130cc:	e7b7      	b.n	801303e <_printf_float+0xee>
 80130ce:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80130d2:	d118      	bne.n	8013106 <_printf_float+0x1b6>
 80130d4:	2900      	cmp	r1, #0
 80130d6:	6863      	ldr	r3, [r4, #4]
 80130d8:	dd0b      	ble.n	80130f2 <_printf_float+0x1a2>
 80130da:	6121      	str	r1, [r4, #16]
 80130dc:	b913      	cbnz	r3, 80130e4 <_printf_float+0x194>
 80130de:	6822      	ldr	r2, [r4, #0]
 80130e0:	07d0      	lsls	r0, r2, #31
 80130e2:	d502      	bpl.n	80130ea <_printf_float+0x19a>
 80130e4:	3301      	adds	r3, #1
 80130e6:	440b      	add	r3, r1
 80130e8:	6123      	str	r3, [r4, #16]
 80130ea:	f04f 0a00 	mov.w	sl, #0
 80130ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80130f0:	e7df      	b.n	80130b2 <_printf_float+0x162>
 80130f2:	b913      	cbnz	r3, 80130fa <_printf_float+0x1aa>
 80130f4:	6822      	ldr	r2, [r4, #0]
 80130f6:	07d2      	lsls	r2, r2, #31
 80130f8:	d501      	bpl.n	80130fe <_printf_float+0x1ae>
 80130fa:	3302      	adds	r3, #2
 80130fc:	e7f4      	b.n	80130e8 <_printf_float+0x198>
 80130fe:	2301      	movs	r3, #1
 8013100:	e7f2      	b.n	80130e8 <_printf_float+0x198>
 8013102:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013108:	4299      	cmp	r1, r3
 801310a:	db05      	blt.n	8013118 <_printf_float+0x1c8>
 801310c:	6823      	ldr	r3, [r4, #0]
 801310e:	6121      	str	r1, [r4, #16]
 8013110:	07d8      	lsls	r0, r3, #31
 8013112:	d5ea      	bpl.n	80130ea <_printf_float+0x19a>
 8013114:	1c4b      	adds	r3, r1, #1
 8013116:	e7e7      	b.n	80130e8 <_printf_float+0x198>
 8013118:	2900      	cmp	r1, #0
 801311a:	bfcc      	ite	gt
 801311c:	2201      	movgt	r2, #1
 801311e:	f1c1 0202 	rsble	r2, r1, #2
 8013122:	4413      	add	r3, r2
 8013124:	e7e0      	b.n	80130e8 <_printf_float+0x198>
 8013126:	6823      	ldr	r3, [r4, #0]
 8013128:	055a      	lsls	r2, r3, #21
 801312a:	d407      	bmi.n	801313c <_printf_float+0x1ec>
 801312c:	6923      	ldr	r3, [r4, #16]
 801312e:	4642      	mov	r2, r8
 8013130:	4631      	mov	r1, r6
 8013132:	4628      	mov	r0, r5
 8013134:	47b8      	blx	r7
 8013136:	3001      	adds	r0, #1
 8013138:	d12b      	bne.n	8013192 <_printf_float+0x242>
 801313a:	e764      	b.n	8013006 <_printf_float+0xb6>
 801313c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013140:	f240 80dd 	bls.w	80132fe <_printf_float+0x3ae>
 8013144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013148:	2200      	movs	r2, #0
 801314a:	2300      	movs	r3, #0
 801314c:	f7ed fc2c 	bl	80009a8 <__aeabi_dcmpeq>
 8013150:	2800      	cmp	r0, #0
 8013152:	d033      	beq.n	80131bc <_printf_float+0x26c>
 8013154:	2301      	movs	r3, #1
 8013156:	4631      	mov	r1, r6
 8013158:	4628      	mov	r0, r5
 801315a:	4a35      	ldr	r2, [pc, #212]	; (8013230 <_printf_float+0x2e0>)
 801315c:	47b8      	blx	r7
 801315e:	3001      	adds	r0, #1
 8013160:	f43f af51 	beq.w	8013006 <_printf_float+0xb6>
 8013164:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013168:	429a      	cmp	r2, r3
 801316a:	db02      	blt.n	8013172 <_printf_float+0x222>
 801316c:	6823      	ldr	r3, [r4, #0]
 801316e:	07d8      	lsls	r0, r3, #31
 8013170:	d50f      	bpl.n	8013192 <_printf_float+0x242>
 8013172:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013176:	4631      	mov	r1, r6
 8013178:	4628      	mov	r0, r5
 801317a:	47b8      	blx	r7
 801317c:	3001      	adds	r0, #1
 801317e:	f43f af42 	beq.w	8013006 <_printf_float+0xb6>
 8013182:	f04f 0800 	mov.w	r8, #0
 8013186:	f104 091a 	add.w	r9, r4, #26
 801318a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801318c:	3b01      	subs	r3, #1
 801318e:	4543      	cmp	r3, r8
 8013190:	dc09      	bgt.n	80131a6 <_printf_float+0x256>
 8013192:	6823      	ldr	r3, [r4, #0]
 8013194:	079b      	lsls	r3, r3, #30
 8013196:	f100 8104 	bmi.w	80133a2 <_printf_float+0x452>
 801319a:	68e0      	ldr	r0, [r4, #12]
 801319c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801319e:	4298      	cmp	r0, r3
 80131a0:	bfb8      	it	lt
 80131a2:	4618      	movlt	r0, r3
 80131a4:	e731      	b.n	801300a <_printf_float+0xba>
 80131a6:	2301      	movs	r3, #1
 80131a8:	464a      	mov	r2, r9
 80131aa:	4631      	mov	r1, r6
 80131ac:	4628      	mov	r0, r5
 80131ae:	47b8      	blx	r7
 80131b0:	3001      	adds	r0, #1
 80131b2:	f43f af28 	beq.w	8013006 <_printf_float+0xb6>
 80131b6:	f108 0801 	add.w	r8, r8, #1
 80131ba:	e7e6      	b.n	801318a <_printf_float+0x23a>
 80131bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131be:	2b00      	cmp	r3, #0
 80131c0:	dc38      	bgt.n	8013234 <_printf_float+0x2e4>
 80131c2:	2301      	movs	r3, #1
 80131c4:	4631      	mov	r1, r6
 80131c6:	4628      	mov	r0, r5
 80131c8:	4a19      	ldr	r2, [pc, #100]	; (8013230 <_printf_float+0x2e0>)
 80131ca:	47b8      	blx	r7
 80131cc:	3001      	adds	r0, #1
 80131ce:	f43f af1a 	beq.w	8013006 <_printf_float+0xb6>
 80131d2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80131d6:	4313      	orrs	r3, r2
 80131d8:	d102      	bne.n	80131e0 <_printf_float+0x290>
 80131da:	6823      	ldr	r3, [r4, #0]
 80131dc:	07d9      	lsls	r1, r3, #31
 80131de:	d5d8      	bpl.n	8013192 <_printf_float+0x242>
 80131e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80131e4:	4631      	mov	r1, r6
 80131e6:	4628      	mov	r0, r5
 80131e8:	47b8      	blx	r7
 80131ea:	3001      	adds	r0, #1
 80131ec:	f43f af0b 	beq.w	8013006 <_printf_float+0xb6>
 80131f0:	f04f 0900 	mov.w	r9, #0
 80131f4:	f104 0a1a 	add.w	sl, r4, #26
 80131f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131fa:	425b      	negs	r3, r3
 80131fc:	454b      	cmp	r3, r9
 80131fe:	dc01      	bgt.n	8013204 <_printf_float+0x2b4>
 8013200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013202:	e794      	b.n	801312e <_printf_float+0x1de>
 8013204:	2301      	movs	r3, #1
 8013206:	4652      	mov	r2, sl
 8013208:	4631      	mov	r1, r6
 801320a:	4628      	mov	r0, r5
 801320c:	47b8      	blx	r7
 801320e:	3001      	adds	r0, #1
 8013210:	f43f aef9 	beq.w	8013006 <_printf_float+0xb6>
 8013214:	f109 0901 	add.w	r9, r9, #1
 8013218:	e7ee      	b.n	80131f8 <_printf_float+0x2a8>
 801321a:	bf00      	nop
 801321c:	7fefffff 	.word	0x7fefffff
 8013220:	08016370 	.word	0x08016370
 8013224:	08016374 	.word	0x08016374
 8013228:	08016378 	.word	0x08016378
 801322c:	0801637c 	.word	0x0801637c
 8013230:	08016380 	.word	0x08016380
 8013234:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013236:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013238:	429a      	cmp	r2, r3
 801323a:	bfa8      	it	ge
 801323c:	461a      	movge	r2, r3
 801323e:	2a00      	cmp	r2, #0
 8013240:	4691      	mov	r9, r2
 8013242:	dc37      	bgt.n	80132b4 <_printf_float+0x364>
 8013244:	f04f 0b00 	mov.w	fp, #0
 8013248:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801324c:	f104 021a 	add.w	r2, r4, #26
 8013250:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013254:	ebaa 0309 	sub.w	r3, sl, r9
 8013258:	455b      	cmp	r3, fp
 801325a:	dc33      	bgt.n	80132c4 <_printf_float+0x374>
 801325c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013260:	429a      	cmp	r2, r3
 8013262:	db3b      	blt.n	80132dc <_printf_float+0x38c>
 8013264:	6823      	ldr	r3, [r4, #0]
 8013266:	07da      	lsls	r2, r3, #31
 8013268:	d438      	bmi.n	80132dc <_printf_float+0x38c>
 801326a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801326e:	eba2 0903 	sub.w	r9, r2, r3
 8013272:	eba2 020a 	sub.w	r2, r2, sl
 8013276:	4591      	cmp	r9, r2
 8013278:	bfa8      	it	ge
 801327a:	4691      	movge	r9, r2
 801327c:	f1b9 0f00 	cmp.w	r9, #0
 8013280:	dc34      	bgt.n	80132ec <_printf_float+0x39c>
 8013282:	f04f 0800 	mov.w	r8, #0
 8013286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801328a:	f104 0a1a 	add.w	sl, r4, #26
 801328e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013292:	1a9b      	subs	r3, r3, r2
 8013294:	eba3 0309 	sub.w	r3, r3, r9
 8013298:	4543      	cmp	r3, r8
 801329a:	f77f af7a 	ble.w	8013192 <_printf_float+0x242>
 801329e:	2301      	movs	r3, #1
 80132a0:	4652      	mov	r2, sl
 80132a2:	4631      	mov	r1, r6
 80132a4:	4628      	mov	r0, r5
 80132a6:	47b8      	blx	r7
 80132a8:	3001      	adds	r0, #1
 80132aa:	f43f aeac 	beq.w	8013006 <_printf_float+0xb6>
 80132ae:	f108 0801 	add.w	r8, r8, #1
 80132b2:	e7ec      	b.n	801328e <_printf_float+0x33e>
 80132b4:	4613      	mov	r3, r2
 80132b6:	4631      	mov	r1, r6
 80132b8:	4642      	mov	r2, r8
 80132ba:	4628      	mov	r0, r5
 80132bc:	47b8      	blx	r7
 80132be:	3001      	adds	r0, #1
 80132c0:	d1c0      	bne.n	8013244 <_printf_float+0x2f4>
 80132c2:	e6a0      	b.n	8013006 <_printf_float+0xb6>
 80132c4:	2301      	movs	r3, #1
 80132c6:	4631      	mov	r1, r6
 80132c8:	4628      	mov	r0, r5
 80132ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80132cc:	47b8      	blx	r7
 80132ce:	3001      	adds	r0, #1
 80132d0:	f43f ae99 	beq.w	8013006 <_printf_float+0xb6>
 80132d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80132d6:	f10b 0b01 	add.w	fp, fp, #1
 80132da:	e7b9      	b.n	8013250 <_printf_float+0x300>
 80132dc:	4631      	mov	r1, r6
 80132de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80132e2:	4628      	mov	r0, r5
 80132e4:	47b8      	blx	r7
 80132e6:	3001      	adds	r0, #1
 80132e8:	d1bf      	bne.n	801326a <_printf_float+0x31a>
 80132ea:	e68c      	b.n	8013006 <_printf_float+0xb6>
 80132ec:	464b      	mov	r3, r9
 80132ee:	4631      	mov	r1, r6
 80132f0:	4628      	mov	r0, r5
 80132f2:	eb08 020a 	add.w	r2, r8, sl
 80132f6:	47b8      	blx	r7
 80132f8:	3001      	adds	r0, #1
 80132fa:	d1c2      	bne.n	8013282 <_printf_float+0x332>
 80132fc:	e683      	b.n	8013006 <_printf_float+0xb6>
 80132fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013300:	2a01      	cmp	r2, #1
 8013302:	dc01      	bgt.n	8013308 <_printf_float+0x3b8>
 8013304:	07db      	lsls	r3, r3, #31
 8013306:	d539      	bpl.n	801337c <_printf_float+0x42c>
 8013308:	2301      	movs	r3, #1
 801330a:	4642      	mov	r2, r8
 801330c:	4631      	mov	r1, r6
 801330e:	4628      	mov	r0, r5
 8013310:	47b8      	blx	r7
 8013312:	3001      	adds	r0, #1
 8013314:	f43f ae77 	beq.w	8013006 <_printf_float+0xb6>
 8013318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801331c:	4631      	mov	r1, r6
 801331e:	4628      	mov	r0, r5
 8013320:	47b8      	blx	r7
 8013322:	3001      	adds	r0, #1
 8013324:	f43f ae6f 	beq.w	8013006 <_printf_float+0xb6>
 8013328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801332c:	2200      	movs	r2, #0
 801332e:	2300      	movs	r3, #0
 8013330:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8013334:	f7ed fb38 	bl	80009a8 <__aeabi_dcmpeq>
 8013338:	b9d8      	cbnz	r0, 8013372 <_printf_float+0x422>
 801333a:	f109 33ff 	add.w	r3, r9, #4294967295
 801333e:	f108 0201 	add.w	r2, r8, #1
 8013342:	4631      	mov	r1, r6
 8013344:	4628      	mov	r0, r5
 8013346:	47b8      	blx	r7
 8013348:	3001      	adds	r0, #1
 801334a:	d10e      	bne.n	801336a <_printf_float+0x41a>
 801334c:	e65b      	b.n	8013006 <_printf_float+0xb6>
 801334e:	2301      	movs	r3, #1
 8013350:	464a      	mov	r2, r9
 8013352:	4631      	mov	r1, r6
 8013354:	4628      	mov	r0, r5
 8013356:	47b8      	blx	r7
 8013358:	3001      	adds	r0, #1
 801335a:	f43f ae54 	beq.w	8013006 <_printf_float+0xb6>
 801335e:	f108 0801 	add.w	r8, r8, #1
 8013362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013364:	3b01      	subs	r3, #1
 8013366:	4543      	cmp	r3, r8
 8013368:	dcf1      	bgt.n	801334e <_printf_float+0x3fe>
 801336a:	4653      	mov	r3, sl
 801336c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013370:	e6de      	b.n	8013130 <_printf_float+0x1e0>
 8013372:	f04f 0800 	mov.w	r8, #0
 8013376:	f104 091a 	add.w	r9, r4, #26
 801337a:	e7f2      	b.n	8013362 <_printf_float+0x412>
 801337c:	2301      	movs	r3, #1
 801337e:	4642      	mov	r2, r8
 8013380:	e7df      	b.n	8013342 <_printf_float+0x3f2>
 8013382:	2301      	movs	r3, #1
 8013384:	464a      	mov	r2, r9
 8013386:	4631      	mov	r1, r6
 8013388:	4628      	mov	r0, r5
 801338a:	47b8      	blx	r7
 801338c:	3001      	adds	r0, #1
 801338e:	f43f ae3a 	beq.w	8013006 <_printf_float+0xb6>
 8013392:	f108 0801 	add.w	r8, r8, #1
 8013396:	68e3      	ldr	r3, [r4, #12]
 8013398:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801339a:	1a5b      	subs	r3, r3, r1
 801339c:	4543      	cmp	r3, r8
 801339e:	dcf0      	bgt.n	8013382 <_printf_float+0x432>
 80133a0:	e6fb      	b.n	801319a <_printf_float+0x24a>
 80133a2:	f04f 0800 	mov.w	r8, #0
 80133a6:	f104 0919 	add.w	r9, r4, #25
 80133aa:	e7f4      	b.n	8013396 <_printf_float+0x446>

080133ac <_printf_common>:
 80133ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133b0:	4616      	mov	r6, r2
 80133b2:	4699      	mov	r9, r3
 80133b4:	688a      	ldr	r2, [r1, #8]
 80133b6:	690b      	ldr	r3, [r1, #16]
 80133b8:	4607      	mov	r7, r0
 80133ba:	4293      	cmp	r3, r2
 80133bc:	bfb8      	it	lt
 80133be:	4613      	movlt	r3, r2
 80133c0:	6033      	str	r3, [r6, #0]
 80133c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80133c6:	460c      	mov	r4, r1
 80133c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80133cc:	b10a      	cbz	r2, 80133d2 <_printf_common+0x26>
 80133ce:	3301      	adds	r3, #1
 80133d0:	6033      	str	r3, [r6, #0]
 80133d2:	6823      	ldr	r3, [r4, #0]
 80133d4:	0699      	lsls	r1, r3, #26
 80133d6:	bf42      	ittt	mi
 80133d8:	6833      	ldrmi	r3, [r6, #0]
 80133da:	3302      	addmi	r3, #2
 80133dc:	6033      	strmi	r3, [r6, #0]
 80133de:	6825      	ldr	r5, [r4, #0]
 80133e0:	f015 0506 	ands.w	r5, r5, #6
 80133e4:	d106      	bne.n	80133f4 <_printf_common+0x48>
 80133e6:	f104 0a19 	add.w	sl, r4, #25
 80133ea:	68e3      	ldr	r3, [r4, #12]
 80133ec:	6832      	ldr	r2, [r6, #0]
 80133ee:	1a9b      	subs	r3, r3, r2
 80133f0:	42ab      	cmp	r3, r5
 80133f2:	dc2b      	bgt.n	801344c <_printf_common+0xa0>
 80133f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80133f8:	1e13      	subs	r3, r2, #0
 80133fa:	6822      	ldr	r2, [r4, #0]
 80133fc:	bf18      	it	ne
 80133fe:	2301      	movne	r3, #1
 8013400:	0692      	lsls	r2, r2, #26
 8013402:	d430      	bmi.n	8013466 <_printf_common+0xba>
 8013404:	4649      	mov	r1, r9
 8013406:	4638      	mov	r0, r7
 8013408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801340c:	47c0      	blx	r8
 801340e:	3001      	adds	r0, #1
 8013410:	d023      	beq.n	801345a <_printf_common+0xae>
 8013412:	6823      	ldr	r3, [r4, #0]
 8013414:	6922      	ldr	r2, [r4, #16]
 8013416:	f003 0306 	and.w	r3, r3, #6
 801341a:	2b04      	cmp	r3, #4
 801341c:	bf14      	ite	ne
 801341e:	2500      	movne	r5, #0
 8013420:	6833      	ldreq	r3, [r6, #0]
 8013422:	f04f 0600 	mov.w	r6, #0
 8013426:	bf08      	it	eq
 8013428:	68e5      	ldreq	r5, [r4, #12]
 801342a:	f104 041a 	add.w	r4, r4, #26
 801342e:	bf08      	it	eq
 8013430:	1aed      	subeq	r5, r5, r3
 8013432:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8013436:	bf08      	it	eq
 8013438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801343c:	4293      	cmp	r3, r2
 801343e:	bfc4      	itt	gt
 8013440:	1a9b      	subgt	r3, r3, r2
 8013442:	18ed      	addgt	r5, r5, r3
 8013444:	42b5      	cmp	r5, r6
 8013446:	d11a      	bne.n	801347e <_printf_common+0xd2>
 8013448:	2000      	movs	r0, #0
 801344a:	e008      	b.n	801345e <_printf_common+0xb2>
 801344c:	2301      	movs	r3, #1
 801344e:	4652      	mov	r2, sl
 8013450:	4649      	mov	r1, r9
 8013452:	4638      	mov	r0, r7
 8013454:	47c0      	blx	r8
 8013456:	3001      	adds	r0, #1
 8013458:	d103      	bne.n	8013462 <_printf_common+0xb6>
 801345a:	f04f 30ff 	mov.w	r0, #4294967295
 801345e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013462:	3501      	adds	r5, #1
 8013464:	e7c1      	b.n	80133ea <_printf_common+0x3e>
 8013466:	2030      	movs	r0, #48	; 0x30
 8013468:	18e1      	adds	r1, r4, r3
 801346a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801346e:	1c5a      	adds	r2, r3, #1
 8013470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013474:	4422      	add	r2, r4
 8013476:	3302      	adds	r3, #2
 8013478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801347c:	e7c2      	b.n	8013404 <_printf_common+0x58>
 801347e:	2301      	movs	r3, #1
 8013480:	4622      	mov	r2, r4
 8013482:	4649      	mov	r1, r9
 8013484:	4638      	mov	r0, r7
 8013486:	47c0      	blx	r8
 8013488:	3001      	adds	r0, #1
 801348a:	d0e6      	beq.n	801345a <_printf_common+0xae>
 801348c:	3601      	adds	r6, #1
 801348e:	e7d9      	b.n	8013444 <_printf_common+0x98>

08013490 <_printf_i>:
 8013490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013494:	7e0f      	ldrb	r7, [r1, #24]
 8013496:	4691      	mov	r9, r2
 8013498:	2f78      	cmp	r7, #120	; 0x78
 801349a:	4680      	mov	r8, r0
 801349c:	460c      	mov	r4, r1
 801349e:	469a      	mov	sl, r3
 80134a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80134a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80134a6:	d807      	bhi.n	80134b8 <_printf_i+0x28>
 80134a8:	2f62      	cmp	r7, #98	; 0x62
 80134aa:	d80a      	bhi.n	80134c2 <_printf_i+0x32>
 80134ac:	2f00      	cmp	r7, #0
 80134ae:	f000 80d5 	beq.w	801365c <_printf_i+0x1cc>
 80134b2:	2f58      	cmp	r7, #88	; 0x58
 80134b4:	f000 80c1 	beq.w	801363a <_printf_i+0x1aa>
 80134b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80134c0:	e03a      	b.n	8013538 <_printf_i+0xa8>
 80134c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80134c6:	2b15      	cmp	r3, #21
 80134c8:	d8f6      	bhi.n	80134b8 <_printf_i+0x28>
 80134ca:	a101      	add	r1, pc, #4	; (adr r1, 80134d0 <_printf_i+0x40>)
 80134cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80134d0:	08013529 	.word	0x08013529
 80134d4:	0801353d 	.word	0x0801353d
 80134d8:	080134b9 	.word	0x080134b9
 80134dc:	080134b9 	.word	0x080134b9
 80134e0:	080134b9 	.word	0x080134b9
 80134e4:	080134b9 	.word	0x080134b9
 80134e8:	0801353d 	.word	0x0801353d
 80134ec:	080134b9 	.word	0x080134b9
 80134f0:	080134b9 	.word	0x080134b9
 80134f4:	080134b9 	.word	0x080134b9
 80134f8:	080134b9 	.word	0x080134b9
 80134fc:	08013643 	.word	0x08013643
 8013500:	08013569 	.word	0x08013569
 8013504:	080135fd 	.word	0x080135fd
 8013508:	080134b9 	.word	0x080134b9
 801350c:	080134b9 	.word	0x080134b9
 8013510:	08013665 	.word	0x08013665
 8013514:	080134b9 	.word	0x080134b9
 8013518:	08013569 	.word	0x08013569
 801351c:	080134b9 	.word	0x080134b9
 8013520:	080134b9 	.word	0x080134b9
 8013524:	08013605 	.word	0x08013605
 8013528:	682b      	ldr	r3, [r5, #0]
 801352a:	1d1a      	adds	r2, r3, #4
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	602a      	str	r2, [r5, #0]
 8013530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013538:	2301      	movs	r3, #1
 801353a:	e0a0      	b.n	801367e <_printf_i+0x1ee>
 801353c:	6820      	ldr	r0, [r4, #0]
 801353e:	682b      	ldr	r3, [r5, #0]
 8013540:	0607      	lsls	r7, r0, #24
 8013542:	f103 0104 	add.w	r1, r3, #4
 8013546:	6029      	str	r1, [r5, #0]
 8013548:	d501      	bpl.n	801354e <_printf_i+0xbe>
 801354a:	681e      	ldr	r6, [r3, #0]
 801354c:	e003      	b.n	8013556 <_printf_i+0xc6>
 801354e:	0646      	lsls	r6, r0, #25
 8013550:	d5fb      	bpl.n	801354a <_printf_i+0xba>
 8013552:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013556:	2e00      	cmp	r6, #0
 8013558:	da03      	bge.n	8013562 <_printf_i+0xd2>
 801355a:	232d      	movs	r3, #45	; 0x2d
 801355c:	4276      	negs	r6, r6
 801355e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013562:	230a      	movs	r3, #10
 8013564:	4859      	ldr	r0, [pc, #356]	; (80136cc <_printf_i+0x23c>)
 8013566:	e012      	b.n	801358e <_printf_i+0xfe>
 8013568:	682b      	ldr	r3, [r5, #0]
 801356a:	6820      	ldr	r0, [r4, #0]
 801356c:	1d19      	adds	r1, r3, #4
 801356e:	6029      	str	r1, [r5, #0]
 8013570:	0605      	lsls	r5, r0, #24
 8013572:	d501      	bpl.n	8013578 <_printf_i+0xe8>
 8013574:	681e      	ldr	r6, [r3, #0]
 8013576:	e002      	b.n	801357e <_printf_i+0xee>
 8013578:	0641      	lsls	r1, r0, #25
 801357a:	d5fb      	bpl.n	8013574 <_printf_i+0xe4>
 801357c:	881e      	ldrh	r6, [r3, #0]
 801357e:	2f6f      	cmp	r7, #111	; 0x6f
 8013580:	bf0c      	ite	eq
 8013582:	2308      	moveq	r3, #8
 8013584:	230a      	movne	r3, #10
 8013586:	4851      	ldr	r0, [pc, #324]	; (80136cc <_printf_i+0x23c>)
 8013588:	2100      	movs	r1, #0
 801358a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801358e:	6865      	ldr	r5, [r4, #4]
 8013590:	2d00      	cmp	r5, #0
 8013592:	bfa8      	it	ge
 8013594:	6821      	ldrge	r1, [r4, #0]
 8013596:	60a5      	str	r5, [r4, #8]
 8013598:	bfa4      	itt	ge
 801359a:	f021 0104 	bicge.w	r1, r1, #4
 801359e:	6021      	strge	r1, [r4, #0]
 80135a0:	b90e      	cbnz	r6, 80135a6 <_printf_i+0x116>
 80135a2:	2d00      	cmp	r5, #0
 80135a4:	d04b      	beq.n	801363e <_printf_i+0x1ae>
 80135a6:	4615      	mov	r5, r2
 80135a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80135ac:	fb03 6711 	mls	r7, r3, r1, r6
 80135b0:	5dc7      	ldrb	r7, [r0, r7]
 80135b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80135b6:	4637      	mov	r7, r6
 80135b8:	42bb      	cmp	r3, r7
 80135ba:	460e      	mov	r6, r1
 80135bc:	d9f4      	bls.n	80135a8 <_printf_i+0x118>
 80135be:	2b08      	cmp	r3, #8
 80135c0:	d10b      	bne.n	80135da <_printf_i+0x14a>
 80135c2:	6823      	ldr	r3, [r4, #0]
 80135c4:	07de      	lsls	r6, r3, #31
 80135c6:	d508      	bpl.n	80135da <_printf_i+0x14a>
 80135c8:	6923      	ldr	r3, [r4, #16]
 80135ca:	6861      	ldr	r1, [r4, #4]
 80135cc:	4299      	cmp	r1, r3
 80135ce:	bfde      	ittt	le
 80135d0:	2330      	movle	r3, #48	; 0x30
 80135d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80135d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80135da:	1b52      	subs	r2, r2, r5
 80135dc:	6122      	str	r2, [r4, #16]
 80135de:	464b      	mov	r3, r9
 80135e0:	4621      	mov	r1, r4
 80135e2:	4640      	mov	r0, r8
 80135e4:	f8cd a000 	str.w	sl, [sp]
 80135e8:	aa03      	add	r2, sp, #12
 80135ea:	f7ff fedf 	bl	80133ac <_printf_common>
 80135ee:	3001      	adds	r0, #1
 80135f0:	d14a      	bne.n	8013688 <_printf_i+0x1f8>
 80135f2:	f04f 30ff 	mov.w	r0, #4294967295
 80135f6:	b004      	add	sp, #16
 80135f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135fc:	6823      	ldr	r3, [r4, #0]
 80135fe:	f043 0320 	orr.w	r3, r3, #32
 8013602:	6023      	str	r3, [r4, #0]
 8013604:	2778      	movs	r7, #120	; 0x78
 8013606:	4832      	ldr	r0, [pc, #200]	; (80136d0 <_printf_i+0x240>)
 8013608:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801360c:	6823      	ldr	r3, [r4, #0]
 801360e:	6829      	ldr	r1, [r5, #0]
 8013610:	061f      	lsls	r7, r3, #24
 8013612:	f851 6b04 	ldr.w	r6, [r1], #4
 8013616:	d402      	bmi.n	801361e <_printf_i+0x18e>
 8013618:	065f      	lsls	r7, r3, #25
 801361a:	bf48      	it	mi
 801361c:	b2b6      	uxthmi	r6, r6
 801361e:	07df      	lsls	r7, r3, #31
 8013620:	bf48      	it	mi
 8013622:	f043 0320 	orrmi.w	r3, r3, #32
 8013626:	6029      	str	r1, [r5, #0]
 8013628:	bf48      	it	mi
 801362a:	6023      	strmi	r3, [r4, #0]
 801362c:	b91e      	cbnz	r6, 8013636 <_printf_i+0x1a6>
 801362e:	6823      	ldr	r3, [r4, #0]
 8013630:	f023 0320 	bic.w	r3, r3, #32
 8013634:	6023      	str	r3, [r4, #0]
 8013636:	2310      	movs	r3, #16
 8013638:	e7a6      	b.n	8013588 <_printf_i+0xf8>
 801363a:	4824      	ldr	r0, [pc, #144]	; (80136cc <_printf_i+0x23c>)
 801363c:	e7e4      	b.n	8013608 <_printf_i+0x178>
 801363e:	4615      	mov	r5, r2
 8013640:	e7bd      	b.n	80135be <_printf_i+0x12e>
 8013642:	682b      	ldr	r3, [r5, #0]
 8013644:	6826      	ldr	r6, [r4, #0]
 8013646:	1d18      	adds	r0, r3, #4
 8013648:	6961      	ldr	r1, [r4, #20]
 801364a:	6028      	str	r0, [r5, #0]
 801364c:	0635      	lsls	r5, r6, #24
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	d501      	bpl.n	8013656 <_printf_i+0x1c6>
 8013652:	6019      	str	r1, [r3, #0]
 8013654:	e002      	b.n	801365c <_printf_i+0x1cc>
 8013656:	0670      	lsls	r0, r6, #25
 8013658:	d5fb      	bpl.n	8013652 <_printf_i+0x1c2>
 801365a:	8019      	strh	r1, [r3, #0]
 801365c:	2300      	movs	r3, #0
 801365e:	4615      	mov	r5, r2
 8013660:	6123      	str	r3, [r4, #16]
 8013662:	e7bc      	b.n	80135de <_printf_i+0x14e>
 8013664:	682b      	ldr	r3, [r5, #0]
 8013666:	2100      	movs	r1, #0
 8013668:	1d1a      	adds	r2, r3, #4
 801366a:	602a      	str	r2, [r5, #0]
 801366c:	681d      	ldr	r5, [r3, #0]
 801366e:	6862      	ldr	r2, [r4, #4]
 8013670:	4628      	mov	r0, r5
 8013672:	f000 fad3 	bl	8013c1c <memchr>
 8013676:	b108      	cbz	r0, 801367c <_printf_i+0x1ec>
 8013678:	1b40      	subs	r0, r0, r5
 801367a:	6060      	str	r0, [r4, #4]
 801367c:	6863      	ldr	r3, [r4, #4]
 801367e:	6123      	str	r3, [r4, #16]
 8013680:	2300      	movs	r3, #0
 8013682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013686:	e7aa      	b.n	80135de <_printf_i+0x14e>
 8013688:	462a      	mov	r2, r5
 801368a:	4649      	mov	r1, r9
 801368c:	4640      	mov	r0, r8
 801368e:	6923      	ldr	r3, [r4, #16]
 8013690:	47d0      	blx	sl
 8013692:	3001      	adds	r0, #1
 8013694:	d0ad      	beq.n	80135f2 <_printf_i+0x162>
 8013696:	6823      	ldr	r3, [r4, #0]
 8013698:	079b      	lsls	r3, r3, #30
 801369a:	d413      	bmi.n	80136c4 <_printf_i+0x234>
 801369c:	68e0      	ldr	r0, [r4, #12]
 801369e:	9b03      	ldr	r3, [sp, #12]
 80136a0:	4298      	cmp	r0, r3
 80136a2:	bfb8      	it	lt
 80136a4:	4618      	movlt	r0, r3
 80136a6:	e7a6      	b.n	80135f6 <_printf_i+0x166>
 80136a8:	2301      	movs	r3, #1
 80136aa:	4632      	mov	r2, r6
 80136ac:	4649      	mov	r1, r9
 80136ae:	4640      	mov	r0, r8
 80136b0:	47d0      	blx	sl
 80136b2:	3001      	adds	r0, #1
 80136b4:	d09d      	beq.n	80135f2 <_printf_i+0x162>
 80136b6:	3501      	adds	r5, #1
 80136b8:	68e3      	ldr	r3, [r4, #12]
 80136ba:	9903      	ldr	r1, [sp, #12]
 80136bc:	1a5b      	subs	r3, r3, r1
 80136be:	42ab      	cmp	r3, r5
 80136c0:	dcf2      	bgt.n	80136a8 <_printf_i+0x218>
 80136c2:	e7eb      	b.n	801369c <_printf_i+0x20c>
 80136c4:	2500      	movs	r5, #0
 80136c6:	f104 0619 	add.w	r6, r4, #25
 80136ca:	e7f5      	b.n	80136b8 <_printf_i+0x228>
 80136cc:	08016382 	.word	0x08016382
 80136d0:	08016393 	.word	0x08016393

080136d4 <std>:
 80136d4:	2300      	movs	r3, #0
 80136d6:	b510      	push	{r4, lr}
 80136d8:	4604      	mov	r4, r0
 80136da:	e9c0 3300 	strd	r3, r3, [r0]
 80136de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80136e2:	6083      	str	r3, [r0, #8]
 80136e4:	8181      	strh	r1, [r0, #12]
 80136e6:	6643      	str	r3, [r0, #100]	; 0x64
 80136e8:	81c2      	strh	r2, [r0, #14]
 80136ea:	6183      	str	r3, [r0, #24]
 80136ec:	4619      	mov	r1, r3
 80136ee:	2208      	movs	r2, #8
 80136f0:	305c      	adds	r0, #92	; 0x5c
 80136f2:	f000 fa05 	bl	8013b00 <memset>
 80136f6:	4b05      	ldr	r3, [pc, #20]	; (801370c <std+0x38>)
 80136f8:	6224      	str	r4, [r4, #32]
 80136fa:	6263      	str	r3, [r4, #36]	; 0x24
 80136fc:	4b04      	ldr	r3, [pc, #16]	; (8013710 <std+0x3c>)
 80136fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8013700:	4b04      	ldr	r3, [pc, #16]	; (8013714 <std+0x40>)
 8013702:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013704:	4b04      	ldr	r3, [pc, #16]	; (8013718 <std+0x44>)
 8013706:	6323      	str	r3, [r4, #48]	; 0x30
 8013708:	bd10      	pop	{r4, pc}
 801370a:	bf00      	nop
 801370c:	08013951 	.word	0x08013951
 8013710:	08013973 	.word	0x08013973
 8013714:	080139ab 	.word	0x080139ab
 8013718:	080139cf 	.word	0x080139cf

0801371c <stdio_exit_handler>:
 801371c:	4a02      	ldr	r2, [pc, #8]	; (8013728 <stdio_exit_handler+0xc>)
 801371e:	4903      	ldr	r1, [pc, #12]	; (801372c <stdio_exit_handler+0x10>)
 8013720:	4803      	ldr	r0, [pc, #12]	; (8013730 <stdio_exit_handler+0x14>)
 8013722:	f000 b869 	b.w	80137f8 <_fwalk_sglue>
 8013726:	bf00      	nop
 8013728:	20000040 	.word	0x20000040
 801372c:	080156e9 	.word	0x080156e9
 8013730:	2000004c 	.word	0x2000004c

08013734 <cleanup_stdio>:
 8013734:	6841      	ldr	r1, [r0, #4]
 8013736:	4b0c      	ldr	r3, [pc, #48]	; (8013768 <cleanup_stdio+0x34>)
 8013738:	b510      	push	{r4, lr}
 801373a:	4299      	cmp	r1, r3
 801373c:	4604      	mov	r4, r0
 801373e:	d001      	beq.n	8013744 <cleanup_stdio+0x10>
 8013740:	f001 ffd2 	bl	80156e8 <_fflush_r>
 8013744:	68a1      	ldr	r1, [r4, #8]
 8013746:	4b09      	ldr	r3, [pc, #36]	; (801376c <cleanup_stdio+0x38>)
 8013748:	4299      	cmp	r1, r3
 801374a:	d002      	beq.n	8013752 <cleanup_stdio+0x1e>
 801374c:	4620      	mov	r0, r4
 801374e:	f001 ffcb 	bl	80156e8 <_fflush_r>
 8013752:	68e1      	ldr	r1, [r4, #12]
 8013754:	4b06      	ldr	r3, [pc, #24]	; (8013770 <cleanup_stdio+0x3c>)
 8013756:	4299      	cmp	r1, r3
 8013758:	d004      	beq.n	8013764 <cleanup_stdio+0x30>
 801375a:	4620      	mov	r0, r4
 801375c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013760:	f001 bfc2 	b.w	80156e8 <_fflush_r>
 8013764:	bd10      	pop	{r4, pc}
 8013766:	bf00      	nop
 8013768:	200027dc 	.word	0x200027dc
 801376c:	20002844 	.word	0x20002844
 8013770:	200028ac 	.word	0x200028ac

08013774 <global_stdio_init.part.0>:
 8013774:	b510      	push	{r4, lr}
 8013776:	4b0b      	ldr	r3, [pc, #44]	; (80137a4 <global_stdio_init.part.0+0x30>)
 8013778:	4c0b      	ldr	r4, [pc, #44]	; (80137a8 <global_stdio_init.part.0+0x34>)
 801377a:	4a0c      	ldr	r2, [pc, #48]	; (80137ac <global_stdio_init.part.0+0x38>)
 801377c:	4620      	mov	r0, r4
 801377e:	601a      	str	r2, [r3, #0]
 8013780:	2104      	movs	r1, #4
 8013782:	2200      	movs	r2, #0
 8013784:	f7ff ffa6 	bl	80136d4 <std>
 8013788:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801378c:	2201      	movs	r2, #1
 801378e:	2109      	movs	r1, #9
 8013790:	f7ff ffa0 	bl	80136d4 <std>
 8013794:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013798:	2202      	movs	r2, #2
 801379a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801379e:	2112      	movs	r1, #18
 80137a0:	f7ff bf98 	b.w	80136d4 <std>
 80137a4:	20002914 	.word	0x20002914
 80137a8:	200027dc 	.word	0x200027dc
 80137ac:	0801371d 	.word	0x0801371d

080137b0 <__sfp_lock_acquire>:
 80137b0:	4801      	ldr	r0, [pc, #4]	; (80137b8 <__sfp_lock_acquire+0x8>)
 80137b2:	f000 ba31 	b.w	8013c18 <__retarget_lock_acquire_recursive>
 80137b6:	bf00      	nop
 80137b8:	2000291d 	.word	0x2000291d

080137bc <__sfp_lock_release>:
 80137bc:	4801      	ldr	r0, [pc, #4]	; (80137c4 <__sfp_lock_release+0x8>)
 80137be:	f000 ba2c 	b.w	8013c1a <__retarget_lock_release_recursive>
 80137c2:	bf00      	nop
 80137c4:	2000291d 	.word	0x2000291d

080137c8 <__sinit>:
 80137c8:	b510      	push	{r4, lr}
 80137ca:	4604      	mov	r4, r0
 80137cc:	f7ff fff0 	bl	80137b0 <__sfp_lock_acquire>
 80137d0:	6a23      	ldr	r3, [r4, #32]
 80137d2:	b11b      	cbz	r3, 80137dc <__sinit+0x14>
 80137d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137d8:	f7ff bff0 	b.w	80137bc <__sfp_lock_release>
 80137dc:	4b04      	ldr	r3, [pc, #16]	; (80137f0 <__sinit+0x28>)
 80137de:	6223      	str	r3, [r4, #32]
 80137e0:	4b04      	ldr	r3, [pc, #16]	; (80137f4 <__sinit+0x2c>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d1f5      	bne.n	80137d4 <__sinit+0xc>
 80137e8:	f7ff ffc4 	bl	8013774 <global_stdio_init.part.0>
 80137ec:	e7f2      	b.n	80137d4 <__sinit+0xc>
 80137ee:	bf00      	nop
 80137f0:	08013735 	.word	0x08013735
 80137f4:	20002914 	.word	0x20002914

080137f8 <_fwalk_sglue>:
 80137f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137fc:	4607      	mov	r7, r0
 80137fe:	4688      	mov	r8, r1
 8013800:	4614      	mov	r4, r2
 8013802:	2600      	movs	r6, #0
 8013804:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013808:	f1b9 0901 	subs.w	r9, r9, #1
 801380c:	d505      	bpl.n	801381a <_fwalk_sglue+0x22>
 801380e:	6824      	ldr	r4, [r4, #0]
 8013810:	2c00      	cmp	r4, #0
 8013812:	d1f7      	bne.n	8013804 <_fwalk_sglue+0xc>
 8013814:	4630      	mov	r0, r6
 8013816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801381a:	89ab      	ldrh	r3, [r5, #12]
 801381c:	2b01      	cmp	r3, #1
 801381e:	d907      	bls.n	8013830 <_fwalk_sglue+0x38>
 8013820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013824:	3301      	adds	r3, #1
 8013826:	d003      	beq.n	8013830 <_fwalk_sglue+0x38>
 8013828:	4629      	mov	r1, r5
 801382a:	4638      	mov	r0, r7
 801382c:	47c0      	blx	r8
 801382e:	4306      	orrs	r6, r0
 8013830:	3568      	adds	r5, #104	; 0x68
 8013832:	e7e9      	b.n	8013808 <_fwalk_sglue+0x10>

08013834 <iprintf>:
 8013834:	b40f      	push	{r0, r1, r2, r3}
 8013836:	b507      	push	{r0, r1, r2, lr}
 8013838:	4906      	ldr	r1, [pc, #24]	; (8013854 <iprintf+0x20>)
 801383a:	ab04      	add	r3, sp, #16
 801383c:	6808      	ldr	r0, [r1, #0]
 801383e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013842:	6881      	ldr	r1, [r0, #8]
 8013844:	9301      	str	r3, [sp, #4]
 8013846:	f001 fdb3 	bl	80153b0 <_vfiprintf_r>
 801384a:	b003      	add	sp, #12
 801384c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013850:	b004      	add	sp, #16
 8013852:	4770      	bx	lr
 8013854:	20000098 	.word	0x20000098

08013858 <_puts_r>:
 8013858:	6a03      	ldr	r3, [r0, #32]
 801385a:	b570      	push	{r4, r5, r6, lr}
 801385c:	4605      	mov	r5, r0
 801385e:	460e      	mov	r6, r1
 8013860:	6884      	ldr	r4, [r0, #8]
 8013862:	b90b      	cbnz	r3, 8013868 <_puts_r+0x10>
 8013864:	f7ff ffb0 	bl	80137c8 <__sinit>
 8013868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801386a:	07db      	lsls	r3, r3, #31
 801386c:	d405      	bmi.n	801387a <_puts_r+0x22>
 801386e:	89a3      	ldrh	r3, [r4, #12]
 8013870:	0598      	lsls	r0, r3, #22
 8013872:	d402      	bmi.n	801387a <_puts_r+0x22>
 8013874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013876:	f000 f9cf 	bl	8013c18 <__retarget_lock_acquire_recursive>
 801387a:	89a3      	ldrh	r3, [r4, #12]
 801387c:	0719      	lsls	r1, r3, #28
 801387e:	d513      	bpl.n	80138a8 <_puts_r+0x50>
 8013880:	6923      	ldr	r3, [r4, #16]
 8013882:	b18b      	cbz	r3, 80138a8 <_puts_r+0x50>
 8013884:	3e01      	subs	r6, #1
 8013886:	68a3      	ldr	r3, [r4, #8]
 8013888:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801388c:	3b01      	subs	r3, #1
 801388e:	60a3      	str	r3, [r4, #8]
 8013890:	b9e9      	cbnz	r1, 80138ce <_puts_r+0x76>
 8013892:	2b00      	cmp	r3, #0
 8013894:	da2e      	bge.n	80138f4 <_puts_r+0x9c>
 8013896:	4622      	mov	r2, r4
 8013898:	210a      	movs	r1, #10
 801389a:	4628      	mov	r0, r5
 801389c:	f000 f89b 	bl	80139d6 <__swbuf_r>
 80138a0:	3001      	adds	r0, #1
 80138a2:	d007      	beq.n	80138b4 <_puts_r+0x5c>
 80138a4:	250a      	movs	r5, #10
 80138a6:	e007      	b.n	80138b8 <_puts_r+0x60>
 80138a8:	4621      	mov	r1, r4
 80138aa:	4628      	mov	r0, r5
 80138ac:	f000 f8d0 	bl	8013a50 <__swsetup_r>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	d0e7      	beq.n	8013884 <_puts_r+0x2c>
 80138b4:	f04f 35ff 	mov.w	r5, #4294967295
 80138b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80138ba:	07da      	lsls	r2, r3, #31
 80138bc:	d405      	bmi.n	80138ca <_puts_r+0x72>
 80138be:	89a3      	ldrh	r3, [r4, #12]
 80138c0:	059b      	lsls	r3, r3, #22
 80138c2:	d402      	bmi.n	80138ca <_puts_r+0x72>
 80138c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138c6:	f000 f9a8 	bl	8013c1a <__retarget_lock_release_recursive>
 80138ca:	4628      	mov	r0, r5
 80138cc:	bd70      	pop	{r4, r5, r6, pc}
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	da04      	bge.n	80138dc <_puts_r+0x84>
 80138d2:	69a2      	ldr	r2, [r4, #24]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	dc06      	bgt.n	80138e6 <_puts_r+0x8e>
 80138d8:	290a      	cmp	r1, #10
 80138da:	d004      	beq.n	80138e6 <_puts_r+0x8e>
 80138dc:	6823      	ldr	r3, [r4, #0]
 80138de:	1c5a      	adds	r2, r3, #1
 80138e0:	6022      	str	r2, [r4, #0]
 80138e2:	7019      	strb	r1, [r3, #0]
 80138e4:	e7cf      	b.n	8013886 <_puts_r+0x2e>
 80138e6:	4622      	mov	r2, r4
 80138e8:	4628      	mov	r0, r5
 80138ea:	f000 f874 	bl	80139d6 <__swbuf_r>
 80138ee:	3001      	adds	r0, #1
 80138f0:	d1c9      	bne.n	8013886 <_puts_r+0x2e>
 80138f2:	e7df      	b.n	80138b4 <_puts_r+0x5c>
 80138f4:	250a      	movs	r5, #10
 80138f6:	6823      	ldr	r3, [r4, #0]
 80138f8:	1c5a      	adds	r2, r3, #1
 80138fa:	6022      	str	r2, [r4, #0]
 80138fc:	701d      	strb	r5, [r3, #0]
 80138fe:	e7db      	b.n	80138b8 <_puts_r+0x60>

08013900 <puts>:
 8013900:	4b02      	ldr	r3, [pc, #8]	; (801390c <puts+0xc>)
 8013902:	4601      	mov	r1, r0
 8013904:	6818      	ldr	r0, [r3, #0]
 8013906:	f7ff bfa7 	b.w	8013858 <_puts_r>
 801390a:	bf00      	nop
 801390c:	20000098 	.word	0x20000098

08013910 <siprintf>:
 8013910:	b40e      	push	{r1, r2, r3}
 8013912:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013916:	b500      	push	{lr}
 8013918:	b09c      	sub	sp, #112	; 0x70
 801391a:	ab1d      	add	r3, sp, #116	; 0x74
 801391c:	9002      	str	r0, [sp, #8]
 801391e:	9006      	str	r0, [sp, #24]
 8013920:	9107      	str	r1, [sp, #28]
 8013922:	9104      	str	r1, [sp, #16]
 8013924:	4808      	ldr	r0, [pc, #32]	; (8013948 <siprintf+0x38>)
 8013926:	4909      	ldr	r1, [pc, #36]	; (801394c <siprintf+0x3c>)
 8013928:	f853 2b04 	ldr.w	r2, [r3], #4
 801392c:	9105      	str	r1, [sp, #20]
 801392e:	6800      	ldr	r0, [r0, #0]
 8013930:	a902      	add	r1, sp, #8
 8013932:	9301      	str	r3, [sp, #4]
 8013934:	f001 fc16 	bl	8015164 <_svfiprintf_r>
 8013938:	2200      	movs	r2, #0
 801393a:	9b02      	ldr	r3, [sp, #8]
 801393c:	701a      	strb	r2, [r3, #0]
 801393e:	b01c      	add	sp, #112	; 0x70
 8013940:	f85d eb04 	ldr.w	lr, [sp], #4
 8013944:	b003      	add	sp, #12
 8013946:	4770      	bx	lr
 8013948:	20000098 	.word	0x20000098
 801394c:	ffff0208 	.word	0xffff0208

08013950 <__sread>:
 8013950:	b510      	push	{r4, lr}
 8013952:	460c      	mov	r4, r1
 8013954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013958:	f000 f900 	bl	8013b5c <_read_r>
 801395c:	2800      	cmp	r0, #0
 801395e:	bfab      	itete	ge
 8013960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013962:	89a3      	ldrhlt	r3, [r4, #12]
 8013964:	181b      	addge	r3, r3, r0
 8013966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801396a:	bfac      	ite	ge
 801396c:	6563      	strge	r3, [r4, #84]	; 0x54
 801396e:	81a3      	strhlt	r3, [r4, #12]
 8013970:	bd10      	pop	{r4, pc}

08013972 <__swrite>:
 8013972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013976:	461f      	mov	r7, r3
 8013978:	898b      	ldrh	r3, [r1, #12]
 801397a:	4605      	mov	r5, r0
 801397c:	05db      	lsls	r3, r3, #23
 801397e:	460c      	mov	r4, r1
 8013980:	4616      	mov	r6, r2
 8013982:	d505      	bpl.n	8013990 <__swrite+0x1e>
 8013984:	2302      	movs	r3, #2
 8013986:	2200      	movs	r2, #0
 8013988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801398c:	f000 f8d4 	bl	8013b38 <_lseek_r>
 8013990:	89a3      	ldrh	r3, [r4, #12]
 8013992:	4632      	mov	r2, r6
 8013994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013998:	81a3      	strh	r3, [r4, #12]
 801399a:	4628      	mov	r0, r5
 801399c:	463b      	mov	r3, r7
 801399e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80139a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139a6:	f000 b8fb 	b.w	8013ba0 <_write_r>

080139aa <__sseek>:
 80139aa:	b510      	push	{r4, lr}
 80139ac:	460c      	mov	r4, r1
 80139ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139b2:	f000 f8c1 	bl	8013b38 <_lseek_r>
 80139b6:	1c43      	adds	r3, r0, #1
 80139b8:	89a3      	ldrh	r3, [r4, #12]
 80139ba:	bf15      	itete	ne
 80139bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80139be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80139c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80139c6:	81a3      	strheq	r3, [r4, #12]
 80139c8:	bf18      	it	ne
 80139ca:	81a3      	strhne	r3, [r4, #12]
 80139cc:	bd10      	pop	{r4, pc}

080139ce <__sclose>:
 80139ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139d2:	f000 b8a1 	b.w	8013b18 <_close_r>

080139d6 <__swbuf_r>:
 80139d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139d8:	460e      	mov	r6, r1
 80139da:	4614      	mov	r4, r2
 80139dc:	4605      	mov	r5, r0
 80139de:	b118      	cbz	r0, 80139e8 <__swbuf_r+0x12>
 80139e0:	6a03      	ldr	r3, [r0, #32]
 80139e2:	b90b      	cbnz	r3, 80139e8 <__swbuf_r+0x12>
 80139e4:	f7ff fef0 	bl	80137c8 <__sinit>
 80139e8:	69a3      	ldr	r3, [r4, #24]
 80139ea:	60a3      	str	r3, [r4, #8]
 80139ec:	89a3      	ldrh	r3, [r4, #12]
 80139ee:	071a      	lsls	r2, r3, #28
 80139f0:	d525      	bpl.n	8013a3e <__swbuf_r+0x68>
 80139f2:	6923      	ldr	r3, [r4, #16]
 80139f4:	b31b      	cbz	r3, 8013a3e <__swbuf_r+0x68>
 80139f6:	6823      	ldr	r3, [r4, #0]
 80139f8:	6922      	ldr	r2, [r4, #16]
 80139fa:	b2f6      	uxtb	r6, r6
 80139fc:	1a98      	subs	r0, r3, r2
 80139fe:	6963      	ldr	r3, [r4, #20]
 8013a00:	4637      	mov	r7, r6
 8013a02:	4283      	cmp	r3, r0
 8013a04:	dc04      	bgt.n	8013a10 <__swbuf_r+0x3a>
 8013a06:	4621      	mov	r1, r4
 8013a08:	4628      	mov	r0, r5
 8013a0a:	f001 fe6d 	bl	80156e8 <_fflush_r>
 8013a0e:	b9e0      	cbnz	r0, 8013a4a <__swbuf_r+0x74>
 8013a10:	68a3      	ldr	r3, [r4, #8]
 8013a12:	3b01      	subs	r3, #1
 8013a14:	60a3      	str	r3, [r4, #8]
 8013a16:	6823      	ldr	r3, [r4, #0]
 8013a18:	1c5a      	adds	r2, r3, #1
 8013a1a:	6022      	str	r2, [r4, #0]
 8013a1c:	701e      	strb	r6, [r3, #0]
 8013a1e:	6962      	ldr	r2, [r4, #20]
 8013a20:	1c43      	adds	r3, r0, #1
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d004      	beq.n	8013a30 <__swbuf_r+0x5a>
 8013a26:	89a3      	ldrh	r3, [r4, #12]
 8013a28:	07db      	lsls	r3, r3, #31
 8013a2a:	d506      	bpl.n	8013a3a <__swbuf_r+0x64>
 8013a2c:	2e0a      	cmp	r6, #10
 8013a2e:	d104      	bne.n	8013a3a <__swbuf_r+0x64>
 8013a30:	4621      	mov	r1, r4
 8013a32:	4628      	mov	r0, r5
 8013a34:	f001 fe58 	bl	80156e8 <_fflush_r>
 8013a38:	b938      	cbnz	r0, 8013a4a <__swbuf_r+0x74>
 8013a3a:	4638      	mov	r0, r7
 8013a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a3e:	4621      	mov	r1, r4
 8013a40:	4628      	mov	r0, r5
 8013a42:	f000 f805 	bl	8013a50 <__swsetup_r>
 8013a46:	2800      	cmp	r0, #0
 8013a48:	d0d5      	beq.n	80139f6 <__swbuf_r+0x20>
 8013a4a:	f04f 37ff 	mov.w	r7, #4294967295
 8013a4e:	e7f4      	b.n	8013a3a <__swbuf_r+0x64>

08013a50 <__swsetup_r>:
 8013a50:	b538      	push	{r3, r4, r5, lr}
 8013a52:	4b2a      	ldr	r3, [pc, #168]	; (8013afc <__swsetup_r+0xac>)
 8013a54:	4605      	mov	r5, r0
 8013a56:	6818      	ldr	r0, [r3, #0]
 8013a58:	460c      	mov	r4, r1
 8013a5a:	b118      	cbz	r0, 8013a64 <__swsetup_r+0x14>
 8013a5c:	6a03      	ldr	r3, [r0, #32]
 8013a5e:	b90b      	cbnz	r3, 8013a64 <__swsetup_r+0x14>
 8013a60:	f7ff feb2 	bl	80137c8 <__sinit>
 8013a64:	89a3      	ldrh	r3, [r4, #12]
 8013a66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a6a:	0718      	lsls	r0, r3, #28
 8013a6c:	d422      	bmi.n	8013ab4 <__swsetup_r+0x64>
 8013a6e:	06d9      	lsls	r1, r3, #27
 8013a70:	d407      	bmi.n	8013a82 <__swsetup_r+0x32>
 8013a72:	2309      	movs	r3, #9
 8013a74:	602b      	str	r3, [r5, #0]
 8013a76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a7e:	81a3      	strh	r3, [r4, #12]
 8013a80:	e034      	b.n	8013aec <__swsetup_r+0x9c>
 8013a82:	0758      	lsls	r0, r3, #29
 8013a84:	d512      	bpl.n	8013aac <__swsetup_r+0x5c>
 8013a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a88:	b141      	cbz	r1, 8013a9c <__swsetup_r+0x4c>
 8013a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a8e:	4299      	cmp	r1, r3
 8013a90:	d002      	beq.n	8013a98 <__swsetup_r+0x48>
 8013a92:	4628      	mov	r0, r5
 8013a94:	f000 ff4c 	bl	8014930 <_free_r>
 8013a98:	2300      	movs	r3, #0
 8013a9a:	6363      	str	r3, [r4, #52]	; 0x34
 8013a9c:	89a3      	ldrh	r3, [r4, #12]
 8013a9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013aa2:	81a3      	strh	r3, [r4, #12]
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	6063      	str	r3, [r4, #4]
 8013aa8:	6923      	ldr	r3, [r4, #16]
 8013aaa:	6023      	str	r3, [r4, #0]
 8013aac:	89a3      	ldrh	r3, [r4, #12]
 8013aae:	f043 0308 	orr.w	r3, r3, #8
 8013ab2:	81a3      	strh	r3, [r4, #12]
 8013ab4:	6923      	ldr	r3, [r4, #16]
 8013ab6:	b94b      	cbnz	r3, 8013acc <__swsetup_r+0x7c>
 8013ab8:	89a3      	ldrh	r3, [r4, #12]
 8013aba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ac2:	d003      	beq.n	8013acc <__swsetup_r+0x7c>
 8013ac4:	4621      	mov	r1, r4
 8013ac6:	4628      	mov	r0, r5
 8013ac8:	f001 fe5b 	bl	8015782 <__smakebuf_r>
 8013acc:	89a0      	ldrh	r0, [r4, #12]
 8013ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ad2:	f010 0301 	ands.w	r3, r0, #1
 8013ad6:	d00a      	beq.n	8013aee <__swsetup_r+0x9e>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	60a3      	str	r3, [r4, #8]
 8013adc:	6963      	ldr	r3, [r4, #20]
 8013ade:	425b      	negs	r3, r3
 8013ae0:	61a3      	str	r3, [r4, #24]
 8013ae2:	6923      	ldr	r3, [r4, #16]
 8013ae4:	b943      	cbnz	r3, 8013af8 <__swsetup_r+0xa8>
 8013ae6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013aea:	d1c4      	bne.n	8013a76 <__swsetup_r+0x26>
 8013aec:	bd38      	pop	{r3, r4, r5, pc}
 8013aee:	0781      	lsls	r1, r0, #30
 8013af0:	bf58      	it	pl
 8013af2:	6963      	ldrpl	r3, [r4, #20]
 8013af4:	60a3      	str	r3, [r4, #8]
 8013af6:	e7f4      	b.n	8013ae2 <__swsetup_r+0x92>
 8013af8:	2000      	movs	r0, #0
 8013afa:	e7f7      	b.n	8013aec <__swsetup_r+0x9c>
 8013afc:	20000098 	.word	0x20000098

08013b00 <memset>:
 8013b00:	4603      	mov	r3, r0
 8013b02:	4402      	add	r2, r0
 8013b04:	4293      	cmp	r3, r2
 8013b06:	d100      	bne.n	8013b0a <memset+0xa>
 8013b08:	4770      	bx	lr
 8013b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8013b0e:	e7f9      	b.n	8013b04 <memset+0x4>

08013b10 <_localeconv_r>:
 8013b10:	4800      	ldr	r0, [pc, #0]	; (8013b14 <_localeconv_r+0x4>)
 8013b12:	4770      	bx	lr
 8013b14:	2000018c 	.word	0x2000018c

08013b18 <_close_r>:
 8013b18:	b538      	push	{r3, r4, r5, lr}
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	4d05      	ldr	r5, [pc, #20]	; (8013b34 <_close_r+0x1c>)
 8013b1e:	4604      	mov	r4, r0
 8013b20:	4608      	mov	r0, r1
 8013b22:	602b      	str	r3, [r5, #0]
 8013b24:	f7f1 ff2a 	bl	800597c <_close>
 8013b28:	1c43      	adds	r3, r0, #1
 8013b2a:	d102      	bne.n	8013b32 <_close_r+0x1a>
 8013b2c:	682b      	ldr	r3, [r5, #0]
 8013b2e:	b103      	cbz	r3, 8013b32 <_close_r+0x1a>
 8013b30:	6023      	str	r3, [r4, #0]
 8013b32:	bd38      	pop	{r3, r4, r5, pc}
 8013b34:	20002918 	.word	0x20002918

08013b38 <_lseek_r>:
 8013b38:	b538      	push	{r3, r4, r5, lr}
 8013b3a:	4604      	mov	r4, r0
 8013b3c:	4608      	mov	r0, r1
 8013b3e:	4611      	mov	r1, r2
 8013b40:	2200      	movs	r2, #0
 8013b42:	4d05      	ldr	r5, [pc, #20]	; (8013b58 <_lseek_r+0x20>)
 8013b44:	602a      	str	r2, [r5, #0]
 8013b46:	461a      	mov	r2, r3
 8013b48:	f7f1 ff3c 	bl	80059c4 <_lseek>
 8013b4c:	1c43      	adds	r3, r0, #1
 8013b4e:	d102      	bne.n	8013b56 <_lseek_r+0x1e>
 8013b50:	682b      	ldr	r3, [r5, #0]
 8013b52:	b103      	cbz	r3, 8013b56 <_lseek_r+0x1e>
 8013b54:	6023      	str	r3, [r4, #0]
 8013b56:	bd38      	pop	{r3, r4, r5, pc}
 8013b58:	20002918 	.word	0x20002918

08013b5c <_read_r>:
 8013b5c:	b538      	push	{r3, r4, r5, lr}
 8013b5e:	4604      	mov	r4, r0
 8013b60:	4608      	mov	r0, r1
 8013b62:	4611      	mov	r1, r2
 8013b64:	2200      	movs	r2, #0
 8013b66:	4d05      	ldr	r5, [pc, #20]	; (8013b7c <_read_r+0x20>)
 8013b68:	602a      	str	r2, [r5, #0]
 8013b6a:	461a      	mov	r2, r3
 8013b6c:	f7f1 fecd 	bl	800590a <_read>
 8013b70:	1c43      	adds	r3, r0, #1
 8013b72:	d102      	bne.n	8013b7a <_read_r+0x1e>
 8013b74:	682b      	ldr	r3, [r5, #0]
 8013b76:	b103      	cbz	r3, 8013b7a <_read_r+0x1e>
 8013b78:	6023      	str	r3, [r4, #0]
 8013b7a:	bd38      	pop	{r3, r4, r5, pc}
 8013b7c:	20002918 	.word	0x20002918

08013b80 <_sbrk_r>:
 8013b80:	b538      	push	{r3, r4, r5, lr}
 8013b82:	2300      	movs	r3, #0
 8013b84:	4d05      	ldr	r5, [pc, #20]	; (8013b9c <_sbrk_r+0x1c>)
 8013b86:	4604      	mov	r4, r0
 8013b88:	4608      	mov	r0, r1
 8013b8a:	602b      	str	r3, [r5, #0]
 8013b8c:	f7f1 ff26 	bl	80059dc <_sbrk>
 8013b90:	1c43      	adds	r3, r0, #1
 8013b92:	d102      	bne.n	8013b9a <_sbrk_r+0x1a>
 8013b94:	682b      	ldr	r3, [r5, #0]
 8013b96:	b103      	cbz	r3, 8013b9a <_sbrk_r+0x1a>
 8013b98:	6023      	str	r3, [r4, #0]
 8013b9a:	bd38      	pop	{r3, r4, r5, pc}
 8013b9c:	20002918 	.word	0x20002918

08013ba0 <_write_r>:
 8013ba0:	b538      	push	{r3, r4, r5, lr}
 8013ba2:	4604      	mov	r4, r0
 8013ba4:	4608      	mov	r0, r1
 8013ba6:	4611      	mov	r1, r2
 8013ba8:	2200      	movs	r2, #0
 8013baa:	4d05      	ldr	r5, [pc, #20]	; (8013bc0 <_write_r+0x20>)
 8013bac:	602a      	str	r2, [r5, #0]
 8013bae:	461a      	mov	r2, r3
 8013bb0:	f7f1 fec8 	bl	8005944 <_write>
 8013bb4:	1c43      	adds	r3, r0, #1
 8013bb6:	d102      	bne.n	8013bbe <_write_r+0x1e>
 8013bb8:	682b      	ldr	r3, [r5, #0]
 8013bba:	b103      	cbz	r3, 8013bbe <_write_r+0x1e>
 8013bbc:	6023      	str	r3, [r4, #0]
 8013bbe:	bd38      	pop	{r3, r4, r5, pc}
 8013bc0:	20002918 	.word	0x20002918

08013bc4 <__errno>:
 8013bc4:	4b01      	ldr	r3, [pc, #4]	; (8013bcc <__errno+0x8>)
 8013bc6:	6818      	ldr	r0, [r3, #0]
 8013bc8:	4770      	bx	lr
 8013bca:	bf00      	nop
 8013bcc:	20000098 	.word	0x20000098

08013bd0 <__libc_init_array>:
 8013bd0:	b570      	push	{r4, r5, r6, lr}
 8013bd2:	2600      	movs	r6, #0
 8013bd4:	4d0c      	ldr	r5, [pc, #48]	; (8013c08 <__libc_init_array+0x38>)
 8013bd6:	4c0d      	ldr	r4, [pc, #52]	; (8013c0c <__libc_init_array+0x3c>)
 8013bd8:	1b64      	subs	r4, r4, r5
 8013bda:	10a4      	asrs	r4, r4, #2
 8013bdc:	42a6      	cmp	r6, r4
 8013bde:	d109      	bne.n	8013bf4 <__libc_init_array+0x24>
 8013be0:	f001 ff1a 	bl	8015a18 <_init>
 8013be4:	2600      	movs	r6, #0
 8013be6:	4d0a      	ldr	r5, [pc, #40]	; (8013c10 <__libc_init_array+0x40>)
 8013be8:	4c0a      	ldr	r4, [pc, #40]	; (8013c14 <__libc_init_array+0x44>)
 8013bea:	1b64      	subs	r4, r4, r5
 8013bec:	10a4      	asrs	r4, r4, #2
 8013bee:	42a6      	cmp	r6, r4
 8013bf0:	d105      	bne.n	8013bfe <__libc_init_array+0x2e>
 8013bf2:	bd70      	pop	{r4, r5, r6, pc}
 8013bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013bf8:	4798      	blx	r3
 8013bfa:	3601      	adds	r6, #1
 8013bfc:	e7ee      	b.n	8013bdc <__libc_init_array+0xc>
 8013bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c02:	4798      	blx	r3
 8013c04:	3601      	adds	r6, #1
 8013c06:	e7f2      	b.n	8013bee <__libc_init_array+0x1e>
 8013c08:	080166e4 	.word	0x080166e4
 8013c0c:	080166e4 	.word	0x080166e4
 8013c10:	080166e4 	.word	0x080166e4
 8013c14:	080166e8 	.word	0x080166e8

08013c18 <__retarget_lock_acquire_recursive>:
 8013c18:	4770      	bx	lr

08013c1a <__retarget_lock_release_recursive>:
 8013c1a:	4770      	bx	lr

08013c1c <memchr>:
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	b510      	push	{r4, lr}
 8013c20:	b2c9      	uxtb	r1, r1
 8013c22:	4402      	add	r2, r0
 8013c24:	4293      	cmp	r3, r2
 8013c26:	4618      	mov	r0, r3
 8013c28:	d101      	bne.n	8013c2e <memchr+0x12>
 8013c2a:	2000      	movs	r0, #0
 8013c2c:	e003      	b.n	8013c36 <memchr+0x1a>
 8013c2e:	7804      	ldrb	r4, [r0, #0]
 8013c30:	3301      	adds	r3, #1
 8013c32:	428c      	cmp	r4, r1
 8013c34:	d1f6      	bne.n	8013c24 <memchr+0x8>
 8013c36:	bd10      	pop	{r4, pc}

08013c38 <memcpy>:
 8013c38:	440a      	add	r2, r1
 8013c3a:	4291      	cmp	r1, r2
 8013c3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013c40:	d100      	bne.n	8013c44 <memcpy+0xc>
 8013c42:	4770      	bx	lr
 8013c44:	b510      	push	{r4, lr}
 8013c46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c4a:	4291      	cmp	r1, r2
 8013c4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c50:	d1f9      	bne.n	8013c46 <memcpy+0xe>
 8013c52:	bd10      	pop	{r4, pc}

08013c54 <quorem>:
 8013c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c58:	6903      	ldr	r3, [r0, #16]
 8013c5a:	690c      	ldr	r4, [r1, #16]
 8013c5c:	4607      	mov	r7, r0
 8013c5e:	42a3      	cmp	r3, r4
 8013c60:	db7f      	blt.n	8013d62 <quorem+0x10e>
 8013c62:	3c01      	subs	r4, #1
 8013c64:	f100 0514 	add.w	r5, r0, #20
 8013c68:	f101 0814 	add.w	r8, r1, #20
 8013c6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013c70:	9301      	str	r3, [sp, #4]
 8013c72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013c76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8013c82:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013c86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013c8a:	d331      	bcc.n	8013cf0 <quorem+0x9c>
 8013c8c:	f04f 0e00 	mov.w	lr, #0
 8013c90:	4640      	mov	r0, r8
 8013c92:	46ac      	mov	ip, r5
 8013c94:	46f2      	mov	sl, lr
 8013c96:	f850 2b04 	ldr.w	r2, [r0], #4
 8013c9a:	b293      	uxth	r3, r2
 8013c9c:	fb06 e303 	mla	r3, r6, r3, lr
 8013ca0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013ca4:	0c1a      	lsrs	r2, r3, #16
 8013ca6:	b29b      	uxth	r3, r3
 8013ca8:	fb06 220e 	mla	r2, r6, lr, r2
 8013cac:	ebaa 0303 	sub.w	r3, sl, r3
 8013cb0:	f8dc a000 	ldr.w	sl, [ip]
 8013cb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013cb8:	fa1f fa8a 	uxth.w	sl, sl
 8013cbc:	4453      	add	r3, sl
 8013cbe:	f8dc a000 	ldr.w	sl, [ip]
 8013cc2:	b292      	uxth	r2, r2
 8013cc4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013cc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013ccc:	b29b      	uxth	r3, r3
 8013cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013cd2:	4581      	cmp	r9, r0
 8013cd4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013cd8:	f84c 3b04 	str.w	r3, [ip], #4
 8013cdc:	d2db      	bcs.n	8013c96 <quorem+0x42>
 8013cde:	f855 300b 	ldr.w	r3, [r5, fp]
 8013ce2:	b92b      	cbnz	r3, 8013cf0 <quorem+0x9c>
 8013ce4:	9b01      	ldr	r3, [sp, #4]
 8013ce6:	3b04      	subs	r3, #4
 8013ce8:	429d      	cmp	r5, r3
 8013cea:	461a      	mov	r2, r3
 8013cec:	d32d      	bcc.n	8013d4a <quorem+0xf6>
 8013cee:	613c      	str	r4, [r7, #16]
 8013cf0:	4638      	mov	r0, r7
 8013cf2:	f001 f8df 	bl	8014eb4 <__mcmp>
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	db23      	blt.n	8013d42 <quorem+0xee>
 8013cfa:	4629      	mov	r1, r5
 8013cfc:	2000      	movs	r0, #0
 8013cfe:	3601      	adds	r6, #1
 8013d00:	f858 2b04 	ldr.w	r2, [r8], #4
 8013d04:	f8d1 c000 	ldr.w	ip, [r1]
 8013d08:	b293      	uxth	r3, r2
 8013d0a:	1ac3      	subs	r3, r0, r3
 8013d0c:	0c12      	lsrs	r2, r2, #16
 8013d0e:	fa1f f08c 	uxth.w	r0, ip
 8013d12:	4403      	add	r3, r0
 8013d14:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8013d18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013d1c:	b29b      	uxth	r3, r3
 8013d1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013d22:	45c1      	cmp	r9, r8
 8013d24:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013d28:	f841 3b04 	str.w	r3, [r1], #4
 8013d2c:	d2e8      	bcs.n	8013d00 <quorem+0xac>
 8013d2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013d32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013d36:	b922      	cbnz	r2, 8013d42 <quorem+0xee>
 8013d38:	3b04      	subs	r3, #4
 8013d3a:	429d      	cmp	r5, r3
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	d30a      	bcc.n	8013d56 <quorem+0x102>
 8013d40:	613c      	str	r4, [r7, #16]
 8013d42:	4630      	mov	r0, r6
 8013d44:	b003      	add	sp, #12
 8013d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d4a:	6812      	ldr	r2, [r2, #0]
 8013d4c:	3b04      	subs	r3, #4
 8013d4e:	2a00      	cmp	r2, #0
 8013d50:	d1cd      	bne.n	8013cee <quorem+0x9a>
 8013d52:	3c01      	subs	r4, #1
 8013d54:	e7c8      	b.n	8013ce8 <quorem+0x94>
 8013d56:	6812      	ldr	r2, [r2, #0]
 8013d58:	3b04      	subs	r3, #4
 8013d5a:	2a00      	cmp	r2, #0
 8013d5c:	d1f0      	bne.n	8013d40 <quorem+0xec>
 8013d5e:	3c01      	subs	r4, #1
 8013d60:	e7eb      	b.n	8013d3a <quorem+0xe6>
 8013d62:	2000      	movs	r0, #0
 8013d64:	e7ee      	b.n	8013d44 <quorem+0xf0>
	...

08013d68 <_dtoa_r>:
 8013d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d6c:	4616      	mov	r6, r2
 8013d6e:	461f      	mov	r7, r3
 8013d70:	69c4      	ldr	r4, [r0, #28]
 8013d72:	b099      	sub	sp, #100	; 0x64
 8013d74:	4605      	mov	r5, r0
 8013d76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013d7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8013d7e:	b974      	cbnz	r4, 8013d9e <_dtoa_r+0x36>
 8013d80:	2010      	movs	r0, #16
 8013d82:	f7fe ff8d 	bl	8012ca0 <malloc>
 8013d86:	4602      	mov	r2, r0
 8013d88:	61e8      	str	r0, [r5, #28]
 8013d8a:	b920      	cbnz	r0, 8013d96 <_dtoa_r+0x2e>
 8013d8c:	21ef      	movs	r1, #239	; 0xef
 8013d8e:	4bac      	ldr	r3, [pc, #688]	; (8014040 <_dtoa_r+0x2d8>)
 8013d90:	48ac      	ldr	r0, [pc, #688]	; (8014044 <_dtoa_r+0x2dc>)
 8013d92:	f001 fd6f 	bl	8015874 <__assert_func>
 8013d96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013d9a:	6004      	str	r4, [r0, #0]
 8013d9c:	60c4      	str	r4, [r0, #12]
 8013d9e:	69eb      	ldr	r3, [r5, #28]
 8013da0:	6819      	ldr	r1, [r3, #0]
 8013da2:	b151      	cbz	r1, 8013dba <_dtoa_r+0x52>
 8013da4:	685a      	ldr	r2, [r3, #4]
 8013da6:	2301      	movs	r3, #1
 8013da8:	4093      	lsls	r3, r2
 8013daa:	604a      	str	r2, [r1, #4]
 8013dac:	608b      	str	r3, [r1, #8]
 8013dae:	4628      	mov	r0, r5
 8013db0:	f000 fe46 	bl	8014a40 <_Bfree>
 8013db4:	2200      	movs	r2, #0
 8013db6:	69eb      	ldr	r3, [r5, #28]
 8013db8:	601a      	str	r2, [r3, #0]
 8013dba:	1e3b      	subs	r3, r7, #0
 8013dbc:	bfaf      	iteee	ge
 8013dbe:	2300      	movge	r3, #0
 8013dc0:	2201      	movlt	r2, #1
 8013dc2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013dc6:	9305      	strlt	r3, [sp, #20]
 8013dc8:	bfa8      	it	ge
 8013dca:	f8c8 3000 	strge.w	r3, [r8]
 8013dce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8013dd2:	4b9d      	ldr	r3, [pc, #628]	; (8014048 <_dtoa_r+0x2e0>)
 8013dd4:	bfb8      	it	lt
 8013dd6:	f8c8 2000 	strlt.w	r2, [r8]
 8013dda:	ea33 0309 	bics.w	r3, r3, r9
 8013dde:	d119      	bne.n	8013e14 <_dtoa_r+0xac>
 8013de0:	f242 730f 	movw	r3, #9999	; 0x270f
 8013de4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013de6:	6013      	str	r3, [r2, #0]
 8013de8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013dec:	4333      	orrs	r3, r6
 8013dee:	f000 8589 	beq.w	8014904 <_dtoa_r+0xb9c>
 8013df2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013df4:	b953      	cbnz	r3, 8013e0c <_dtoa_r+0xa4>
 8013df6:	4b95      	ldr	r3, [pc, #596]	; (801404c <_dtoa_r+0x2e4>)
 8013df8:	e023      	b.n	8013e42 <_dtoa_r+0xda>
 8013dfa:	4b95      	ldr	r3, [pc, #596]	; (8014050 <_dtoa_r+0x2e8>)
 8013dfc:	9303      	str	r3, [sp, #12]
 8013dfe:	3308      	adds	r3, #8
 8013e00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013e02:	6013      	str	r3, [r2, #0]
 8013e04:	9803      	ldr	r0, [sp, #12]
 8013e06:	b019      	add	sp, #100	; 0x64
 8013e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e0c:	4b8f      	ldr	r3, [pc, #572]	; (801404c <_dtoa_r+0x2e4>)
 8013e0e:	9303      	str	r3, [sp, #12]
 8013e10:	3303      	adds	r3, #3
 8013e12:	e7f5      	b.n	8013e00 <_dtoa_r+0x98>
 8013e14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013e18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8013e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013e20:	2200      	movs	r2, #0
 8013e22:	2300      	movs	r3, #0
 8013e24:	f7ec fdc0 	bl	80009a8 <__aeabi_dcmpeq>
 8013e28:	4680      	mov	r8, r0
 8013e2a:	b160      	cbz	r0, 8013e46 <_dtoa_r+0xde>
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013e30:	6013      	str	r3, [r2, #0]
 8013e32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	f000 8562 	beq.w	80148fe <_dtoa_r+0xb96>
 8013e3a:	4b86      	ldr	r3, [pc, #536]	; (8014054 <_dtoa_r+0x2ec>)
 8013e3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013e3e:	6013      	str	r3, [r2, #0]
 8013e40:	3b01      	subs	r3, #1
 8013e42:	9303      	str	r3, [sp, #12]
 8013e44:	e7de      	b.n	8013e04 <_dtoa_r+0x9c>
 8013e46:	ab16      	add	r3, sp, #88	; 0x58
 8013e48:	9301      	str	r3, [sp, #4]
 8013e4a:	ab17      	add	r3, sp, #92	; 0x5c
 8013e4c:	9300      	str	r3, [sp, #0]
 8013e4e:	4628      	mov	r0, r5
 8013e50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013e54:	f001 f8d6 	bl	8015004 <__d2b>
 8013e58:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013e5c:	4682      	mov	sl, r0
 8013e5e:	2c00      	cmp	r4, #0
 8013e60:	d07e      	beq.n	8013f60 <_dtoa_r+0x1f8>
 8013e62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e68:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8013e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013e70:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013e74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013e78:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	2200      	movs	r2, #0
 8013e80:	4b75      	ldr	r3, [pc, #468]	; (8014058 <_dtoa_r+0x2f0>)
 8013e82:	f7ec f971 	bl	8000168 <__aeabi_dsub>
 8013e86:	a368      	add	r3, pc, #416	; (adr r3, 8014028 <_dtoa_r+0x2c0>)
 8013e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8c:	f7ec fb24 	bl	80004d8 <__aeabi_dmul>
 8013e90:	a367      	add	r3, pc, #412	; (adr r3, 8014030 <_dtoa_r+0x2c8>)
 8013e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e96:	f7ec f969 	bl	800016c <__adddf3>
 8013e9a:	4606      	mov	r6, r0
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	460f      	mov	r7, r1
 8013ea0:	f7ec fab0 	bl	8000404 <__aeabi_i2d>
 8013ea4:	a364      	add	r3, pc, #400	; (adr r3, 8014038 <_dtoa_r+0x2d0>)
 8013ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eaa:	f7ec fb15 	bl	80004d8 <__aeabi_dmul>
 8013eae:	4602      	mov	r2, r0
 8013eb0:	460b      	mov	r3, r1
 8013eb2:	4630      	mov	r0, r6
 8013eb4:	4639      	mov	r1, r7
 8013eb6:	f7ec f959 	bl	800016c <__adddf3>
 8013eba:	4606      	mov	r6, r0
 8013ebc:	460f      	mov	r7, r1
 8013ebe:	f7ec fdbb 	bl	8000a38 <__aeabi_d2iz>
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	4683      	mov	fp, r0
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	4630      	mov	r0, r6
 8013eca:	4639      	mov	r1, r7
 8013ecc:	f7ec fd76 	bl	80009bc <__aeabi_dcmplt>
 8013ed0:	b148      	cbz	r0, 8013ee6 <_dtoa_r+0x17e>
 8013ed2:	4658      	mov	r0, fp
 8013ed4:	f7ec fa96 	bl	8000404 <__aeabi_i2d>
 8013ed8:	4632      	mov	r2, r6
 8013eda:	463b      	mov	r3, r7
 8013edc:	f7ec fd64 	bl	80009a8 <__aeabi_dcmpeq>
 8013ee0:	b908      	cbnz	r0, 8013ee6 <_dtoa_r+0x17e>
 8013ee2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013ee6:	f1bb 0f16 	cmp.w	fp, #22
 8013eea:	d857      	bhi.n	8013f9c <_dtoa_r+0x234>
 8013eec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013ef0:	4b5a      	ldr	r3, [pc, #360]	; (801405c <_dtoa_r+0x2f4>)
 8013ef2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013efa:	f7ec fd5f 	bl	80009bc <__aeabi_dcmplt>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	d04e      	beq.n	8013fa0 <_dtoa_r+0x238>
 8013f02:	2300      	movs	r3, #0
 8013f04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013f08:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013f0c:	1b1b      	subs	r3, r3, r4
 8013f0e:	1e5a      	subs	r2, r3, #1
 8013f10:	bf46      	itte	mi
 8013f12:	f1c3 0901 	rsbmi	r9, r3, #1
 8013f16:	2300      	movmi	r3, #0
 8013f18:	f04f 0900 	movpl.w	r9, #0
 8013f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8013f1e:	bf48      	it	mi
 8013f20:	9309      	strmi	r3, [sp, #36]	; 0x24
 8013f22:	f1bb 0f00 	cmp.w	fp, #0
 8013f26:	db3d      	blt.n	8013fa4 <_dtoa_r+0x23c>
 8013f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f2a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8013f2e:	445b      	add	r3, fp
 8013f30:	9309      	str	r3, [sp, #36]	; 0x24
 8013f32:	2300      	movs	r3, #0
 8013f34:	930a      	str	r3, [sp, #40]	; 0x28
 8013f36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013f38:	2b09      	cmp	r3, #9
 8013f3a:	d867      	bhi.n	801400c <_dtoa_r+0x2a4>
 8013f3c:	2b05      	cmp	r3, #5
 8013f3e:	bfc4      	itt	gt
 8013f40:	3b04      	subgt	r3, #4
 8013f42:	9322      	strgt	r3, [sp, #136]	; 0x88
 8013f44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013f46:	bfc8      	it	gt
 8013f48:	2400      	movgt	r4, #0
 8013f4a:	f1a3 0302 	sub.w	r3, r3, #2
 8013f4e:	bfd8      	it	le
 8013f50:	2401      	movle	r4, #1
 8013f52:	2b03      	cmp	r3, #3
 8013f54:	f200 8086 	bhi.w	8014064 <_dtoa_r+0x2fc>
 8013f58:	e8df f003 	tbb	[pc, r3]
 8013f5c:	5637392c 	.word	0x5637392c
 8013f60:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8013f64:	441c      	add	r4, r3
 8013f66:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8013f6a:	2b20      	cmp	r3, #32
 8013f6c:	bfc1      	itttt	gt
 8013f6e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013f72:	fa09 f903 	lslgt.w	r9, r9, r3
 8013f76:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8013f7a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013f7e:	bfd6      	itet	le
 8013f80:	f1c3 0320 	rsble	r3, r3, #32
 8013f84:	ea49 0003 	orrgt.w	r0, r9, r3
 8013f88:	fa06 f003 	lslle.w	r0, r6, r3
 8013f8c:	f7ec fa2a 	bl	80003e4 <__aeabi_ui2d>
 8013f90:	2201      	movs	r2, #1
 8013f92:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013f96:	3c01      	subs	r4, #1
 8013f98:	9213      	str	r2, [sp, #76]	; 0x4c
 8013f9a:	e76f      	b.n	8013e7c <_dtoa_r+0x114>
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	e7b3      	b.n	8013f08 <_dtoa_r+0x1a0>
 8013fa0:	900f      	str	r0, [sp, #60]	; 0x3c
 8013fa2:	e7b2      	b.n	8013f0a <_dtoa_r+0x1a2>
 8013fa4:	f1cb 0300 	rsb	r3, fp, #0
 8013fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8013faa:	2300      	movs	r3, #0
 8013fac:	eba9 090b 	sub.w	r9, r9, fp
 8013fb0:	930e      	str	r3, [sp, #56]	; 0x38
 8013fb2:	e7c0      	b.n	8013f36 <_dtoa_r+0x1ce>
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8013fb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	dc55      	bgt.n	801406a <_dtoa_r+0x302>
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	461a      	mov	r2, r3
 8013fc2:	9306      	str	r3, [sp, #24]
 8013fc4:	9308      	str	r3, [sp, #32]
 8013fc6:	9223      	str	r2, [sp, #140]	; 0x8c
 8013fc8:	e00b      	b.n	8013fe2 <_dtoa_r+0x27a>
 8013fca:	2301      	movs	r3, #1
 8013fcc:	e7f3      	b.n	8013fb6 <_dtoa_r+0x24e>
 8013fce:	2300      	movs	r3, #0
 8013fd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8013fd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013fd4:	445b      	add	r3, fp
 8013fd6:	9306      	str	r3, [sp, #24]
 8013fd8:	3301      	adds	r3, #1
 8013fda:	2b01      	cmp	r3, #1
 8013fdc:	9308      	str	r3, [sp, #32]
 8013fde:	bfb8      	it	lt
 8013fe0:	2301      	movlt	r3, #1
 8013fe2:	2100      	movs	r1, #0
 8013fe4:	2204      	movs	r2, #4
 8013fe6:	69e8      	ldr	r0, [r5, #28]
 8013fe8:	f102 0614 	add.w	r6, r2, #20
 8013fec:	429e      	cmp	r6, r3
 8013fee:	d940      	bls.n	8014072 <_dtoa_r+0x30a>
 8013ff0:	6041      	str	r1, [r0, #4]
 8013ff2:	4628      	mov	r0, r5
 8013ff4:	f000 fce4 	bl	80149c0 <_Balloc>
 8013ff8:	9003      	str	r0, [sp, #12]
 8013ffa:	2800      	cmp	r0, #0
 8013ffc:	d13c      	bne.n	8014078 <_dtoa_r+0x310>
 8013ffe:	4602      	mov	r2, r0
 8014000:	f240 11af 	movw	r1, #431	; 0x1af
 8014004:	4b16      	ldr	r3, [pc, #88]	; (8014060 <_dtoa_r+0x2f8>)
 8014006:	e6c3      	b.n	8013d90 <_dtoa_r+0x28>
 8014008:	2301      	movs	r3, #1
 801400a:	e7e1      	b.n	8013fd0 <_dtoa_r+0x268>
 801400c:	2401      	movs	r4, #1
 801400e:	2300      	movs	r3, #0
 8014010:	940b      	str	r4, [sp, #44]	; 0x2c
 8014012:	9322      	str	r3, [sp, #136]	; 0x88
 8014014:	f04f 33ff 	mov.w	r3, #4294967295
 8014018:	2200      	movs	r2, #0
 801401a:	9306      	str	r3, [sp, #24]
 801401c:	9308      	str	r3, [sp, #32]
 801401e:	2312      	movs	r3, #18
 8014020:	e7d1      	b.n	8013fc6 <_dtoa_r+0x25e>
 8014022:	bf00      	nop
 8014024:	f3af 8000 	nop.w
 8014028:	636f4361 	.word	0x636f4361
 801402c:	3fd287a7 	.word	0x3fd287a7
 8014030:	8b60c8b3 	.word	0x8b60c8b3
 8014034:	3fc68a28 	.word	0x3fc68a28
 8014038:	509f79fb 	.word	0x509f79fb
 801403c:	3fd34413 	.word	0x3fd34413
 8014040:	080163b1 	.word	0x080163b1
 8014044:	080163c8 	.word	0x080163c8
 8014048:	7ff00000 	.word	0x7ff00000
 801404c:	080163ad 	.word	0x080163ad
 8014050:	080163a4 	.word	0x080163a4
 8014054:	08016381 	.word	0x08016381
 8014058:	3ff80000 	.word	0x3ff80000
 801405c:	080164b8 	.word	0x080164b8
 8014060:	08016420 	.word	0x08016420
 8014064:	2301      	movs	r3, #1
 8014066:	930b      	str	r3, [sp, #44]	; 0x2c
 8014068:	e7d4      	b.n	8014014 <_dtoa_r+0x2ac>
 801406a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801406c:	9306      	str	r3, [sp, #24]
 801406e:	9308      	str	r3, [sp, #32]
 8014070:	e7b7      	b.n	8013fe2 <_dtoa_r+0x27a>
 8014072:	3101      	adds	r1, #1
 8014074:	0052      	lsls	r2, r2, #1
 8014076:	e7b7      	b.n	8013fe8 <_dtoa_r+0x280>
 8014078:	69eb      	ldr	r3, [r5, #28]
 801407a:	9a03      	ldr	r2, [sp, #12]
 801407c:	601a      	str	r2, [r3, #0]
 801407e:	9b08      	ldr	r3, [sp, #32]
 8014080:	2b0e      	cmp	r3, #14
 8014082:	f200 80a8 	bhi.w	80141d6 <_dtoa_r+0x46e>
 8014086:	2c00      	cmp	r4, #0
 8014088:	f000 80a5 	beq.w	80141d6 <_dtoa_r+0x46e>
 801408c:	f1bb 0f00 	cmp.w	fp, #0
 8014090:	dd34      	ble.n	80140fc <_dtoa_r+0x394>
 8014092:	4b9a      	ldr	r3, [pc, #616]	; (80142fc <_dtoa_r+0x594>)
 8014094:	f00b 020f 	and.w	r2, fp, #15
 8014098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801409c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80140a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80140a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80140a8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80140ac:	d016      	beq.n	80140dc <_dtoa_r+0x374>
 80140ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80140b2:	4b93      	ldr	r3, [pc, #588]	; (8014300 <_dtoa_r+0x598>)
 80140b4:	2703      	movs	r7, #3
 80140b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80140ba:	f7ec fb37 	bl	800072c <__aeabi_ddiv>
 80140be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80140c2:	f004 040f 	and.w	r4, r4, #15
 80140c6:	4e8e      	ldr	r6, [pc, #568]	; (8014300 <_dtoa_r+0x598>)
 80140c8:	b954      	cbnz	r4, 80140e0 <_dtoa_r+0x378>
 80140ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80140ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80140d2:	f7ec fb2b 	bl	800072c <__aeabi_ddiv>
 80140d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80140da:	e029      	b.n	8014130 <_dtoa_r+0x3c8>
 80140dc:	2702      	movs	r7, #2
 80140de:	e7f2      	b.n	80140c6 <_dtoa_r+0x35e>
 80140e0:	07e1      	lsls	r1, r4, #31
 80140e2:	d508      	bpl.n	80140f6 <_dtoa_r+0x38e>
 80140e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80140e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80140ec:	f7ec f9f4 	bl	80004d8 <__aeabi_dmul>
 80140f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80140f4:	3701      	adds	r7, #1
 80140f6:	1064      	asrs	r4, r4, #1
 80140f8:	3608      	adds	r6, #8
 80140fa:	e7e5      	b.n	80140c8 <_dtoa_r+0x360>
 80140fc:	f000 80a5 	beq.w	801424a <_dtoa_r+0x4e2>
 8014100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014104:	f1cb 0400 	rsb	r4, fp, #0
 8014108:	4b7c      	ldr	r3, [pc, #496]	; (80142fc <_dtoa_r+0x594>)
 801410a:	f004 020f 	and.w	r2, r4, #15
 801410e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014116:	f7ec f9df 	bl	80004d8 <__aeabi_dmul>
 801411a:	2702      	movs	r7, #2
 801411c:	2300      	movs	r3, #0
 801411e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014122:	4e77      	ldr	r6, [pc, #476]	; (8014300 <_dtoa_r+0x598>)
 8014124:	1124      	asrs	r4, r4, #4
 8014126:	2c00      	cmp	r4, #0
 8014128:	f040 8084 	bne.w	8014234 <_dtoa_r+0x4cc>
 801412c:	2b00      	cmp	r3, #0
 801412e:	d1d2      	bne.n	80140d6 <_dtoa_r+0x36e>
 8014130:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014134:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8014138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801413a:	2b00      	cmp	r3, #0
 801413c:	f000 8087 	beq.w	801424e <_dtoa_r+0x4e6>
 8014140:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014144:	2200      	movs	r2, #0
 8014146:	4b6f      	ldr	r3, [pc, #444]	; (8014304 <_dtoa_r+0x59c>)
 8014148:	f7ec fc38 	bl	80009bc <__aeabi_dcmplt>
 801414c:	2800      	cmp	r0, #0
 801414e:	d07e      	beq.n	801424e <_dtoa_r+0x4e6>
 8014150:	9b08      	ldr	r3, [sp, #32]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d07b      	beq.n	801424e <_dtoa_r+0x4e6>
 8014156:	9b06      	ldr	r3, [sp, #24]
 8014158:	2b00      	cmp	r3, #0
 801415a:	dd38      	ble.n	80141ce <_dtoa_r+0x466>
 801415c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014160:	2200      	movs	r2, #0
 8014162:	4b69      	ldr	r3, [pc, #420]	; (8014308 <_dtoa_r+0x5a0>)
 8014164:	f7ec f9b8 	bl	80004d8 <__aeabi_dmul>
 8014168:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801416c:	9c06      	ldr	r4, [sp, #24]
 801416e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8014172:	3701      	adds	r7, #1
 8014174:	4638      	mov	r0, r7
 8014176:	f7ec f945 	bl	8000404 <__aeabi_i2d>
 801417a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801417e:	f7ec f9ab 	bl	80004d8 <__aeabi_dmul>
 8014182:	2200      	movs	r2, #0
 8014184:	4b61      	ldr	r3, [pc, #388]	; (801430c <_dtoa_r+0x5a4>)
 8014186:	f7eb fff1 	bl	800016c <__adddf3>
 801418a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801418e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014192:	9611      	str	r6, [sp, #68]	; 0x44
 8014194:	2c00      	cmp	r4, #0
 8014196:	d15d      	bne.n	8014254 <_dtoa_r+0x4ec>
 8014198:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801419c:	2200      	movs	r2, #0
 801419e:	4b5c      	ldr	r3, [pc, #368]	; (8014310 <_dtoa_r+0x5a8>)
 80141a0:	f7eb ffe2 	bl	8000168 <__aeabi_dsub>
 80141a4:	4602      	mov	r2, r0
 80141a6:	460b      	mov	r3, r1
 80141a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80141ac:	4633      	mov	r3, r6
 80141ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80141b0:	f7ec fc22 	bl	80009f8 <__aeabi_dcmpgt>
 80141b4:	2800      	cmp	r0, #0
 80141b6:	f040 8295 	bne.w	80146e4 <_dtoa_r+0x97c>
 80141ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80141be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80141c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80141c4:	f7ec fbfa 	bl	80009bc <__aeabi_dcmplt>
 80141c8:	2800      	cmp	r0, #0
 80141ca:	f040 8289 	bne.w	80146e0 <_dtoa_r+0x978>
 80141ce:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80141d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80141d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80141d8:	2b00      	cmp	r3, #0
 80141da:	f2c0 8151 	blt.w	8014480 <_dtoa_r+0x718>
 80141de:	f1bb 0f0e 	cmp.w	fp, #14
 80141e2:	f300 814d 	bgt.w	8014480 <_dtoa_r+0x718>
 80141e6:	4b45      	ldr	r3, [pc, #276]	; (80142fc <_dtoa_r+0x594>)
 80141e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80141ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80141f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80141f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	f280 80da 	bge.w	80143b0 <_dtoa_r+0x648>
 80141fc:	9b08      	ldr	r3, [sp, #32]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	f300 80d6 	bgt.w	80143b0 <_dtoa_r+0x648>
 8014204:	f040 826b 	bne.w	80146de <_dtoa_r+0x976>
 8014208:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801420c:	2200      	movs	r2, #0
 801420e:	4b40      	ldr	r3, [pc, #256]	; (8014310 <_dtoa_r+0x5a8>)
 8014210:	f7ec f962 	bl	80004d8 <__aeabi_dmul>
 8014214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014218:	f7ec fbe4 	bl	80009e4 <__aeabi_dcmpge>
 801421c:	9c08      	ldr	r4, [sp, #32]
 801421e:	4626      	mov	r6, r4
 8014220:	2800      	cmp	r0, #0
 8014222:	f040 8241 	bne.w	80146a8 <_dtoa_r+0x940>
 8014226:	2331      	movs	r3, #49	; 0x31
 8014228:	9f03      	ldr	r7, [sp, #12]
 801422a:	f10b 0b01 	add.w	fp, fp, #1
 801422e:	f807 3b01 	strb.w	r3, [r7], #1
 8014232:	e23d      	b.n	80146b0 <_dtoa_r+0x948>
 8014234:	07e2      	lsls	r2, r4, #31
 8014236:	d505      	bpl.n	8014244 <_dtoa_r+0x4dc>
 8014238:	e9d6 2300 	ldrd	r2, r3, [r6]
 801423c:	f7ec f94c 	bl	80004d8 <__aeabi_dmul>
 8014240:	2301      	movs	r3, #1
 8014242:	3701      	adds	r7, #1
 8014244:	1064      	asrs	r4, r4, #1
 8014246:	3608      	adds	r6, #8
 8014248:	e76d      	b.n	8014126 <_dtoa_r+0x3be>
 801424a:	2702      	movs	r7, #2
 801424c:	e770      	b.n	8014130 <_dtoa_r+0x3c8>
 801424e:	46d8      	mov	r8, fp
 8014250:	9c08      	ldr	r4, [sp, #32]
 8014252:	e78f      	b.n	8014174 <_dtoa_r+0x40c>
 8014254:	9903      	ldr	r1, [sp, #12]
 8014256:	4b29      	ldr	r3, [pc, #164]	; (80142fc <_dtoa_r+0x594>)
 8014258:	4421      	add	r1, r4
 801425a:	9112      	str	r1, [sp, #72]	; 0x48
 801425c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801425e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014262:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8014266:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801426a:	2900      	cmp	r1, #0
 801426c:	d054      	beq.n	8014318 <_dtoa_r+0x5b0>
 801426e:	2000      	movs	r0, #0
 8014270:	4928      	ldr	r1, [pc, #160]	; (8014314 <_dtoa_r+0x5ac>)
 8014272:	f7ec fa5b 	bl	800072c <__aeabi_ddiv>
 8014276:	463b      	mov	r3, r7
 8014278:	4632      	mov	r2, r6
 801427a:	f7eb ff75 	bl	8000168 <__aeabi_dsub>
 801427e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014282:	9f03      	ldr	r7, [sp, #12]
 8014284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014288:	f7ec fbd6 	bl	8000a38 <__aeabi_d2iz>
 801428c:	4604      	mov	r4, r0
 801428e:	f7ec f8b9 	bl	8000404 <__aeabi_i2d>
 8014292:	4602      	mov	r2, r0
 8014294:	460b      	mov	r3, r1
 8014296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801429a:	f7eb ff65 	bl	8000168 <__aeabi_dsub>
 801429e:	4602      	mov	r2, r0
 80142a0:	460b      	mov	r3, r1
 80142a2:	3430      	adds	r4, #48	; 0x30
 80142a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80142a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80142ac:	f807 4b01 	strb.w	r4, [r7], #1
 80142b0:	f7ec fb84 	bl	80009bc <__aeabi_dcmplt>
 80142b4:	2800      	cmp	r0, #0
 80142b6:	d173      	bne.n	80143a0 <_dtoa_r+0x638>
 80142b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142bc:	2000      	movs	r0, #0
 80142be:	4911      	ldr	r1, [pc, #68]	; (8014304 <_dtoa_r+0x59c>)
 80142c0:	f7eb ff52 	bl	8000168 <__aeabi_dsub>
 80142c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80142c8:	f7ec fb78 	bl	80009bc <__aeabi_dcmplt>
 80142cc:	2800      	cmp	r0, #0
 80142ce:	f040 80b6 	bne.w	801443e <_dtoa_r+0x6d6>
 80142d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80142d4:	429f      	cmp	r7, r3
 80142d6:	f43f af7a 	beq.w	80141ce <_dtoa_r+0x466>
 80142da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80142de:	2200      	movs	r2, #0
 80142e0:	4b09      	ldr	r3, [pc, #36]	; (8014308 <_dtoa_r+0x5a0>)
 80142e2:	f7ec f8f9 	bl	80004d8 <__aeabi_dmul>
 80142e6:	2200      	movs	r2, #0
 80142e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80142ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80142f0:	4b05      	ldr	r3, [pc, #20]	; (8014308 <_dtoa_r+0x5a0>)
 80142f2:	f7ec f8f1 	bl	80004d8 <__aeabi_dmul>
 80142f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80142fa:	e7c3      	b.n	8014284 <_dtoa_r+0x51c>
 80142fc:	080164b8 	.word	0x080164b8
 8014300:	08016490 	.word	0x08016490
 8014304:	3ff00000 	.word	0x3ff00000
 8014308:	40240000 	.word	0x40240000
 801430c:	401c0000 	.word	0x401c0000
 8014310:	40140000 	.word	0x40140000
 8014314:	3fe00000 	.word	0x3fe00000
 8014318:	4630      	mov	r0, r6
 801431a:	4639      	mov	r1, r7
 801431c:	f7ec f8dc 	bl	80004d8 <__aeabi_dmul>
 8014320:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014322:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014326:	9c03      	ldr	r4, [sp, #12]
 8014328:	9314      	str	r3, [sp, #80]	; 0x50
 801432a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801432e:	f7ec fb83 	bl	8000a38 <__aeabi_d2iz>
 8014332:	9015      	str	r0, [sp, #84]	; 0x54
 8014334:	f7ec f866 	bl	8000404 <__aeabi_i2d>
 8014338:	4602      	mov	r2, r0
 801433a:	460b      	mov	r3, r1
 801433c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014340:	f7eb ff12 	bl	8000168 <__aeabi_dsub>
 8014344:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014346:	4606      	mov	r6, r0
 8014348:	3330      	adds	r3, #48	; 0x30
 801434a:	f804 3b01 	strb.w	r3, [r4], #1
 801434e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014350:	460f      	mov	r7, r1
 8014352:	429c      	cmp	r4, r3
 8014354:	f04f 0200 	mov.w	r2, #0
 8014358:	d124      	bne.n	80143a4 <_dtoa_r+0x63c>
 801435a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801435e:	4baf      	ldr	r3, [pc, #700]	; (801461c <_dtoa_r+0x8b4>)
 8014360:	f7eb ff04 	bl	800016c <__adddf3>
 8014364:	4602      	mov	r2, r0
 8014366:	460b      	mov	r3, r1
 8014368:	4630      	mov	r0, r6
 801436a:	4639      	mov	r1, r7
 801436c:	f7ec fb44 	bl	80009f8 <__aeabi_dcmpgt>
 8014370:	2800      	cmp	r0, #0
 8014372:	d163      	bne.n	801443c <_dtoa_r+0x6d4>
 8014374:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014378:	2000      	movs	r0, #0
 801437a:	49a8      	ldr	r1, [pc, #672]	; (801461c <_dtoa_r+0x8b4>)
 801437c:	f7eb fef4 	bl	8000168 <__aeabi_dsub>
 8014380:	4602      	mov	r2, r0
 8014382:	460b      	mov	r3, r1
 8014384:	4630      	mov	r0, r6
 8014386:	4639      	mov	r1, r7
 8014388:	f7ec fb18 	bl	80009bc <__aeabi_dcmplt>
 801438c:	2800      	cmp	r0, #0
 801438e:	f43f af1e 	beq.w	80141ce <_dtoa_r+0x466>
 8014392:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014394:	1e7b      	subs	r3, r7, #1
 8014396:	9314      	str	r3, [sp, #80]	; 0x50
 8014398:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801439c:	2b30      	cmp	r3, #48	; 0x30
 801439e:	d0f8      	beq.n	8014392 <_dtoa_r+0x62a>
 80143a0:	46c3      	mov	fp, r8
 80143a2:	e03b      	b.n	801441c <_dtoa_r+0x6b4>
 80143a4:	4b9e      	ldr	r3, [pc, #632]	; (8014620 <_dtoa_r+0x8b8>)
 80143a6:	f7ec f897 	bl	80004d8 <__aeabi_dmul>
 80143aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80143ae:	e7bc      	b.n	801432a <_dtoa_r+0x5c2>
 80143b0:	9f03      	ldr	r7, [sp, #12]
 80143b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80143b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80143ba:	4640      	mov	r0, r8
 80143bc:	4649      	mov	r1, r9
 80143be:	f7ec f9b5 	bl	800072c <__aeabi_ddiv>
 80143c2:	f7ec fb39 	bl	8000a38 <__aeabi_d2iz>
 80143c6:	4604      	mov	r4, r0
 80143c8:	f7ec f81c 	bl	8000404 <__aeabi_i2d>
 80143cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80143d0:	f7ec f882 	bl	80004d8 <__aeabi_dmul>
 80143d4:	4602      	mov	r2, r0
 80143d6:	460b      	mov	r3, r1
 80143d8:	4640      	mov	r0, r8
 80143da:	4649      	mov	r1, r9
 80143dc:	f7eb fec4 	bl	8000168 <__aeabi_dsub>
 80143e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80143e4:	f807 6b01 	strb.w	r6, [r7], #1
 80143e8:	9e03      	ldr	r6, [sp, #12]
 80143ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80143ee:	1bbe      	subs	r6, r7, r6
 80143f0:	45b4      	cmp	ip, r6
 80143f2:	4602      	mov	r2, r0
 80143f4:	460b      	mov	r3, r1
 80143f6:	d136      	bne.n	8014466 <_dtoa_r+0x6fe>
 80143f8:	f7eb feb8 	bl	800016c <__adddf3>
 80143fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014400:	4680      	mov	r8, r0
 8014402:	4689      	mov	r9, r1
 8014404:	f7ec faf8 	bl	80009f8 <__aeabi_dcmpgt>
 8014408:	bb58      	cbnz	r0, 8014462 <_dtoa_r+0x6fa>
 801440a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801440e:	4640      	mov	r0, r8
 8014410:	4649      	mov	r1, r9
 8014412:	f7ec fac9 	bl	80009a8 <__aeabi_dcmpeq>
 8014416:	b108      	cbz	r0, 801441c <_dtoa_r+0x6b4>
 8014418:	07e3      	lsls	r3, r4, #31
 801441a:	d422      	bmi.n	8014462 <_dtoa_r+0x6fa>
 801441c:	4651      	mov	r1, sl
 801441e:	4628      	mov	r0, r5
 8014420:	f000 fb0e 	bl	8014a40 <_Bfree>
 8014424:	2300      	movs	r3, #0
 8014426:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014428:	703b      	strb	r3, [r7, #0]
 801442a:	f10b 0301 	add.w	r3, fp, #1
 801442e:	6013      	str	r3, [r2, #0]
 8014430:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014432:	2b00      	cmp	r3, #0
 8014434:	f43f ace6 	beq.w	8013e04 <_dtoa_r+0x9c>
 8014438:	601f      	str	r7, [r3, #0]
 801443a:	e4e3      	b.n	8013e04 <_dtoa_r+0x9c>
 801443c:	4627      	mov	r7, r4
 801443e:	463b      	mov	r3, r7
 8014440:	461f      	mov	r7, r3
 8014442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014446:	2a39      	cmp	r2, #57	; 0x39
 8014448:	d107      	bne.n	801445a <_dtoa_r+0x6f2>
 801444a:	9a03      	ldr	r2, [sp, #12]
 801444c:	429a      	cmp	r2, r3
 801444e:	d1f7      	bne.n	8014440 <_dtoa_r+0x6d8>
 8014450:	2230      	movs	r2, #48	; 0x30
 8014452:	9903      	ldr	r1, [sp, #12]
 8014454:	f108 0801 	add.w	r8, r8, #1
 8014458:	700a      	strb	r2, [r1, #0]
 801445a:	781a      	ldrb	r2, [r3, #0]
 801445c:	3201      	adds	r2, #1
 801445e:	701a      	strb	r2, [r3, #0]
 8014460:	e79e      	b.n	80143a0 <_dtoa_r+0x638>
 8014462:	46d8      	mov	r8, fp
 8014464:	e7eb      	b.n	801443e <_dtoa_r+0x6d6>
 8014466:	2200      	movs	r2, #0
 8014468:	4b6d      	ldr	r3, [pc, #436]	; (8014620 <_dtoa_r+0x8b8>)
 801446a:	f7ec f835 	bl	80004d8 <__aeabi_dmul>
 801446e:	2200      	movs	r2, #0
 8014470:	2300      	movs	r3, #0
 8014472:	4680      	mov	r8, r0
 8014474:	4689      	mov	r9, r1
 8014476:	f7ec fa97 	bl	80009a8 <__aeabi_dcmpeq>
 801447a:	2800      	cmp	r0, #0
 801447c:	d09b      	beq.n	80143b6 <_dtoa_r+0x64e>
 801447e:	e7cd      	b.n	801441c <_dtoa_r+0x6b4>
 8014480:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014482:	2a00      	cmp	r2, #0
 8014484:	f000 80c4 	beq.w	8014610 <_dtoa_r+0x8a8>
 8014488:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801448a:	2a01      	cmp	r2, #1
 801448c:	f300 80a8 	bgt.w	80145e0 <_dtoa_r+0x878>
 8014490:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014492:	2a00      	cmp	r2, #0
 8014494:	f000 80a0 	beq.w	80145d8 <_dtoa_r+0x870>
 8014498:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801449c:	464f      	mov	r7, r9
 801449e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80144a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144a2:	2101      	movs	r1, #1
 80144a4:	441a      	add	r2, r3
 80144a6:	4628      	mov	r0, r5
 80144a8:	4499      	add	r9, r3
 80144aa:	9209      	str	r2, [sp, #36]	; 0x24
 80144ac:	f000 fb7e 	bl	8014bac <__i2b>
 80144b0:	4606      	mov	r6, r0
 80144b2:	b15f      	cbz	r7, 80144cc <_dtoa_r+0x764>
 80144b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	dd08      	ble.n	80144cc <_dtoa_r+0x764>
 80144ba:	42bb      	cmp	r3, r7
 80144bc:	bfa8      	it	ge
 80144be:	463b      	movge	r3, r7
 80144c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144c2:	eba9 0903 	sub.w	r9, r9, r3
 80144c6:	1aff      	subs	r7, r7, r3
 80144c8:	1ad3      	subs	r3, r2, r3
 80144ca:	9309      	str	r3, [sp, #36]	; 0x24
 80144cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144ce:	b1f3      	cbz	r3, 801450e <_dtoa_r+0x7a6>
 80144d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	f000 80a0 	beq.w	8014618 <_dtoa_r+0x8b0>
 80144d8:	2c00      	cmp	r4, #0
 80144da:	dd10      	ble.n	80144fe <_dtoa_r+0x796>
 80144dc:	4631      	mov	r1, r6
 80144de:	4622      	mov	r2, r4
 80144e0:	4628      	mov	r0, r5
 80144e2:	f000 fc21 	bl	8014d28 <__pow5mult>
 80144e6:	4652      	mov	r2, sl
 80144e8:	4601      	mov	r1, r0
 80144ea:	4606      	mov	r6, r0
 80144ec:	4628      	mov	r0, r5
 80144ee:	f000 fb73 	bl	8014bd8 <__multiply>
 80144f2:	4680      	mov	r8, r0
 80144f4:	4651      	mov	r1, sl
 80144f6:	4628      	mov	r0, r5
 80144f8:	f000 faa2 	bl	8014a40 <_Bfree>
 80144fc:	46c2      	mov	sl, r8
 80144fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014500:	1b1a      	subs	r2, r3, r4
 8014502:	d004      	beq.n	801450e <_dtoa_r+0x7a6>
 8014504:	4651      	mov	r1, sl
 8014506:	4628      	mov	r0, r5
 8014508:	f000 fc0e 	bl	8014d28 <__pow5mult>
 801450c:	4682      	mov	sl, r0
 801450e:	2101      	movs	r1, #1
 8014510:	4628      	mov	r0, r5
 8014512:	f000 fb4b 	bl	8014bac <__i2b>
 8014516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014518:	4604      	mov	r4, r0
 801451a:	2b00      	cmp	r3, #0
 801451c:	f340 8082 	ble.w	8014624 <_dtoa_r+0x8bc>
 8014520:	461a      	mov	r2, r3
 8014522:	4601      	mov	r1, r0
 8014524:	4628      	mov	r0, r5
 8014526:	f000 fbff 	bl	8014d28 <__pow5mult>
 801452a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801452c:	4604      	mov	r4, r0
 801452e:	2b01      	cmp	r3, #1
 8014530:	dd7b      	ble.n	801462a <_dtoa_r+0x8c2>
 8014532:	f04f 0800 	mov.w	r8, #0
 8014536:	6923      	ldr	r3, [r4, #16]
 8014538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801453c:	6918      	ldr	r0, [r3, #16]
 801453e:	f000 fae7 	bl	8014b10 <__hi0bits>
 8014542:	f1c0 0020 	rsb	r0, r0, #32
 8014546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014548:	4418      	add	r0, r3
 801454a:	f010 001f 	ands.w	r0, r0, #31
 801454e:	f000 8092 	beq.w	8014676 <_dtoa_r+0x90e>
 8014552:	f1c0 0320 	rsb	r3, r0, #32
 8014556:	2b04      	cmp	r3, #4
 8014558:	f340 8085 	ble.w	8014666 <_dtoa_r+0x8fe>
 801455c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801455e:	f1c0 001c 	rsb	r0, r0, #28
 8014562:	4403      	add	r3, r0
 8014564:	4481      	add	r9, r0
 8014566:	4407      	add	r7, r0
 8014568:	9309      	str	r3, [sp, #36]	; 0x24
 801456a:	f1b9 0f00 	cmp.w	r9, #0
 801456e:	dd05      	ble.n	801457c <_dtoa_r+0x814>
 8014570:	4651      	mov	r1, sl
 8014572:	464a      	mov	r2, r9
 8014574:	4628      	mov	r0, r5
 8014576:	f000 fc31 	bl	8014ddc <__lshift>
 801457a:	4682      	mov	sl, r0
 801457c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801457e:	2b00      	cmp	r3, #0
 8014580:	dd05      	ble.n	801458e <_dtoa_r+0x826>
 8014582:	4621      	mov	r1, r4
 8014584:	461a      	mov	r2, r3
 8014586:	4628      	mov	r0, r5
 8014588:	f000 fc28 	bl	8014ddc <__lshift>
 801458c:	4604      	mov	r4, r0
 801458e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014590:	2b00      	cmp	r3, #0
 8014592:	d072      	beq.n	801467a <_dtoa_r+0x912>
 8014594:	4621      	mov	r1, r4
 8014596:	4650      	mov	r0, sl
 8014598:	f000 fc8c 	bl	8014eb4 <__mcmp>
 801459c:	2800      	cmp	r0, #0
 801459e:	da6c      	bge.n	801467a <_dtoa_r+0x912>
 80145a0:	2300      	movs	r3, #0
 80145a2:	4651      	mov	r1, sl
 80145a4:	220a      	movs	r2, #10
 80145a6:	4628      	mov	r0, r5
 80145a8:	f000 fa6c 	bl	8014a84 <__multadd>
 80145ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145ae:	4682      	mov	sl, r0
 80145b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	f000 81ac 	beq.w	8014912 <_dtoa_r+0xbaa>
 80145ba:	2300      	movs	r3, #0
 80145bc:	4631      	mov	r1, r6
 80145be:	220a      	movs	r2, #10
 80145c0:	4628      	mov	r0, r5
 80145c2:	f000 fa5f 	bl	8014a84 <__multadd>
 80145c6:	9b06      	ldr	r3, [sp, #24]
 80145c8:	4606      	mov	r6, r0
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	f300 8093 	bgt.w	80146f6 <_dtoa_r+0x98e>
 80145d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80145d2:	2b02      	cmp	r3, #2
 80145d4:	dc59      	bgt.n	801468a <_dtoa_r+0x922>
 80145d6:	e08e      	b.n	80146f6 <_dtoa_r+0x98e>
 80145d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80145da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80145de:	e75d      	b.n	801449c <_dtoa_r+0x734>
 80145e0:	9b08      	ldr	r3, [sp, #32]
 80145e2:	1e5c      	subs	r4, r3, #1
 80145e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145e6:	42a3      	cmp	r3, r4
 80145e8:	bfbf      	itttt	lt
 80145ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80145ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80145ee:	1ae3      	sublt	r3, r4, r3
 80145f0:	18d2      	addlt	r2, r2, r3
 80145f2:	bfa8      	it	ge
 80145f4:	1b1c      	subge	r4, r3, r4
 80145f6:	9b08      	ldr	r3, [sp, #32]
 80145f8:	bfbe      	ittt	lt
 80145fa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80145fc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80145fe:	2400      	movlt	r4, #0
 8014600:	2b00      	cmp	r3, #0
 8014602:	bfb5      	itete	lt
 8014604:	eba9 0703 	sublt.w	r7, r9, r3
 8014608:	464f      	movge	r7, r9
 801460a:	2300      	movlt	r3, #0
 801460c:	9b08      	ldrge	r3, [sp, #32]
 801460e:	e747      	b.n	80144a0 <_dtoa_r+0x738>
 8014610:	464f      	mov	r7, r9
 8014612:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014614:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014616:	e74c      	b.n	80144b2 <_dtoa_r+0x74a>
 8014618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801461a:	e773      	b.n	8014504 <_dtoa_r+0x79c>
 801461c:	3fe00000 	.word	0x3fe00000
 8014620:	40240000 	.word	0x40240000
 8014624:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014626:	2b01      	cmp	r3, #1
 8014628:	dc18      	bgt.n	801465c <_dtoa_r+0x8f4>
 801462a:	9b04      	ldr	r3, [sp, #16]
 801462c:	b9b3      	cbnz	r3, 801465c <_dtoa_r+0x8f4>
 801462e:	9b05      	ldr	r3, [sp, #20]
 8014630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014634:	b993      	cbnz	r3, 801465c <_dtoa_r+0x8f4>
 8014636:	9b05      	ldr	r3, [sp, #20]
 8014638:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801463c:	0d1b      	lsrs	r3, r3, #20
 801463e:	051b      	lsls	r3, r3, #20
 8014640:	b17b      	cbz	r3, 8014662 <_dtoa_r+0x8fa>
 8014642:	f04f 0801 	mov.w	r8, #1
 8014646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014648:	f109 0901 	add.w	r9, r9, #1
 801464c:	3301      	adds	r3, #1
 801464e:	9309      	str	r3, [sp, #36]	; 0x24
 8014650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014652:	2b00      	cmp	r3, #0
 8014654:	f47f af6f 	bne.w	8014536 <_dtoa_r+0x7ce>
 8014658:	2001      	movs	r0, #1
 801465a:	e774      	b.n	8014546 <_dtoa_r+0x7de>
 801465c:	f04f 0800 	mov.w	r8, #0
 8014660:	e7f6      	b.n	8014650 <_dtoa_r+0x8e8>
 8014662:	4698      	mov	r8, r3
 8014664:	e7f4      	b.n	8014650 <_dtoa_r+0x8e8>
 8014666:	d080      	beq.n	801456a <_dtoa_r+0x802>
 8014668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801466a:	331c      	adds	r3, #28
 801466c:	441a      	add	r2, r3
 801466e:	4499      	add	r9, r3
 8014670:	441f      	add	r7, r3
 8014672:	9209      	str	r2, [sp, #36]	; 0x24
 8014674:	e779      	b.n	801456a <_dtoa_r+0x802>
 8014676:	4603      	mov	r3, r0
 8014678:	e7f6      	b.n	8014668 <_dtoa_r+0x900>
 801467a:	9b08      	ldr	r3, [sp, #32]
 801467c:	2b00      	cmp	r3, #0
 801467e:	dc34      	bgt.n	80146ea <_dtoa_r+0x982>
 8014680:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014682:	2b02      	cmp	r3, #2
 8014684:	dd31      	ble.n	80146ea <_dtoa_r+0x982>
 8014686:	9b08      	ldr	r3, [sp, #32]
 8014688:	9306      	str	r3, [sp, #24]
 801468a:	9b06      	ldr	r3, [sp, #24]
 801468c:	b963      	cbnz	r3, 80146a8 <_dtoa_r+0x940>
 801468e:	4621      	mov	r1, r4
 8014690:	2205      	movs	r2, #5
 8014692:	4628      	mov	r0, r5
 8014694:	f000 f9f6 	bl	8014a84 <__multadd>
 8014698:	4601      	mov	r1, r0
 801469a:	4604      	mov	r4, r0
 801469c:	4650      	mov	r0, sl
 801469e:	f000 fc09 	bl	8014eb4 <__mcmp>
 80146a2:	2800      	cmp	r0, #0
 80146a4:	f73f adbf 	bgt.w	8014226 <_dtoa_r+0x4be>
 80146a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80146aa:	9f03      	ldr	r7, [sp, #12]
 80146ac:	ea6f 0b03 	mvn.w	fp, r3
 80146b0:	f04f 0800 	mov.w	r8, #0
 80146b4:	4621      	mov	r1, r4
 80146b6:	4628      	mov	r0, r5
 80146b8:	f000 f9c2 	bl	8014a40 <_Bfree>
 80146bc:	2e00      	cmp	r6, #0
 80146be:	f43f aead 	beq.w	801441c <_dtoa_r+0x6b4>
 80146c2:	f1b8 0f00 	cmp.w	r8, #0
 80146c6:	d005      	beq.n	80146d4 <_dtoa_r+0x96c>
 80146c8:	45b0      	cmp	r8, r6
 80146ca:	d003      	beq.n	80146d4 <_dtoa_r+0x96c>
 80146cc:	4641      	mov	r1, r8
 80146ce:	4628      	mov	r0, r5
 80146d0:	f000 f9b6 	bl	8014a40 <_Bfree>
 80146d4:	4631      	mov	r1, r6
 80146d6:	4628      	mov	r0, r5
 80146d8:	f000 f9b2 	bl	8014a40 <_Bfree>
 80146dc:	e69e      	b.n	801441c <_dtoa_r+0x6b4>
 80146de:	2400      	movs	r4, #0
 80146e0:	4626      	mov	r6, r4
 80146e2:	e7e1      	b.n	80146a8 <_dtoa_r+0x940>
 80146e4:	46c3      	mov	fp, r8
 80146e6:	4626      	mov	r6, r4
 80146e8:	e59d      	b.n	8014226 <_dtoa_r+0x4be>
 80146ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	f000 80c8 	beq.w	8014882 <_dtoa_r+0xb1a>
 80146f2:	9b08      	ldr	r3, [sp, #32]
 80146f4:	9306      	str	r3, [sp, #24]
 80146f6:	2f00      	cmp	r7, #0
 80146f8:	dd05      	ble.n	8014706 <_dtoa_r+0x99e>
 80146fa:	4631      	mov	r1, r6
 80146fc:	463a      	mov	r2, r7
 80146fe:	4628      	mov	r0, r5
 8014700:	f000 fb6c 	bl	8014ddc <__lshift>
 8014704:	4606      	mov	r6, r0
 8014706:	f1b8 0f00 	cmp.w	r8, #0
 801470a:	d05b      	beq.n	80147c4 <_dtoa_r+0xa5c>
 801470c:	4628      	mov	r0, r5
 801470e:	6871      	ldr	r1, [r6, #4]
 8014710:	f000 f956 	bl	80149c0 <_Balloc>
 8014714:	4607      	mov	r7, r0
 8014716:	b928      	cbnz	r0, 8014724 <_dtoa_r+0x9bc>
 8014718:	4602      	mov	r2, r0
 801471a:	f240 21ef 	movw	r1, #751	; 0x2ef
 801471e:	4b81      	ldr	r3, [pc, #516]	; (8014924 <_dtoa_r+0xbbc>)
 8014720:	f7ff bb36 	b.w	8013d90 <_dtoa_r+0x28>
 8014724:	6932      	ldr	r2, [r6, #16]
 8014726:	f106 010c 	add.w	r1, r6, #12
 801472a:	3202      	adds	r2, #2
 801472c:	0092      	lsls	r2, r2, #2
 801472e:	300c      	adds	r0, #12
 8014730:	f7ff fa82 	bl	8013c38 <memcpy>
 8014734:	2201      	movs	r2, #1
 8014736:	4639      	mov	r1, r7
 8014738:	4628      	mov	r0, r5
 801473a:	f000 fb4f 	bl	8014ddc <__lshift>
 801473e:	46b0      	mov	r8, r6
 8014740:	4606      	mov	r6, r0
 8014742:	9b03      	ldr	r3, [sp, #12]
 8014744:	9a03      	ldr	r2, [sp, #12]
 8014746:	3301      	adds	r3, #1
 8014748:	9308      	str	r3, [sp, #32]
 801474a:	9b06      	ldr	r3, [sp, #24]
 801474c:	4413      	add	r3, r2
 801474e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014750:	9b04      	ldr	r3, [sp, #16]
 8014752:	f003 0301 	and.w	r3, r3, #1
 8014756:	930a      	str	r3, [sp, #40]	; 0x28
 8014758:	9b08      	ldr	r3, [sp, #32]
 801475a:	4621      	mov	r1, r4
 801475c:	3b01      	subs	r3, #1
 801475e:	4650      	mov	r0, sl
 8014760:	9304      	str	r3, [sp, #16]
 8014762:	f7ff fa77 	bl	8013c54 <quorem>
 8014766:	4641      	mov	r1, r8
 8014768:	9006      	str	r0, [sp, #24]
 801476a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801476e:	4650      	mov	r0, sl
 8014770:	f000 fba0 	bl	8014eb4 <__mcmp>
 8014774:	4632      	mov	r2, r6
 8014776:	9009      	str	r0, [sp, #36]	; 0x24
 8014778:	4621      	mov	r1, r4
 801477a:	4628      	mov	r0, r5
 801477c:	f000 fbb6 	bl	8014eec <__mdiff>
 8014780:	68c2      	ldr	r2, [r0, #12]
 8014782:	4607      	mov	r7, r0
 8014784:	bb02      	cbnz	r2, 80147c8 <_dtoa_r+0xa60>
 8014786:	4601      	mov	r1, r0
 8014788:	4650      	mov	r0, sl
 801478a:	f000 fb93 	bl	8014eb4 <__mcmp>
 801478e:	4602      	mov	r2, r0
 8014790:	4639      	mov	r1, r7
 8014792:	4628      	mov	r0, r5
 8014794:	920c      	str	r2, [sp, #48]	; 0x30
 8014796:	f000 f953 	bl	8014a40 <_Bfree>
 801479a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801479c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801479e:	9f08      	ldr	r7, [sp, #32]
 80147a0:	ea43 0102 	orr.w	r1, r3, r2
 80147a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147a6:	4319      	orrs	r1, r3
 80147a8:	d110      	bne.n	80147cc <_dtoa_r+0xa64>
 80147aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80147ae:	d029      	beq.n	8014804 <_dtoa_r+0xa9c>
 80147b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	dd02      	ble.n	80147bc <_dtoa_r+0xa54>
 80147b6:	9b06      	ldr	r3, [sp, #24]
 80147b8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80147bc:	9b04      	ldr	r3, [sp, #16]
 80147be:	f883 9000 	strb.w	r9, [r3]
 80147c2:	e777      	b.n	80146b4 <_dtoa_r+0x94c>
 80147c4:	4630      	mov	r0, r6
 80147c6:	e7ba      	b.n	801473e <_dtoa_r+0x9d6>
 80147c8:	2201      	movs	r2, #1
 80147ca:	e7e1      	b.n	8014790 <_dtoa_r+0xa28>
 80147cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	db04      	blt.n	80147dc <_dtoa_r+0xa74>
 80147d2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80147d4:	430b      	orrs	r3, r1
 80147d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80147d8:	430b      	orrs	r3, r1
 80147da:	d120      	bne.n	801481e <_dtoa_r+0xab6>
 80147dc:	2a00      	cmp	r2, #0
 80147de:	dded      	ble.n	80147bc <_dtoa_r+0xa54>
 80147e0:	4651      	mov	r1, sl
 80147e2:	2201      	movs	r2, #1
 80147e4:	4628      	mov	r0, r5
 80147e6:	f000 faf9 	bl	8014ddc <__lshift>
 80147ea:	4621      	mov	r1, r4
 80147ec:	4682      	mov	sl, r0
 80147ee:	f000 fb61 	bl	8014eb4 <__mcmp>
 80147f2:	2800      	cmp	r0, #0
 80147f4:	dc03      	bgt.n	80147fe <_dtoa_r+0xa96>
 80147f6:	d1e1      	bne.n	80147bc <_dtoa_r+0xa54>
 80147f8:	f019 0f01 	tst.w	r9, #1
 80147fc:	d0de      	beq.n	80147bc <_dtoa_r+0xa54>
 80147fe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014802:	d1d8      	bne.n	80147b6 <_dtoa_r+0xa4e>
 8014804:	2339      	movs	r3, #57	; 0x39
 8014806:	9a04      	ldr	r2, [sp, #16]
 8014808:	7013      	strb	r3, [r2, #0]
 801480a:	463b      	mov	r3, r7
 801480c:	461f      	mov	r7, r3
 801480e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8014812:	3b01      	subs	r3, #1
 8014814:	2a39      	cmp	r2, #57	; 0x39
 8014816:	d06b      	beq.n	80148f0 <_dtoa_r+0xb88>
 8014818:	3201      	adds	r2, #1
 801481a:	701a      	strb	r2, [r3, #0]
 801481c:	e74a      	b.n	80146b4 <_dtoa_r+0x94c>
 801481e:	2a00      	cmp	r2, #0
 8014820:	dd07      	ble.n	8014832 <_dtoa_r+0xaca>
 8014822:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014826:	d0ed      	beq.n	8014804 <_dtoa_r+0xa9c>
 8014828:	9a04      	ldr	r2, [sp, #16]
 801482a:	f109 0301 	add.w	r3, r9, #1
 801482e:	7013      	strb	r3, [r2, #0]
 8014830:	e740      	b.n	80146b4 <_dtoa_r+0x94c>
 8014832:	9b08      	ldr	r3, [sp, #32]
 8014834:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014836:	f803 9c01 	strb.w	r9, [r3, #-1]
 801483a:	4293      	cmp	r3, r2
 801483c:	d042      	beq.n	80148c4 <_dtoa_r+0xb5c>
 801483e:	4651      	mov	r1, sl
 8014840:	2300      	movs	r3, #0
 8014842:	220a      	movs	r2, #10
 8014844:	4628      	mov	r0, r5
 8014846:	f000 f91d 	bl	8014a84 <__multadd>
 801484a:	45b0      	cmp	r8, r6
 801484c:	4682      	mov	sl, r0
 801484e:	f04f 0300 	mov.w	r3, #0
 8014852:	f04f 020a 	mov.w	r2, #10
 8014856:	4641      	mov	r1, r8
 8014858:	4628      	mov	r0, r5
 801485a:	d107      	bne.n	801486c <_dtoa_r+0xb04>
 801485c:	f000 f912 	bl	8014a84 <__multadd>
 8014860:	4680      	mov	r8, r0
 8014862:	4606      	mov	r6, r0
 8014864:	9b08      	ldr	r3, [sp, #32]
 8014866:	3301      	adds	r3, #1
 8014868:	9308      	str	r3, [sp, #32]
 801486a:	e775      	b.n	8014758 <_dtoa_r+0x9f0>
 801486c:	f000 f90a 	bl	8014a84 <__multadd>
 8014870:	4631      	mov	r1, r6
 8014872:	4680      	mov	r8, r0
 8014874:	2300      	movs	r3, #0
 8014876:	220a      	movs	r2, #10
 8014878:	4628      	mov	r0, r5
 801487a:	f000 f903 	bl	8014a84 <__multadd>
 801487e:	4606      	mov	r6, r0
 8014880:	e7f0      	b.n	8014864 <_dtoa_r+0xafc>
 8014882:	9b08      	ldr	r3, [sp, #32]
 8014884:	9306      	str	r3, [sp, #24]
 8014886:	9f03      	ldr	r7, [sp, #12]
 8014888:	4621      	mov	r1, r4
 801488a:	4650      	mov	r0, sl
 801488c:	f7ff f9e2 	bl	8013c54 <quorem>
 8014890:	9b03      	ldr	r3, [sp, #12]
 8014892:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014896:	f807 9b01 	strb.w	r9, [r7], #1
 801489a:	1afa      	subs	r2, r7, r3
 801489c:	9b06      	ldr	r3, [sp, #24]
 801489e:	4293      	cmp	r3, r2
 80148a0:	dd07      	ble.n	80148b2 <_dtoa_r+0xb4a>
 80148a2:	4651      	mov	r1, sl
 80148a4:	2300      	movs	r3, #0
 80148a6:	220a      	movs	r2, #10
 80148a8:	4628      	mov	r0, r5
 80148aa:	f000 f8eb 	bl	8014a84 <__multadd>
 80148ae:	4682      	mov	sl, r0
 80148b0:	e7ea      	b.n	8014888 <_dtoa_r+0xb20>
 80148b2:	9b06      	ldr	r3, [sp, #24]
 80148b4:	f04f 0800 	mov.w	r8, #0
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	bfcc      	ite	gt
 80148bc:	461f      	movgt	r7, r3
 80148be:	2701      	movle	r7, #1
 80148c0:	9b03      	ldr	r3, [sp, #12]
 80148c2:	441f      	add	r7, r3
 80148c4:	4651      	mov	r1, sl
 80148c6:	2201      	movs	r2, #1
 80148c8:	4628      	mov	r0, r5
 80148ca:	f000 fa87 	bl	8014ddc <__lshift>
 80148ce:	4621      	mov	r1, r4
 80148d0:	4682      	mov	sl, r0
 80148d2:	f000 faef 	bl	8014eb4 <__mcmp>
 80148d6:	2800      	cmp	r0, #0
 80148d8:	dc97      	bgt.n	801480a <_dtoa_r+0xaa2>
 80148da:	d102      	bne.n	80148e2 <_dtoa_r+0xb7a>
 80148dc:	f019 0f01 	tst.w	r9, #1
 80148e0:	d193      	bne.n	801480a <_dtoa_r+0xaa2>
 80148e2:	463b      	mov	r3, r7
 80148e4:	461f      	mov	r7, r3
 80148e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80148ea:	2a30      	cmp	r2, #48	; 0x30
 80148ec:	d0fa      	beq.n	80148e4 <_dtoa_r+0xb7c>
 80148ee:	e6e1      	b.n	80146b4 <_dtoa_r+0x94c>
 80148f0:	9a03      	ldr	r2, [sp, #12]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d18a      	bne.n	801480c <_dtoa_r+0xaa4>
 80148f6:	2331      	movs	r3, #49	; 0x31
 80148f8:	f10b 0b01 	add.w	fp, fp, #1
 80148fc:	e797      	b.n	801482e <_dtoa_r+0xac6>
 80148fe:	4b0a      	ldr	r3, [pc, #40]	; (8014928 <_dtoa_r+0xbc0>)
 8014900:	f7ff ba9f 	b.w	8013e42 <_dtoa_r+0xda>
 8014904:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014906:	2b00      	cmp	r3, #0
 8014908:	f47f aa77 	bne.w	8013dfa <_dtoa_r+0x92>
 801490c:	4b07      	ldr	r3, [pc, #28]	; (801492c <_dtoa_r+0xbc4>)
 801490e:	f7ff ba98 	b.w	8013e42 <_dtoa_r+0xda>
 8014912:	9b06      	ldr	r3, [sp, #24]
 8014914:	2b00      	cmp	r3, #0
 8014916:	dcb6      	bgt.n	8014886 <_dtoa_r+0xb1e>
 8014918:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801491a:	2b02      	cmp	r3, #2
 801491c:	f73f aeb5 	bgt.w	801468a <_dtoa_r+0x922>
 8014920:	e7b1      	b.n	8014886 <_dtoa_r+0xb1e>
 8014922:	bf00      	nop
 8014924:	08016420 	.word	0x08016420
 8014928:	08016380 	.word	0x08016380
 801492c:	080163a4 	.word	0x080163a4

08014930 <_free_r>:
 8014930:	b538      	push	{r3, r4, r5, lr}
 8014932:	4605      	mov	r5, r0
 8014934:	2900      	cmp	r1, #0
 8014936:	d040      	beq.n	80149ba <_free_r+0x8a>
 8014938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801493c:	1f0c      	subs	r4, r1, #4
 801493e:	2b00      	cmp	r3, #0
 8014940:	bfb8      	it	lt
 8014942:	18e4      	addlt	r4, r4, r3
 8014944:	f7fe fa5c 	bl	8012e00 <__malloc_lock>
 8014948:	4a1c      	ldr	r2, [pc, #112]	; (80149bc <_free_r+0x8c>)
 801494a:	6813      	ldr	r3, [r2, #0]
 801494c:	b933      	cbnz	r3, 801495c <_free_r+0x2c>
 801494e:	6063      	str	r3, [r4, #4]
 8014950:	6014      	str	r4, [r2, #0]
 8014952:	4628      	mov	r0, r5
 8014954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014958:	f7fe ba58 	b.w	8012e0c <__malloc_unlock>
 801495c:	42a3      	cmp	r3, r4
 801495e:	d908      	bls.n	8014972 <_free_r+0x42>
 8014960:	6820      	ldr	r0, [r4, #0]
 8014962:	1821      	adds	r1, r4, r0
 8014964:	428b      	cmp	r3, r1
 8014966:	bf01      	itttt	eq
 8014968:	6819      	ldreq	r1, [r3, #0]
 801496a:	685b      	ldreq	r3, [r3, #4]
 801496c:	1809      	addeq	r1, r1, r0
 801496e:	6021      	streq	r1, [r4, #0]
 8014970:	e7ed      	b.n	801494e <_free_r+0x1e>
 8014972:	461a      	mov	r2, r3
 8014974:	685b      	ldr	r3, [r3, #4]
 8014976:	b10b      	cbz	r3, 801497c <_free_r+0x4c>
 8014978:	42a3      	cmp	r3, r4
 801497a:	d9fa      	bls.n	8014972 <_free_r+0x42>
 801497c:	6811      	ldr	r1, [r2, #0]
 801497e:	1850      	adds	r0, r2, r1
 8014980:	42a0      	cmp	r0, r4
 8014982:	d10b      	bne.n	801499c <_free_r+0x6c>
 8014984:	6820      	ldr	r0, [r4, #0]
 8014986:	4401      	add	r1, r0
 8014988:	1850      	adds	r0, r2, r1
 801498a:	4283      	cmp	r3, r0
 801498c:	6011      	str	r1, [r2, #0]
 801498e:	d1e0      	bne.n	8014952 <_free_r+0x22>
 8014990:	6818      	ldr	r0, [r3, #0]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	4408      	add	r0, r1
 8014996:	6010      	str	r0, [r2, #0]
 8014998:	6053      	str	r3, [r2, #4]
 801499a:	e7da      	b.n	8014952 <_free_r+0x22>
 801499c:	d902      	bls.n	80149a4 <_free_r+0x74>
 801499e:	230c      	movs	r3, #12
 80149a0:	602b      	str	r3, [r5, #0]
 80149a2:	e7d6      	b.n	8014952 <_free_r+0x22>
 80149a4:	6820      	ldr	r0, [r4, #0]
 80149a6:	1821      	adds	r1, r4, r0
 80149a8:	428b      	cmp	r3, r1
 80149aa:	bf01      	itttt	eq
 80149ac:	6819      	ldreq	r1, [r3, #0]
 80149ae:	685b      	ldreq	r3, [r3, #4]
 80149b0:	1809      	addeq	r1, r1, r0
 80149b2:	6021      	streq	r1, [r4, #0]
 80149b4:	6063      	str	r3, [r4, #4]
 80149b6:	6054      	str	r4, [r2, #4]
 80149b8:	e7cb      	b.n	8014952 <_free_r+0x22>
 80149ba:	bd38      	pop	{r3, r4, r5, pc}
 80149bc:	200027d4 	.word	0x200027d4

080149c0 <_Balloc>:
 80149c0:	b570      	push	{r4, r5, r6, lr}
 80149c2:	69c6      	ldr	r6, [r0, #28]
 80149c4:	4604      	mov	r4, r0
 80149c6:	460d      	mov	r5, r1
 80149c8:	b976      	cbnz	r6, 80149e8 <_Balloc+0x28>
 80149ca:	2010      	movs	r0, #16
 80149cc:	f7fe f968 	bl	8012ca0 <malloc>
 80149d0:	4602      	mov	r2, r0
 80149d2:	61e0      	str	r0, [r4, #28]
 80149d4:	b920      	cbnz	r0, 80149e0 <_Balloc+0x20>
 80149d6:	216b      	movs	r1, #107	; 0x6b
 80149d8:	4b17      	ldr	r3, [pc, #92]	; (8014a38 <_Balloc+0x78>)
 80149da:	4818      	ldr	r0, [pc, #96]	; (8014a3c <_Balloc+0x7c>)
 80149dc:	f000 ff4a 	bl	8015874 <__assert_func>
 80149e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80149e4:	6006      	str	r6, [r0, #0]
 80149e6:	60c6      	str	r6, [r0, #12]
 80149e8:	69e6      	ldr	r6, [r4, #28]
 80149ea:	68f3      	ldr	r3, [r6, #12]
 80149ec:	b183      	cbz	r3, 8014a10 <_Balloc+0x50>
 80149ee:	69e3      	ldr	r3, [r4, #28]
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80149f6:	b9b8      	cbnz	r0, 8014a28 <_Balloc+0x68>
 80149f8:	2101      	movs	r1, #1
 80149fa:	fa01 f605 	lsl.w	r6, r1, r5
 80149fe:	1d72      	adds	r2, r6, #5
 8014a00:	4620      	mov	r0, r4
 8014a02:	0092      	lsls	r2, r2, #2
 8014a04:	f7fe f938 	bl	8012c78 <_calloc_r>
 8014a08:	b160      	cbz	r0, 8014a24 <_Balloc+0x64>
 8014a0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014a0e:	e00e      	b.n	8014a2e <_Balloc+0x6e>
 8014a10:	2221      	movs	r2, #33	; 0x21
 8014a12:	2104      	movs	r1, #4
 8014a14:	4620      	mov	r0, r4
 8014a16:	f7fe f92f 	bl	8012c78 <_calloc_r>
 8014a1a:	69e3      	ldr	r3, [r4, #28]
 8014a1c:	60f0      	str	r0, [r6, #12]
 8014a1e:	68db      	ldr	r3, [r3, #12]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d1e4      	bne.n	80149ee <_Balloc+0x2e>
 8014a24:	2000      	movs	r0, #0
 8014a26:	bd70      	pop	{r4, r5, r6, pc}
 8014a28:	6802      	ldr	r2, [r0, #0]
 8014a2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014a2e:	2300      	movs	r3, #0
 8014a30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014a34:	e7f7      	b.n	8014a26 <_Balloc+0x66>
 8014a36:	bf00      	nop
 8014a38:	080163b1 	.word	0x080163b1
 8014a3c:	08016431 	.word	0x08016431

08014a40 <_Bfree>:
 8014a40:	b570      	push	{r4, r5, r6, lr}
 8014a42:	69c6      	ldr	r6, [r0, #28]
 8014a44:	4605      	mov	r5, r0
 8014a46:	460c      	mov	r4, r1
 8014a48:	b976      	cbnz	r6, 8014a68 <_Bfree+0x28>
 8014a4a:	2010      	movs	r0, #16
 8014a4c:	f7fe f928 	bl	8012ca0 <malloc>
 8014a50:	4602      	mov	r2, r0
 8014a52:	61e8      	str	r0, [r5, #28]
 8014a54:	b920      	cbnz	r0, 8014a60 <_Bfree+0x20>
 8014a56:	218f      	movs	r1, #143	; 0x8f
 8014a58:	4b08      	ldr	r3, [pc, #32]	; (8014a7c <_Bfree+0x3c>)
 8014a5a:	4809      	ldr	r0, [pc, #36]	; (8014a80 <_Bfree+0x40>)
 8014a5c:	f000 ff0a 	bl	8015874 <__assert_func>
 8014a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014a64:	6006      	str	r6, [r0, #0]
 8014a66:	60c6      	str	r6, [r0, #12]
 8014a68:	b13c      	cbz	r4, 8014a7a <_Bfree+0x3a>
 8014a6a:	69eb      	ldr	r3, [r5, #28]
 8014a6c:	6862      	ldr	r2, [r4, #4]
 8014a6e:	68db      	ldr	r3, [r3, #12]
 8014a70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014a74:	6021      	str	r1, [r4, #0]
 8014a76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014a7a:	bd70      	pop	{r4, r5, r6, pc}
 8014a7c:	080163b1 	.word	0x080163b1
 8014a80:	08016431 	.word	0x08016431

08014a84 <__multadd>:
 8014a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a88:	4607      	mov	r7, r0
 8014a8a:	460c      	mov	r4, r1
 8014a8c:	461e      	mov	r6, r3
 8014a8e:	2000      	movs	r0, #0
 8014a90:	690d      	ldr	r5, [r1, #16]
 8014a92:	f101 0c14 	add.w	ip, r1, #20
 8014a96:	f8dc 3000 	ldr.w	r3, [ip]
 8014a9a:	3001      	adds	r0, #1
 8014a9c:	b299      	uxth	r1, r3
 8014a9e:	fb02 6101 	mla	r1, r2, r1, r6
 8014aa2:	0c1e      	lsrs	r6, r3, #16
 8014aa4:	0c0b      	lsrs	r3, r1, #16
 8014aa6:	fb02 3306 	mla	r3, r2, r6, r3
 8014aaa:	b289      	uxth	r1, r1
 8014aac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014ab0:	4285      	cmp	r5, r0
 8014ab2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014ab6:	f84c 1b04 	str.w	r1, [ip], #4
 8014aba:	dcec      	bgt.n	8014a96 <__multadd+0x12>
 8014abc:	b30e      	cbz	r6, 8014b02 <__multadd+0x7e>
 8014abe:	68a3      	ldr	r3, [r4, #8]
 8014ac0:	42ab      	cmp	r3, r5
 8014ac2:	dc19      	bgt.n	8014af8 <__multadd+0x74>
 8014ac4:	6861      	ldr	r1, [r4, #4]
 8014ac6:	4638      	mov	r0, r7
 8014ac8:	3101      	adds	r1, #1
 8014aca:	f7ff ff79 	bl	80149c0 <_Balloc>
 8014ace:	4680      	mov	r8, r0
 8014ad0:	b928      	cbnz	r0, 8014ade <__multadd+0x5a>
 8014ad2:	4602      	mov	r2, r0
 8014ad4:	21ba      	movs	r1, #186	; 0xba
 8014ad6:	4b0c      	ldr	r3, [pc, #48]	; (8014b08 <__multadd+0x84>)
 8014ad8:	480c      	ldr	r0, [pc, #48]	; (8014b0c <__multadd+0x88>)
 8014ada:	f000 fecb 	bl	8015874 <__assert_func>
 8014ade:	6922      	ldr	r2, [r4, #16]
 8014ae0:	f104 010c 	add.w	r1, r4, #12
 8014ae4:	3202      	adds	r2, #2
 8014ae6:	0092      	lsls	r2, r2, #2
 8014ae8:	300c      	adds	r0, #12
 8014aea:	f7ff f8a5 	bl	8013c38 <memcpy>
 8014aee:	4621      	mov	r1, r4
 8014af0:	4638      	mov	r0, r7
 8014af2:	f7ff ffa5 	bl	8014a40 <_Bfree>
 8014af6:	4644      	mov	r4, r8
 8014af8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014afc:	3501      	adds	r5, #1
 8014afe:	615e      	str	r6, [r3, #20]
 8014b00:	6125      	str	r5, [r4, #16]
 8014b02:	4620      	mov	r0, r4
 8014b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b08:	08016420 	.word	0x08016420
 8014b0c:	08016431 	.word	0x08016431

08014b10 <__hi0bits>:
 8014b10:	0c02      	lsrs	r2, r0, #16
 8014b12:	0412      	lsls	r2, r2, #16
 8014b14:	4603      	mov	r3, r0
 8014b16:	b9ca      	cbnz	r2, 8014b4c <__hi0bits+0x3c>
 8014b18:	0403      	lsls	r3, r0, #16
 8014b1a:	2010      	movs	r0, #16
 8014b1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014b20:	bf04      	itt	eq
 8014b22:	021b      	lsleq	r3, r3, #8
 8014b24:	3008      	addeq	r0, #8
 8014b26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014b2a:	bf04      	itt	eq
 8014b2c:	011b      	lsleq	r3, r3, #4
 8014b2e:	3004      	addeq	r0, #4
 8014b30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014b34:	bf04      	itt	eq
 8014b36:	009b      	lsleq	r3, r3, #2
 8014b38:	3002      	addeq	r0, #2
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	db05      	blt.n	8014b4a <__hi0bits+0x3a>
 8014b3e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8014b42:	f100 0001 	add.w	r0, r0, #1
 8014b46:	bf08      	it	eq
 8014b48:	2020      	moveq	r0, #32
 8014b4a:	4770      	bx	lr
 8014b4c:	2000      	movs	r0, #0
 8014b4e:	e7e5      	b.n	8014b1c <__hi0bits+0xc>

08014b50 <__lo0bits>:
 8014b50:	6803      	ldr	r3, [r0, #0]
 8014b52:	4602      	mov	r2, r0
 8014b54:	f013 0007 	ands.w	r0, r3, #7
 8014b58:	d00b      	beq.n	8014b72 <__lo0bits+0x22>
 8014b5a:	07d9      	lsls	r1, r3, #31
 8014b5c:	d421      	bmi.n	8014ba2 <__lo0bits+0x52>
 8014b5e:	0798      	lsls	r0, r3, #30
 8014b60:	bf49      	itett	mi
 8014b62:	085b      	lsrmi	r3, r3, #1
 8014b64:	089b      	lsrpl	r3, r3, #2
 8014b66:	2001      	movmi	r0, #1
 8014b68:	6013      	strmi	r3, [r2, #0]
 8014b6a:	bf5c      	itt	pl
 8014b6c:	2002      	movpl	r0, #2
 8014b6e:	6013      	strpl	r3, [r2, #0]
 8014b70:	4770      	bx	lr
 8014b72:	b299      	uxth	r1, r3
 8014b74:	b909      	cbnz	r1, 8014b7a <__lo0bits+0x2a>
 8014b76:	2010      	movs	r0, #16
 8014b78:	0c1b      	lsrs	r3, r3, #16
 8014b7a:	b2d9      	uxtb	r1, r3
 8014b7c:	b909      	cbnz	r1, 8014b82 <__lo0bits+0x32>
 8014b7e:	3008      	adds	r0, #8
 8014b80:	0a1b      	lsrs	r3, r3, #8
 8014b82:	0719      	lsls	r1, r3, #28
 8014b84:	bf04      	itt	eq
 8014b86:	091b      	lsreq	r3, r3, #4
 8014b88:	3004      	addeq	r0, #4
 8014b8a:	0799      	lsls	r1, r3, #30
 8014b8c:	bf04      	itt	eq
 8014b8e:	089b      	lsreq	r3, r3, #2
 8014b90:	3002      	addeq	r0, #2
 8014b92:	07d9      	lsls	r1, r3, #31
 8014b94:	d403      	bmi.n	8014b9e <__lo0bits+0x4e>
 8014b96:	085b      	lsrs	r3, r3, #1
 8014b98:	f100 0001 	add.w	r0, r0, #1
 8014b9c:	d003      	beq.n	8014ba6 <__lo0bits+0x56>
 8014b9e:	6013      	str	r3, [r2, #0]
 8014ba0:	4770      	bx	lr
 8014ba2:	2000      	movs	r0, #0
 8014ba4:	4770      	bx	lr
 8014ba6:	2020      	movs	r0, #32
 8014ba8:	4770      	bx	lr
	...

08014bac <__i2b>:
 8014bac:	b510      	push	{r4, lr}
 8014bae:	460c      	mov	r4, r1
 8014bb0:	2101      	movs	r1, #1
 8014bb2:	f7ff ff05 	bl	80149c0 <_Balloc>
 8014bb6:	4602      	mov	r2, r0
 8014bb8:	b928      	cbnz	r0, 8014bc6 <__i2b+0x1a>
 8014bba:	f240 1145 	movw	r1, #325	; 0x145
 8014bbe:	4b04      	ldr	r3, [pc, #16]	; (8014bd0 <__i2b+0x24>)
 8014bc0:	4804      	ldr	r0, [pc, #16]	; (8014bd4 <__i2b+0x28>)
 8014bc2:	f000 fe57 	bl	8015874 <__assert_func>
 8014bc6:	2301      	movs	r3, #1
 8014bc8:	6144      	str	r4, [r0, #20]
 8014bca:	6103      	str	r3, [r0, #16]
 8014bcc:	bd10      	pop	{r4, pc}
 8014bce:	bf00      	nop
 8014bd0:	08016420 	.word	0x08016420
 8014bd4:	08016431 	.word	0x08016431

08014bd8 <__multiply>:
 8014bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bdc:	4691      	mov	r9, r2
 8014bde:	690a      	ldr	r2, [r1, #16]
 8014be0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014be4:	460c      	mov	r4, r1
 8014be6:	429a      	cmp	r2, r3
 8014be8:	bfbe      	ittt	lt
 8014bea:	460b      	movlt	r3, r1
 8014bec:	464c      	movlt	r4, r9
 8014bee:	4699      	movlt	r9, r3
 8014bf0:	6927      	ldr	r7, [r4, #16]
 8014bf2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014bf6:	68a3      	ldr	r3, [r4, #8]
 8014bf8:	6861      	ldr	r1, [r4, #4]
 8014bfa:	eb07 060a 	add.w	r6, r7, sl
 8014bfe:	42b3      	cmp	r3, r6
 8014c00:	b085      	sub	sp, #20
 8014c02:	bfb8      	it	lt
 8014c04:	3101      	addlt	r1, #1
 8014c06:	f7ff fedb 	bl	80149c0 <_Balloc>
 8014c0a:	b930      	cbnz	r0, 8014c1a <__multiply+0x42>
 8014c0c:	4602      	mov	r2, r0
 8014c0e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014c12:	4b43      	ldr	r3, [pc, #268]	; (8014d20 <__multiply+0x148>)
 8014c14:	4843      	ldr	r0, [pc, #268]	; (8014d24 <__multiply+0x14c>)
 8014c16:	f000 fe2d 	bl	8015874 <__assert_func>
 8014c1a:	f100 0514 	add.w	r5, r0, #20
 8014c1e:	462b      	mov	r3, r5
 8014c20:	2200      	movs	r2, #0
 8014c22:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014c26:	4543      	cmp	r3, r8
 8014c28:	d321      	bcc.n	8014c6e <__multiply+0x96>
 8014c2a:	f104 0314 	add.w	r3, r4, #20
 8014c2e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014c32:	f109 0314 	add.w	r3, r9, #20
 8014c36:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014c3a:	9202      	str	r2, [sp, #8]
 8014c3c:	1b3a      	subs	r2, r7, r4
 8014c3e:	3a15      	subs	r2, #21
 8014c40:	f022 0203 	bic.w	r2, r2, #3
 8014c44:	3204      	adds	r2, #4
 8014c46:	f104 0115 	add.w	r1, r4, #21
 8014c4a:	428f      	cmp	r7, r1
 8014c4c:	bf38      	it	cc
 8014c4e:	2204      	movcc	r2, #4
 8014c50:	9201      	str	r2, [sp, #4]
 8014c52:	9a02      	ldr	r2, [sp, #8]
 8014c54:	9303      	str	r3, [sp, #12]
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d80c      	bhi.n	8014c74 <__multiply+0x9c>
 8014c5a:	2e00      	cmp	r6, #0
 8014c5c:	dd03      	ble.n	8014c66 <__multiply+0x8e>
 8014c5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d05a      	beq.n	8014d1c <__multiply+0x144>
 8014c66:	6106      	str	r6, [r0, #16]
 8014c68:	b005      	add	sp, #20
 8014c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c6e:	f843 2b04 	str.w	r2, [r3], #4
 8014c72:	e7d8      	b.n	8014c26 <__multiply+0x4e>
 8014c74:	f8b3 a000 	ldrh.w	sl, [r3]
 8014c78:	f1ba 0f00 	cmp.w	sl, #0
 8014c7c:	d023      	beq.n	8014cc6 <__multiply+0xee>
 8014c7e:	46a9      	mov	r9, r5
 8014c80:	f04f 0c00 	mov.w	ip, #0
 8014c84:	f104 0e14 	add.w	lr, r4, #20
 8014c88:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014c8c:	f8d9 1000 	ldr.w	r1, [r9]
 8014c90:	fa1f fb82 	uxth.w	fp, r2
 8014c94:	b289      	uxth	r1, r1
 8014c96:	fb0a 110b 	mla	r1, sl, fp, r1
 8014c9a:	4461      	add	r1, ip
 8014c9c:	f8d9 c000 	ldr.w	ip, [r9]
 8014ca0:	0c12      	lsrs	r2, r2, #16
 8014ca2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014ca6:	fb0a c202 	mla	r2, sl, r2, ip
 8014caa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014cae:	b289      	uxth	r1, r1
 8014cb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014cb4:	4577      	cmp	r7, lr
 8014cb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014cba:	f849 1b04 	str.w	r1, [r9], #4
 8014cbe:	d8e3      	bhi.n	8014c88 <__multiply+0xb0>
 8014cc0:	9a01      	ldr	r2, [sp, #4]
 8014cc2:	f845 c002 	str.w	ip, [r5, r2]
 8014cc6:	9a03      	ldr	r2, [sp, #12]
 8014cc8:	3304      	adds	r3, #4
 8014cca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014cce:	f1b9 0f00 	cmp.w	r9, #0
 8014cd2:	d021      	beq.n	8014d18 <__multiply+0x140>
 8014cd4:	46ae      	mov	lr, r5
 8014cd6:	f04f 0a00 	mov.w	sl, #0
 8014cda:	6829      	ldr	r1, [r5, #0]
 8014cdc:	f104 0c14 	add.w	ip, r4, #20
 8014ce0:	f8bc b000 	ldrh.w	fp, [ip]
 8014ce4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014ce8:	b289      	uxth	r1, r1
 8014cea:	fb09 220b 	mla	r2, r9, fp, r2
 8014cee:	4452      	add	r2, sl
 8014cf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014cf4:	f84e 1b04 	str.w	r1, [lr], #4
 8014cf8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014cfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014d00:	f8be 1000 	ldrh.w	r1, [lr]
 8014d04:	4567      	cmp	r7, ip
 8014d06:	fb09 110a 	mla	r1, r9, sl, r1
 8014d0a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014d0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014d12:	d8e5      	bhi.n	8014ce0 <__multiply+0x108>
 8014d14:	9a01      	ldr	r2, [sp, #4]
 8014d16:	50a9      	str	r1, [r5, r2]
 8014d18:	3504      	adds	r5, #4
 8014d1a:	e79a      	b.n	8014c52 <__multiply+0x7a>
 8014d1c:	3e01      	subs	r6, #1
 8014d1e:	e79c      	b.n	8014c5a <__multiply+0x82>
 8014d20:	08016420 	.word	0x08016420
 8014d24:	08016431 	.word	0x08016431

08014d28 <__pow5mult>:
 8014d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d2c:	4615      	mov	r5, r2
 8014d2e:	f012 0203 	ands.w	r2, r2, #3
 8014d32:	4606      	mov	r6, r0
 8014d34:	460f      	mov	r7, r1
 8014d36:	d007      	beq.n	8014d48 <__pow5mult+0x20>
 8014d38:	4c25      	ldr	r4, [pc, #148]	; (8014dd0 <__pow5mult+0xa8>)
 8014d3a:	3a01      	subs	r2, #1
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014d42:	f7ff fe9f 	bl	8014a84 <__multadd>
 8014d46:	4607      	mov	r7, r0
 8014d48:	10ad      	asrs	r5, r5, #2
 8014d4a:	d03d      	beq.n	8014dc8 <__pow5mult+0xa0>
 8014d4c:	69f4      	ldr	r4, [r6, #28]
 8014d4e:	b97c      	cbnz	r4, 8014d70 <__pow5mult+0x48>
 8014d50:	2010      	movs	r0, #16
 8014d52:	f7fd ffa5 	bl	8012ca0 <malloc>
 8014d56:	4602      	mov	r2, r0
 8014d58:	61f0      	str	r0, [r6, #28]
 8014d5a:	b928      	cbnz	r0, 8014d68 <__pow5mult+0x40>
 8014d5c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014d60:	4b1c      	ldr	r3, [pc, #112]	; (8014dd4 <__pow5mult+0xac>)
 8014d62:	481d      	ldr	r0, [pc, #116]	; (8014dd8 <__pow5mult+0xb0>)
 8014d64:	f000 fd86 	bl	8015874 <__assert_func>
 8014d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014d6c:	6004      	str	r4, [r0, #0]
 8014d6e:	60c4      	str	r4, [r0, #12]
 8014d70:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014d78:	b94c      	cbnz	r4, 8014d8e <__pow5mult+0x66>
 8014d7a:	f240 2171 	movw	r1, #625	; 0x271
 8014d7e:	4630      	mov	r0, r6
 8014d80:	f7ff ff14 	bl	8014bac <__i2b>
 8014d84:	2300      	movs	r3, #0
 8014d86:	4604      	mov	r4, r0
 8014d88:	f8c8 0008 	str.w	r0, [r8, #8]
 8014d8c:	6003      	str	r3, [r0, #0]
 8014d8e:	f04f 0900 	mov.w	r9, #0
 8014d92:	07eb      	lsls	r3, r5, #31
 8014d94:	d50a      	bpl.n	8014dac <__pow5mult+0x84>
 8014d96:	4639      	mov	r1, r7
 8014d98:	4622      	mov	r2, r4
 8014d9a:	4630      	mov	r0, r6
 8014d9c:	f7ff ff1c 	bl	8014bd8 <__multiply>
 8014da0:	4680      	mov	r8, r0
 8014da2:	4639      	mov	r1, r7
 8014da4:	4630      	mov	r0, r6
 8014da6:	f7ff fe4b 	bl	8014a40 <_Bfree>
 8014daa:	4647      	mov	r7, r8
 8014dac:	106d      	asrs	r5, r5, #1
 8014dae:	d00b      	beq.n	8014dc8 <__pow5mult+0xa0>
 8014db0:	6820      	ldr	r0, [r4, #0]
 8014db2:	b938      	cbnz	r0, 8014dc4 <__pow5mult+0x9c>
 8014db4:	4622      	mov	r2, r4
 8014db6:	4621      	mov	r1, r4
 8014db8:	4630      	mov	r0, r6
 8014dba:	f7ff ff0d 	bl	8014bd8 <__multiply>
 8014dbe:	6020      	str	r0, [r4, #0]
 8014dc0:	f8c0 9000 	str.w	r9, [r0]
 8014dc4:	4604      	mov	r4, r0
 8014dc6:	e7e4      	b.n	8014d92 <__pow5mult+0x6a>
 8014dc8:	4638      	mov	r0, r7
 8014dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dce:	bf00      	nop
 8014dd0:	08016580 	.word	0x08016580
 8014dd4:	080163b1 	.word	0x080163b1
 8014dd8:	08016431 	.word	0x08016431

08014ddc <__lshift>:
 8014ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014de0:	460c      	mov	r4, r1
 8014de2:	4607      	mov	r7, r0
 8014de4:	4691      	mov	r9, r2
 8014de6:	6923      	ldr	r3, [r4, #16]
 8014de8:	6849      	ldr	r1, [r1, #4]
 8014dea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014dee:	68a3      	ldr	r3, [r4, #8]
 8014df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014df4:	f108 0601 	add.w	r6, r8, #1
 8014df8:	42b3      	cmp	r3, r6
 8014dfa:	db0b      	blt.n	8014e14 <__lshift+0x38>
 8014dfc:	4638      	mov	r0, r7
 8014dfe:	f7ff fddf 	bl	80149c0 <_Balloc>
 8014e02:	4605      	mov	r5, r0
 8014e04:	b948      	cbnz	r0, 8014e1a <__lshift+0x3e>
 8014e06:	4602      	mov	r2, r0
 8014e08:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014e0c:	4b27      	ldr	r3, [pc, #156]	; (8014eac <__lshift+0xd0>)
 8014e0e:	4828      	ldr	r0, [pc, #160]	; (8014eb0 <__lshift+0xd4>)
 8014e10:	f000 fd30 	bl	8015874 <__assert_func>
 8014e14:	3101      	adds	r1, #1
 8014e16:	005b      	lsls	r3, r3, #1
 8014e18:	e7ee      	b.n	8014df8 <__lshift+0x1c>
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	f100 0114 	add.w	r1, r0, #20
 8014e20:	f100 0210 	add.w	r2, r0, #16
 8014e24:	4618      	mov	r0, r3
 8014e26:	4553      	cmp	r3, sl
 8014e28:	db33      	blt.n	8014e92 <__lshift+0xb6>
 8014e2a:	6920      	ldr	r0, [r4, #16]
 8014e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014e30:	f104 0314 	add.w	r3, r4, #20
 8014e34:	f019 091f 	ands.w	r9, r9, #31
 8014e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014e3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014e40:	d02b      	beq.n	8014e9a <__lshift+0xbe>
 8014e42:	468a      	mov	sl, r1
 8014e44:	2200      	movs	r2, #0
 8014e46:	f1c9 0e20 	rsb	lr, r9, #32
 8014e4a:	6818      	ldr	r0, [r3, #0]
 8014e4c:	fa00 f009 	lsl.w	r0, r0, r9
 8014e50:	4310      	orrs	r0, r2
 8014e52:	f84a 0b04 	str.w	r0, [sl], #4
 8014e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e5a:	459c      	cmp	ip, r3
 8014e5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014e60:	d8f3      	bhi.n	8014e4a <__lshift+0x6e>
 8014e62:	ebac 0304 	sub.w	r3, ip, r4
 8014e66:	3b15      	subs	r3, #21
 8014e68:	f023 0303 	bic.w	r3, r3, #3
 8014e6c:	3304      	adds	r3, #4
 8014e6e:	f104 0015 	add.w	r0, r4, #21
 8014e72:	4584      	cmp	ip, r0
 8014e74:	bf38      	it	cc
 8014e76:	2304      	movcc	r3, #4
 8014e78:	50ca      	str	r2, [r1, r3]
 8014e7a:	b10a      	cbz	r2, 8014e80 <__lshift+0xa4>
 8014e7c:	f108 0602 	add.w	r6, r8, #2
 8014e80:	3e01      	subs	r6, #1
 8014e82:	4638      	mov	r0, r7
 8014e84:	4621      	mov	r1, r4
 8014e86:	612e      	str	r6, [r5, #16]
 8014e88:	f7ff fdda 	bl	8014a40 <_Bfree>
 8014e8c:	4628      	mov	r0, r5
 8014e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e92:	f842 0f04 	str.w	r0, [r2, #4]!
 8014e96:	3301      	adds	r3, #1
 8014e98:	e7c5      	b.n	8014e26 <__lshift+0x4a>
 8014e9a:	3904      	subs	r1, #4
 8014e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ea0:	459c      	cmp	ip, r3
 8014ea2:	f841 2f04 	str.w	r2, [r1, #4]!
 8014ea6:	d8f9      	bhi.n	8014e9c <__lshift+0xc0>
 8014ea8:	e7ea      	b.n	8014e80 <__lshift+0xa4>
 8014eaa:	bf00      	nop
 8014eac:	08016420 	.word	0x08016420
 8014eb0:	08016431 	.word	0x08016431

08014eb4 <__mcmp>:
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	690a      	ldr	r2, [r1, #16]
 8014eb8:	6900      	ldr	r0, [r0, #16]
 8014eba:	b530      	push	{r4, r5, lr}
 8014ebc:	1a80      	subs	r0, r0, r2
 8014ebe:	d10d      	bne.n	8014edc <__mcmp+0x28>
 8014ec0:	3314      	adds	r3, #20
 8014ec2:	3114      	adds	r1, #20
 8014ec4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014ec8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014ecc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014ed0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014ed4:	4295      	cmp	r5, r2
 8014ed6:	d002      	beq.n	8014ede <__mcmp+0x2a>
 8014ed8:	d304      	bcc.n	8014ee4 <__mcmp+0x30>
 8014eda:	2001      	movs	r0, #1
 8014edc:	bd30      	pop	{r4, r5, pc}
 8014ede:	42a3      	cmp	r3, r4
 8014ee0:	d3f4      	bcc.n	8014ecc <__mcmp+0x18>
 8014ee2:	e7fb      	b.n	8014edc <__mcmp+0x28>
 8014ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ee8:	e7f8      	b.n	8014edc <__mcmp+0x28>
	...

08014eec <__mdiff>:
 8014eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ef0:	460d      	mov	r5, r1
 8014ef2:	4607      	mov	r7, r0
 8014ef4:	4611      	mov	r1, r2
 8014ef6:	4628      	mov	r0, r5
 8014ef8:	4614      	mov	r4, r2
 8014efa:	f7ff ffdb 	bl	8014eb4 <__mcmp>
 8014efe:	1e06      	subs	r6, r0, #0
 8014f00:	d111      	bne.n	8014f26 <__mdiff+0x3a>
 8014f02:	4631      	mov	r1, r6
 8014f04:	4638      	mov	r0, r7
 8014f06:	f7ff fd5b 	bl	80149c0 <_Balloc>
 8014f0a:	4602      	mov	r2, r0
 8014f0c:	b928      	cbnz	r0, 8014f1a <__mdiff+0x2e>
 8014f0e:	f240 2137 	movw	r1, #567	; 0x237
 8014f12:	4b3a      	ldr	r3, [pc, #232]	; (8014ffc <__mdiff+0x110>)
 8014f14:	483a      	ldr	r0, [pc, #232]	; (8015000 <__mdiff+0x114>)
 8014f16:	f000 fcad 	bl	8015874 <__assert_func>
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014f20:	4610      	mov	r0, r2
 8014f22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f26:	bfa4      	itt	ge
 8014f28:	4623      	movge	r3, r4
 8014f2a:	462c      	movge	r4, r5
 8014f2c:	4638      	mov	r0, r7
 8014f2e:	6861      	ldr	r1, [r4, #4]
 8014f30:	bfa6      	itte	ge
 8014f32:	461d      	movge	r5, r3
 8014f34:	2600      	movge	r6, #0
 8014f36:	2601      	movlt	r6, #1
 8014f38:	f7ff fd42 	bl	80149c0 <_Balloc>
 8014f3c:	4602      	mov	r2, r0
 8014f3e:	b918      	cbnz	r0, 8014f48 <__mdiff+0x5c>
 8014f40:	f240 2145 	movw	r1, #581	; 0x245
 8014f44:	4b2d      	ldr	r3, [pc, #180]	; (8014ffc <__mdiff+0x110>)
 8014f46:	e7e5      	b.n	8014f14 <__mdiff+0x28>
 8014f48:	f102 0814 	add.w	r8, r2, #20
 8014f4c:	46c2      	mov	sl, r8
 8014f4e:	f04f 0c00 	mov.w	ip, #0
 8014f52:	6927      	ldr	r7, [r4, #16]
 8014f54:	60c6      	str	r6, [r0, #12]
 8014f56:	692e      	ldr	r6, [r5, #16]
 8014f58:	f104 0014 	add.w	r0, r4, #20
 8014f5c:	f105 0914 	add.w	r9, r5, #20
 8014f60:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8014f64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014f68:	3410      	adds	r4, #16
 8014f6a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8014f6e:	f859 3b04 	ldr.w	r3, [r9], #4
 8014f72:	fa1f f18b 	uxth.w	r1, fp
 8014f76:	4461      	add	r1, ip
 8014f78:	fa1f fc83 	uxth.w	ip, r3
 8014f7c:	0c1b      	lsrs	r3, r3, #16
 8014f7e:	eba1 010c 	sub.w	r1, r1, ip
 8014f82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014f86:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014f8a:	b289      	uxth	r1, r1
 8014f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8014f90:	454e      	cmp	r6, r9
 8014f92:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8014f96:	f84a 1b04 	str.w	r1, [sl], #4
 8014f9a:	d8e6      	bhi.n	8014f6a <__mdiff+0x7e>
 8014f9c:	1b73      	subs	r3, r6, r5
 8014f9e:	3b15      	subs	r3, #21
 8014fa0:	f023 0303 	bic.w	r3, r3, #3
 8014fa4:	3515      	adds	r5, #21
 8014fa6:	3304      	adds	r3, #4
 8014fa8:	42ae      	cmp	r6, r5
 8014faa:	bf38      	it	cc
 8014fac:	2304      	movcc	r3, #4
 8014fae:	4418      	add	r0, r3
 8014fb0:	4443      	add	r3, r8
 8014fb2:	461e      	mov	r6, r3
 8014fb4:	4605      	mov	r5, r0
 8014fb6:	4575      	cmp	r5, lr
 8014fb8:	d30e      	bcc.n	8014fd8 <__mdiff+0xec>
 8014fba:	f10e 0103 	add.w	r1, lr, #3
 8014fbe:	1a09      	subs	r1, r1, r0
 8014fc0:	f021 0103 	bic.w	r1, r1, #3
 8014fc4:	3803      	subs	r0, #3
 8014fc6:	4586      	cmp	lr, r0
 8014fc8:	bf38      	it	cc
 8014fca:	2100      	movcc	r1, #0
 8014fcc:	440b      	add	r3, r1
 8014fce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014fd2:	b189      	cbz	r1, 8014ff8 <__mdiff+0x10c>
 8014fd4:	6117      	str	r7, [r2, #16]
 8014fd6:	e7a3      	b.n	8014f20 <__mdiff+0x34>
 8014fd8:	f855 8b04 	ldr.w	r8, [r5], #4
 8014fdc:	fa1f f188 	uxth.w	r1, r8
 8014fe0:	4461      	add	r1, ip
 8014fe2:	140c      	asrs	r4, r1, #16
 8014fe4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014fe8:	b289      	uxth	r1, r1
 8014fea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014fee:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8014ff2:	f846 1b04 	str.w	r1, [r6], #4
 8014ff6:	e7de      	b.n	8014fb6 <__mdiff+0xca>
 8014ff8:	3f01      	subs	r7, #1
 8014ffa:	e7e8      	b.n	8014fce <__mdiff+0xe2>
 8014ffc:	08016420 	.word	0x08016420
 8015000:	08016431 	.word	0x08016431

08015004 <__d2b>:
 8015004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015006:	2101      	movs	r1, #1
 8015008:	4617      	mov	r7, r2
 801500a:	461c      	mov	r4, r3
 801500c:	9e08      	ldr	r6, [sp, #32]
 801500e:	f7ff fcd7 	bl	80149c0 <_Balloc>
 8015012:	4605      	mov	r5, r0
 8015014:	b930      	cbnz	r0, 8015024 <__d2b+0x20>
 8015016:	4602      	mov	r2, r0
 8015018:	f240 310f 	movw	r1, #783	; 0x30f
 801501c:	4b22      	ldr	r3, [pc, #136]	; (80150a8 <__d2b+0xa4>)
 801501e:	4823      	ldr	r0, [pc, #140]	; (80150ac <__d2b+0xa8>)
 8015020:	f000 fc28 	bl	8015874 <__assert_func>
 8015024:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8015028:	f3c4 540a 	ubfx	r4, r4, #20, #11
 801502c:	bb24      	cbnz	r4, 8015078 <__d2b+0x74>
 801502e:	2f00      	cmp	r7, #0
 8015030:	9301      	str	r3, [sp, #4]
 8015032:	d026      	beq.n	8015082 <__d2b+0x7e>
 8015034:	4668      	mov	r0, sp
 8015036:	9700      	str	r7, [sp, #0]
 8015038:	f7ff fd8a 	bl	8014b50 <__lo0bits>
 801503c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015040:	b1e8      	cbz	r0, 801507e <__d2b+0x7a>
 8015042:	f1c0 0320 	rsb	r3, r0, #32
 8015046:	fa02 f303 	lsl.w	r3, r2, r3
 801504a:	430b      	orrs	r3, r1
 801504c:	40c2      	lsrs	r2, r0
 801504e:	616b      	str	r3, [r5, #20]
 8015050:	9201      	str	r2, [sp, #4]
 8015052:	9b01      	ldr	r3, [sp, #4]
 8015054:	2b00      	cmp	r3, #0
 8015056:	bf14      	ite	ne
 8015058:	2102      	movne	r1, #2
 801505a:	2101      	moveq	r1, #1
 801505c:	61ab      	str	r3, [r5, #24]
 801505e:	6129      	str	r1, [r5, #16]
 8015060:	b1bc      	cbz	r4, 8015092 <__d2b+0x8e>
 8015062:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015066:	4404      	add	r4, r0
 8015068:	6034      	str	r4, [r6, #0]
 801506a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015070:	6018      	str	r0, [r3, #0]
 8015072:	4628      	mov	r0, r5
 8015074:	b003      	add	sp, #12
 8015076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801507c:	e7d7      	b.n	801502e <__d2b+0x2a>
 801507e:	6169      	str	r1, [r5, #20]
 8015080:	e7e7      	b.n	8015052 <__d2b+0x4e>
 8015082:	a801      	add	r0, sp, #4
 8015084:	f7ff fd64 	bl	8014b50 <__lo0bits>
 8015088:	9b01      	ldr	r3, [sp, #4]
 801508a:	2101      	movs	r1, #1
 801508c:	616b      	str	r3, [r5, #20]
 801508e:	3020      	adds	r0, #32
 8015090:	e7e5      	b.n	801505e <__d2b+0x5a>
 8015092:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015096:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 801509a:	6030      	str	r0, [r6, #0]
 801509c:	6918      	ldr	r0, [r3, #16]
 801509e:	f7ff fd37 	bl	8014b10 <__hi0bits>
 80150a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80150a6:	e7e2      	b.n	801506e <__d2b+0x6a>
 80150a8:	08016420 	.word	0x08016420
 80150ac:	08016431 	.word	0x08016431

080150b0 <__ssputs_r>:
 80150b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150b4:	461f      	mov	r7, r3
 80150b6:	688e      	ldr	r6, [r1, #8]
 80150b8:	4682      	mov	sl, r0
 80150ba:	42be      	cmp	r6, r7
 80150bc:	460c      	mov	r4, r1
 80150be:	4690      	mov	r8, r2
 80150c0:	680b      	ldr	r3, [r1, #0]
 80150c2:	d82c      	bhi.n	801511e <__ssputs_r+0x6e>
 80150c4:	898a      	ldrh	r2, [r1, #12]
 80150c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80150ca:	d026      	beq.n	801511a <__ssputs_r+0x6a>
 80150cc:	6965      	ldr	r5, [r4, #20]
 80150ce:	6909      	ldr	r1, [r1, #16]
 80150d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80150d4:	eba3 0901 	sub.w	r9, r3, r1
 80150d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80150dc:	1c7b      	adds	r3, r7, #1
 80150de:	444b      	add	r3, r9
 80150e0:	106d      	asrs	r5, r5, #1
 80150e2:	429d      	cmp	r5, r3
 80150e4:	bf38      	it	cc
 80150e6:	461d      	movcc	r5, r3
 80150e8:	0553      	lsls	r3, r2, #21
 80150ea:	d527      	bpl.n	801513c <__ssputs_r+0x8c>
 80150ec:	4629      	mov	r1, r5
 80150ee:	f7fd fe07 	bl	8012d00 <_malloc_r>
 80150f2:	4606      	mov	r6, r0
 80150f4:	b360      	cbz	r0, 8015150 <__ssputs_r+0xa0>
 80150f6:	464a      	mov	r2, r9
 80150f8:	6921      	ldr	r1, [r4, #16]
 80150fa:	f7fe fd9d 	bl	8013c38 <memcpy>
 80150fe:	89a3      	ldrh	r3, [r4, #12]
 8015100:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015108:	81a3      	strh	r3, [r4, #12]
 801510a:	6126      	str	r6, [r4, #16]
 801510c:	444e      	add	r6, r9
 801510e:	6026      	str	r6, [r4, #0]
 8015110:	463e      	mov	r6, r7
 8015112:	6165      	str	r5, [r4, #20]
 8015114:	eba5 0509 	sub.w	r5, r5, r9
 8015118:	60a5      	str	r5, [r4, #8]
 801511a:	42be      	cmp	r6, r7
 801511c:	d900      	bls.n	8015120 <__ssputs_r+0x70>
 801511e:	463e      	mov	r6, r7
 8015120:	4632      	mov	r2, r6
 8015122:	4641      	mov	r1, r8
 8015124:	6820      	ldr	r0, [r4, #0]
 8015126:	f000 fb68 	bl	80157fa <memmove>
 801512a:	2000      	movs	r0, #0
 801512c:	68a3      	ldr	r3, [r4, #8]
 801512e:	1b9b      	subs	r3, r3, r6
 8015130:	60a3      	str	r3, [r4, #8]
 8015132:	6823      	ldr	r3, [r4, #0]
 8015134:	4433      	add	r3, r6
 8015136:	6023      	str	r3, [r4, #0]
 8015138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801513c:	462a      	mov	r2, r5
 801513e:	f000 fbc9 	bl	80158d4 <_realloc_r>
 8015142:	4606      	mov	r6, r0
 8015144:	2800      	cmp	r0, #0
 8015146:	d1e0      	bne.n	801510a <__ssputs_r+0x5a>
 8015148:	4650      	mov	r0, sl
 801514a:	6921      	ldr	r1, [r4, #16]
 801514c:	f7ff fbf0 	bl	8014930 <_free_r>
 8015150:	230c      	movs	r3, #12
 8015152:	f8ca 3000 	str.w	r3, [sl]
 8015156:	89a3      	ldrh	r3, [r4, #12]
 8015158:	f04f 30ff 	mov.w	r0, #4294967295
 801515c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015160:	81a3      	strh	r3, [r4, #12]
 8015162:	e7e9      	b.n	8015138 <__ssputs_r+0x88>

08015164 <_svfiprintf_r>:
 8015164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015168:	4698      	mov	r8, r3
 801516a:	898b      	ldrh	r3, [r1, #12]
 801516c:	4607      	mov	r7, r0
 801516e:	061b      	lsls	r3, r3, #24
 8015170:	460d      	mov	r5, r1
 8015172:	4614      	mov	r4, r2
 8015174:	b09d      	sub	sp, #116	; 0x74
 8015176:	d50e      	bpl.n	8015196 <_svfiprintf_r+0x32>
 8015178:	690b      	ldr	r3, [r1, #16]
 801517a:	b963      	cbnz	r3, 8015196 <_svfiprintf_r+0x32>
 801517c:	2140      	movs	r1, #64	; 0x40
 801517e:	f7fd fdbf 	bl	8012d00 <_malloc_r>
 8015182:	6028      	str	r0, [r5, #0]
 8015184:	6128      	str	r0, [r5, #16]
 8015186:	b920      	cbnz	r0, 8015192 <_svfiprintf_r+0x2e>
 8015188:	230c      	movs	r3, #12
 801518a:	603b      	str	r3, [r7, #0]
 801518c:	f04f 30ff 	mov.w	r0, #4294967295
 8015190:	e0d0      	b.n	8015334 <_svfiprintf_r+0x1d0>
 8015192:	2340      	movs	r3, #64	; 0x40
 8015194:	616b      	str	r3, [r5, #20]
 8015196:	2300      	movs	r3, #0
 8015198:	9309      	str	r3, [sp, #36]	; 0x24
 801519a:	2320      	movs	r3, #32
 801519c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80151a0:	2330      	movs	r3, #48	; 0x30
 80151a2:	f04f 0901 	mov.w	r9, #1
 80151a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80151aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 801534c <_svfiprintf_r+0x1e8>
 80151ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80151b2:	4623      	mov	r3, r4
 80151b4:	469a      	mov	sl, r3
 80151b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151ba:	b10a      	cbz	r2, 80151c0 <_svfiprintf_r+0x5c>
 80151bc:	2a25      	cmp	r2, #37	; 0x25
 80151be:	d1f9      	bne.n	80151b4 <_svfiprintf_r+0x50>
 80151c0:	ebba 0b04 	subs.w	fp, sl, r4
 80151c4:	d00b      	beq.n	80151de <_svfiprintf_r+0x7a>
 80151c6:	465b      	mov	r3, fp
 80151c8:	4622      	mov	r2, r4
 80151ca:	4629      	mov	r1, r5
 80151cc:	4638      	mov	r0, r7
 80151ce:	f7ff ff6f 	bl	80150b0 <__ssputs_r>
 80151d2:	3001      	adds	r0, #1
 80151d4:	f000 80a9 	beq.w	801532a <_svfiprintf_r+0x1c6>
 80151d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151da:	445a      	add	r2, fp
 80151dc:	9209      	str	r2, [sp, #36]	; 0x24
 80151de:	f89a 3000 	ldrb.w	r3, [sl]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	f000 80a1 	beq.w	801532a <_svfiprintf_r+0x1c6>
 80151e8:	2300      	movs	r3, #0
 80151ea:	f04f 32ff 	mov.w	r2, #4294967295
 80151ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151f2:	f10a 0a01 	add.w	sl, sl, #1
 80151f6:	9304      	str	r3, [sp, #16]
 80151f8:	9307      	str	r3, [sp, #28]
 80151fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151fe:	931a      	str	r3, [sp, #104]	; 0x68
 8015200:	4654      	mov	r4, sl
 8015202:	2205      	movs	r2, #5
 8015204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015208:	4850      	ldr	r0, [pc, #320]	; (801534c <_svfiprintf_r+0x1e8>)
 801520a:	f7fe fd07 	bl	8013c1c <memchr>
 801520e:	9a04      	ldr	r2, [sp, #16]
 8015210:	b9d8      	cbnz	r0, 801524a <_svfiprintf_r+0xe6>
 8015212:	06d0      	lsls	r0, r2, #27
 8015214:	bf44      	itt	mi
 8015216:	2320      	movmi	r3, #32
 8015218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801521c:	0711      	lsls	r1, r2, #28
 801521e:	bf44      	itt	mi
 8015220:	232b      	movmi	r3, #43	; 0x2b
 8015222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015226:	f89a 3000 	ldrb.w	r3, [sl]
 801522a:	2b2a      	cmp	r3, #42	; 0x2a
 801522c:	d015      	beq.n	801525a <_svfiprintf_r+0xf6>
 801522e:	4654      	mov	r4, sl
 8015230:	2000      	movs	r0, #0
 8015232:	f04f 0c0a 	mov.w	ip, #10
 8015236:	9a07      	ldr	r2, [sp, #28]
 8015238:	4621      	mov	r1, r4
 801523a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801523e:	3b30      	subs	r3, #48	; 0x30
 8015240:	2b09      	cmp	r3, #9
 8015242:	d94d      	bls.n	80152e0 <_svfiprintf_r+0x17c>
 8015244:	b1b0      	cbz	r0, 8015274 <_svfiprintf_r+0x110>
 8015246:	9207      	str	r2, [sp, #28]
 8015248:	e014      	b.n	8015274 <_svfiprintf_r+0x110>
 801524a:	eba0 0308 	sub.w	r3, r0, r8
 801524e:	fa09 f303 	lsl.w	r3, r9, r3
 8015252:	4313      	orrs	r3, r2
 8015254:	46a2      	mov	sl, r4
 8015256:	9304      	str	r3, [sp, #16]
 8015258:	e7d2      	b.n	8015200 <_svfiprintf_r+0x9c>
 801525a:	9b03      	ldr	r3, [sp, #12]
 801525c:	1d19      	adds	r1, r3, #4
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	9103      	str	r1, [sp, #12]
 8015262:	2b00      	cmp	r3, #0
 8015264:	bfbb      	ittet	lt
 8015266:	425b      	neglt	r3, r3
 8015268:	f042 0202 	orrlt.w	r2, r2, #2
 801526c:	9307      	strge	r3, [sp, #28]
 801526e:	9307      	strlt	r3, [sp, #28]
 8015270:	bfb8      	it	lt
 8015272:	9204      	strlt	r2, [sp, #16]
 8015274:	7823      	ldrb	r3, [r4, #0]
 8015276:	2b2e      	cmp	r3, #46	; 0x2e
 8015278:	d10c      	bne.n	8015294 <_svfiprintf_r+0x130>
 801527a:	7863      	ldrb	r3, [r4, #1]
 801527c:	2b2a      	cmp	r3, #42	; 0x2a
 801527e:	d134      	bne.n	80152ea <_svfiprintf_r+0x186>
 8015280:	9b03      	ldr	r3, [sp, #12]
 8015282:	3402      	adds	r4, #2
 8015284:	1d1a      	adds	r2, r3, #4
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	9203      	str	r2, [sp, #12]
 801528a:	2b00      	cmp	r3, #0
 801528c:	bfb8      	it	lt
 801528e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015292:	9305      	str	r3, [sp, #20]
 8015294:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8015350 <_svfiprintf_r+0x1ec>
 8015298:	2203      	movs	r2, #3
 801529a:	4650      	mov	r0, sl
 801529c:	7821      	ldrb	r1, [r4, #0]
 801529e:	f7fe fcbd 	bl	8013c1c <memchr>
 80152a2:	b138      	cbz	r0, 80152b4 <_svfiprintf_r+0x150>
 80152a4:	2240      	movs	r2, #64	; 0x40
 80152a6:	9b04      	ldr	r3, [sp, #16]
 80152a8:	eba0 000a 	sub.w	r0, r0, sl
 80152ac:	4082      	lsls	r2, r0
 80152ae:	4313      	orrs	r3, r2
 80152b0:	3401      	adds	r4, #1
 80152b2:	9304      	str	r3, [sp, #16]
 80152b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152b8:	2206      	movs	r2, #6
 80152ba:	4826      	ldr	r0, [pc, #152]	; (8015354 <_svfiprintf_r+0x1f0>)
 80152bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80152c0:	f7fe fcac 	bl	8013c1c <memchr>
 80152c4:	2800      	cmp	r0, #0
 80152c6:	d038      	beq.n	801533a <_svfiprintf_r+0x1d6>
 80152c8:	4b23      	ldr	r3, [pc, #140]	; (8015358 <_svfiprintf_r+0x1f4>)
 80152ca:	bb1b      	cbnz	r3, 8015314 <_svfiprintf_r+0x1b0>
 80152cc:	9b03      	ldr	r3, [sp, #12]
 80152ce:	3307      	adds	r3, #7
 80152d0:	f023 0307 	bic.w	r3, r3, #7
 80152d4:	3308      	adds	r3, #8
 80152d6:	9303      	str	r3, [sp, #12]
 80152d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152da:	4433      	add	r3, r6
 80152dc:	9309      	str	r3, [sp, #36]	; 0x24
 80152de:	e768      	b.n	80151b2 <_svfiprintf_r+0x4e>
 80152e0:	460c      	mov	r4, r1
 80152e2:	2001      	movs	r0, #1
 80152e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80152e8:	e7a6      	b.n	8015238 <_svfiprintf_r+0xd4>
 80152ea:	2300      	movs	r3, #0
 80152ec:	f04f 0c0a 	mov.w	ip, #10
 80152f0:	4619      	mov	r1, r3
 80152f2:	3401      	adds	r4, #1
 80152f4:	9305      	str	r3, [sp, #20]
 80152f6:	4620      	mov	r0, r4
 80152f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152fc:	3a30      	subs	r2, #48	; 0x30
 80152fe:	2a09      	cmp	r2, #9
 8015300:	d903      	bls.n	801530a <_svfiprintf_r+0x1a6>
 8015302:	2b00      	cmp	r3, #0
 8015304:	d0c6      	beq.n	8015294 <_svfiprintf_r+0x130>
 8015306:	9105      	str	r1, [sp, #20]
 8015308:	e7c4      	b.n	8015294 <_svfiprintf_r+0x130>
 801530a:	4604      	mov	r4, r0
 801530c:	2301      	movs	r3, #1
 801530e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015312:	e7f0      	b.n	80152f6 <_svfiprintf_r+0x192>
 8015314:	ab03      	add	r3, sp, #12
 8015316:	9300      	str	r3, [sp, #0]
 8015318:	462a      	mov	r2, r5
 801531a:	4638      	mov	r0, r7
 801531c:	4b0f      	ldr	r3, [pc, #60]	; (801535c <_svfiprintf_r+0x1f8>)
 801531e:	a904      	add	r1, sp, #16
 8015320:	f7fd fe16 	bl	8012f50 <_printf_float>
 8015324:	1c42      	adds	r2, r0, #1
 8015326:	4606      	mov	r6, r0
 8015328:	d1d6      	bne.n	80152d8 <_svfiprintf_r+0x174>
 801532a:	89ab      	ldrh	r3, [r5, #12]
 801532c:	065b      	lsls	r3, r3, #25
 801532e:	f53f af2d 	bmi.w	801518c <_svfiprintf_r+0x28>
 8015332:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015334:	b01d      	add	sp, #116	; 0x74
 8015336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801533a:	ab03      	add	r3, sp, #12
 801533c:	9300      	str	r3, [sp, #0]
 801533e:	462a      	mov	r2, r5
 8015340:	4638      	mov	r0, r7
 8015342:	4b06      	ldr	r3, [pc, #24]	; (801535c <_svfiprintf_r+0x1f8>)
 8015344:	a904      	add	r1, sp, #16
 8015346:	f7fe f8a3 	bl	8013490 <_printf_i>
 801534a:	e7eb      	b.n	8015324 <_svfiprintf_r+0x1c0>
 801534c:	0801658c 	.word	0x0801658c
 8015350:	08016592 	.word	0x08016592
 8015354:	08016596 	.word	0x08016596
 8015358:	08012f51 	.word	0x08012f51
 801535c:	080150b1 	.word	0x080150b1

08015360 <__sfputc_r>:
 8015360:	6893      	ldr	r3, [r2, #8]
 8015362:	b410      	push	{r4}
 8015364:	3b01      	subs	r3, #1
 8015366:	2b00      	cmp	r3, #0
 8015368:	6093      	str	r3, [r2, #8]
 801536a:	da07      	bge.n	801537c <__sfputc_r+0x1c>
 801536c:	6994      	ldr	r4, [r2, #24]
 801536e:	42a3      	cmp	r3, r4
 8015370:	db01      	blt.n	8015376 <__sfputc_r+0x16>
 8015372:	290a      	cmp	r1, #10
 8015374:	d102      	bne.n	801537c <__sfputc_r+0x1c>
 8015376:	bc10      	pop	{r4}
 8015378:	f7fe bb2d 	b.w	80139d6 <__swbuf_r>
 801537c:	6813      	ldr	r3, [r2, #0]
 801537e:	1c58      	adds	r0, r3, #1
 8015380:	6010      	str	r0, [r2, #0]
 8015382:	7019      	strb	r1, [r3, #0]
 8015384:	4608      	mov	r0, r1
 8015386:	bc10      	pop	{r4}
 8015388:	4770      	bx	lr

0801538a <__sfputs_r>:
 801538a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801538c:	4606      	mov	r6, r0
 801538e:	460f      	mov	r7, r1
 8015390:	4614      	mov	r4, r2
 8015392:	18d5      	adds	r5, r2, r3
 8015394:	42ac      	cmp	r4, r5
 8015396:	d101      	bne.n	801539c <__sfputs_r+0x12>
 8015398:	2000      	movs	r0, #0
 801539a:	e007      	b.n	80153ac <__sfputs_r+0x22>
 801539c:	463a      	mov	r2, r7
 801539e:	4630      	mov	r0, r6
 80153a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153a4:	f7ff ffdc 	bl	8015360 <__sfputc_r>
 80153a8:	1c43      	adds	r3, r0, #1
 80153aa:	d1f3      	bne.n	8015394 <__sfputs_r+0xa>
 80153ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080153b0 <_vfiprintf_r>:
 80153b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153b4:	460d      	mov	r5, r1
 80153b6:	4614      	mov	r4, r2
 80153b8:	4698      	mov	r8, r3
 80153ba:	4606      	mov	r6, r0
 80153bc:	b09d      	sub	sp, #116	; 0x74
 80153be:	b118      	cbz	r0, 80153c8 <_vfiprintf_r+0x18>
 80153c0:	6a03      	ldr	r3, [r0, #32]
 80153c2:	b90b      	cbnz	r3, 80153c8 <_vfiprintf_r+0x18>
 80153c4:	f7fe fa00 	bl	80137c8 <__sinit>
 80153c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153ca:	07d9      	lsls	r1, r3, #31
 80153cc:	d405      	bmi.n	80153da <_vfiprintf_r+0x2a>
 80153ce:	89ab      	ldrh	r3, [r5, #12]
 80153d0:	059a      	lsls	r2, r3, #22
 80153d2:	d402      	bmi.n	80153da <_vfiprintf_r+0x2a>
 80153d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153d6:	f7fe fc1f 	bl	8013c18 <__retarget_lock_acquire_recursive>
 80153da:	89ab      	ldrh	r3, [r5, #12]
 80153dc:	071b      	lsls	r3, r3, #28
 80153de:	d501      	bpl.n	80153e4 <_vfiprintf_r+0x34>
 80153e0:	692b      	ldr	r3, [r5, #16]
 80153e2:	b99b      	cbnz	r3, 801540c <_vfiprintf_r+0x5c>
 80153e4:	4629      	mov	r1, r5
 80153e6:	4630      	mov	r0, r6
 80153e8:	f7fe fb32 	bl	8013a50 <__swsetup_r>
 80153ec:	b170      	cbz	r0, 801540c <_vfiprintf_r+0x5c>
 80153ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153f0:	07dc      	lsls	r4, r3, #31
 80153f2:	d504      	bpl.n	80153fe <_vfiprintf_r+0x4e>
 80153f4:	f04f 30ff 	mov.w	r0, #4294967295
 80153f8:	b01d      	add	sp, #116	; 0x74
 80153fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153fe:	89ab      	ldrh	r3, [r5, #12]
 8015400:	0598      	lsls	r0, r3, #22
 8015402:	d4f7      	bmi.n	80153f4 <_vfiprintf_r+0x44>
 8015404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015406:	f7fe fc08 	bl	8013c1a <__retarget_lock_release_recursive>
 801540a:	e7f3      	b.n	80153f4 <_vfiprintf_r+0x44>
 801540c:	2300      	movs	r3, #0
 801540e:	9309      	str	r3, [sp, #36]	; 0x24
 8015410:	2320      	movs	r3, #32
 8015412:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015416:	2330      	movs	r3, #48	; 0x30
 8015418:	f04f 0901 	mov.w	r9, #1
 801541c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015420:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80155d0 <_vfiprintf_r+0x220>
 8015424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015428:	4623      	mov	r3, r4
 801542a:	469a      	mov	sl, r3
 801542c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015430:	b10a      	cbz	r2, 8015436 <_vfiprintf_r+0x86>
 8015432:	2a25      	cmp	r2, #37	; 0x25
 8015434:	d1f9      	bne.n	801542a <_vfiprintf_r+0x7a>
 8015436:	ebba 0b04 	subs.w	fp, sl, r4
 801543a:	d00b      	beq.n	8015454 <_vfiprintf_r+0xa4>
 801543c:	465b      	mov	r3, fp
 801543e:	4622      	mov	r2, r4
 8015440:	4629      	mov	r1, r5
 8015442:	4630      	mov	r0, r6
 8015444:	f7ff ffa1 	bl	801538a <__sfputs_r>
 8015448:	3001      	adds	r0, #1
 801544a:	f000 80a9 	beq.w	80155a0 <_vfiprintf_r+0x1f0>
 801544e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015450:	445a      	add	r2, fp
 8015452:	9209      	str	r2, [sp, #36]	; 0x24
 8015454:	f89a 3000 	ldrb.w	r3, [sl]
 8015458:	2b00      	cmp	r3, #0
 801545a:	f000 80a1 	beq.w	80155a0 <_vfiprintf_r+0x1f0>
 801545e:	2300      	movs	r3, #0
 8015460:	f04f 32ff 	mov.w	r2, #4294967295
 8015464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015468:	f10a 0a01 	add.w	sl, sl, #1
 801546c:	9304      	str	r3, [sp, #16]
 801546e:	9307      	str	r3, [sp, #28]
 8015470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015474:	931a      	str	r3, [sp, #104]	; 0x68
 8015476:	4654      	mov	r4, sl
 8015478:	2205      	movs	r2, #5
 801547a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801547e:	4854      	ldr	r0, [pc, #336]	; (80155d0 <_vfiprintf_r+0x220>)
 8015480:	f7fe fbcc 	bl	8013c1c <memchr>
 8015484:	9a04      	ldr	r2, [sp, #16]
 8015486:	b9d8      	cbnz	r0, 80154c0 <_vfiprintf_r+0x110>
 8015488:	06d1      	lsls	r1, r2, #27
 801548a:	bf44      	itt	mi
 801548c:	2320      	movmi	r3, #32
 801548e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015492:	0713      	lsls	r3, r2, #28
 8015494:	bf44      	itt	mi
 8015496:	232b      	movmi	r3, #43	; 0x2b
 8015498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801549c:	f89a 3000 	ldrb.w	r3, [sl]
 80154a0:	2b2a      	cmp	r3, #42	; 0x2a
 80154a2:	d015      	beq.n	80154d0 <_vfiprintf_r+0x120>
 80154a4:	4654      	mov	r4, sl
 80154a6:	2000      	movs	r0, #0
 80154a8:	f04f 0c0a 	mov.w	ip, #10
 80154ac:	9a07      	ldr	r2, [sp, #28]
 80154ae:	4621      	mov	r1, r4
 80154b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154b4:	3b30      	subs	r3, #48	; 0x30
 80154b6:	2b09      	cmp	r3, #9
 80154b8:	d94d      	bls.n	8015556 <_vfiprintf_r+0x1a6>
 80154ba:	b1b0      	cbz	r0, 80154ea <_vfiprintf_r+0x13a>
 80154bc:	9207      	str	r2, [sp, #28]
 80154be:	e014      	b.n	80154ea <_vfiprintf_r+0x13a>
 80154c0:	eba0 0308 	sub.w	r3, r0, r8
 80154c4:	fa09 f303 	lsl.w	r3, r9, r3
 80154c8:	4313      	orrs	r3, r2
 80154ca:	46a2      	mov	sl, r4
 80154cc:	9304      	str	r3, [sp, #16]
 80154ce:	e7d2      	b.n	8015476 <_vfiprintf_r+0xc6>
 80154d0:	9b03      	ldr	r3, [sp, #12]
 80154d2:	1d19      	adds	r1, r3, #4
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	9103      	str	r1, [sp, #12]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	bfbb      	ittet	lt
 80154dc:	425b      	neglt	r3, r3
 80154de:	f042 0202 	orrlt.w	r2, r2, #2
 80154e2:	9307      	strge	r3, [sp, #28]
 80154e4:	9307      	strlt	r3, [sp, #28]
 80154e6:	bfb8      	it	lt
 80154e8:	9204      	strlt	r2, [sp, #16]
 80154ea:	7823      	ldrb	r3, [r4, #0]
 80154ec:	2b2e      	cmp	r3, #46	; 0x2e
 80154ee:	d10c      	bne.n	801550a <_vfiprintf_r+0x15a>
 80154f0:	7863      	ldrb	r3, [r4, #1]
 80154f2:	2b2a      	cmp	r3, #42	; 0x2a
 80154f4:	d134      	bne.n	8015560 <_vfiprintf_r+0x1b0>
 80154f6:	9b03      	ldr	r3, [sp, #12]
 80154f8:	3402      	adds	r4, #2
 80154fa:	1d1a      	adds	r2, r3, #4
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	9203      	str	r2, [sp, #12]
 8015500:	2b00      	cmp	r3, #0
 8015502:	bfb8      	it	lt
 8015504:	f04f 33ff 	movlt.w	r3, #4294967295
 8015508:	9305      	str	r3, [sp, #20]
 801550a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80155d4 <_vfiprintf_r+0x224>
 801550e:	2203      	movs	r2, #3
 8015510:	4650      	mov	r0, sl
 8015512:	7821      	ldrb	r1, [r4, #0]
 8015514:	f7fe fb82 	bl	8013c1c <memchr>
 8015518:	b138      	cbz	r0, 801552a <_vfiprintf_r+0x17a>
 801551a:	2240      	movs	r2, #64	; 0x40
 801551c:	9b04      	ldr	r3, [sp, #16]
 801551e:	eba0 000a 	sub.w	r0, r0, sl
 8015522:	4082      	lsls	r2, r0
 8015524:	4313      	orrs	r3, r2
 8015526:	3401      	adds	r4, #1
 8015528:	9304      	str	r3, [sp, #16]
 801552a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801552e:	2206      	movs	r2, #6
 8015530:	4829      	ldr	r0, [pc, #164]	; (80155d8 <_vfiprintf_r+0x228>)
 8015532:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015536:	f7fe fb71 	bl	8013c1c <memchr>
 801553a:	2800      	cmp	r0, #0
 801553c:	d03f      	beq.n	80155be <_vfiprintf_r+0x20e>
 801553e:	4b27      	ldr	r3, [pc, #156]	; (80155dc <_vfiprintf_r+0x22c>)
 8015540:	bb1b      	cbnz	r3, 801558a <_vfiprintf_r+0x1da>
 8015542:	9b03      	ldr	r3, [sp, #12]
 8015544:	3307      	adds	r3, #7
 8015546:	f023 0307 	bic.w	r3, r3, #7
 801554a:	3308      	adds	r3, #8
 801554c:	9303      	str	r3, [sp, #12]
 801554e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015550:	443b      	add	r3, r7
 8015552:	9309      	str	r3, [sp, #36]	; 0x24
 8015554:	e768      	b.n	8015428 <_vfiprintf_r+0x78>
 8015556:	460c      	mov	r4, r1
 8015558:	2001      	movs	r0, #1
 801555a:	fb0c 3202 	mla	r2, ip, r2, r3
 801555e:	e7a6      	b.n	80154ae <_vfiprintf_r+0xfe>
 8015560:	2300      	movs	r3, #0
 8015562:	f04f 0c0a 	mov.w	ip, #10
 8015566:	4619      	mov	r1, r3
 8015568:	3401      	adds	r4, #1
 801556a:	9305      	str	r3, [sp, #20]
 801556c:	4620      	mov	r0, r4
 801556e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015572:	3a30      	subs	r2, #48	; 0x30
 8015574:	2a09      	cmp	r2, #9
 8015576:	d903      	bls.n	8015580 <_vfiprintf_r+0x1d0>
 8015578:	2b00      	cmp	r3, #0
 801557a:	d0c6      	beq.n	801550a <_vfiprintf_r+0x15a>
 801557c:	9105      	str	r1, [sp, #20]
 801557e:	e7c4      	b.n	801550a <_vfiprintf_r+0x15a>
 8015580:	4604      	mov	r4, r0
 8015582:	2301      	movs	r3, #1
 8015584:	fb0c 2101 	mla	r1, ip, r1, r2
 8015588:	e7f0      	b.n	801556c <_vfiprintf_r+0x1bc>
 801558a:	ab03      	add	r3, sp, #12
 801558c:	9300      	str	r3, [sp, #0]
 801558e:	462a      	mov	r2, r5
 8015590:	4630      	mov	r0, r6
 8015592:	4b13      	ldr	r3, [pc, #76]	; (80155e0 <_vfiprintf_r+0x230>)
 8015594:	a904      	add	r1, sp, #16
 8015596:	f7fd fcdb 	bl	8012f50 <_printf_float>
 801559a:	4607      	mov	r7, r0
 801559c:	1c78      	adds	r0, r7, #1
 801559e:	d1d6      	bne.n	801554e <_vfiprintf_r+0x19e>
 80155a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80155a2:	07d9      	lsls	r1, r3, #31
 80155a4:	d405      	bmi.n	80155b2 <_vfiprintf_r+0x202>
 80155a6:	89ab      	ldrh	r3, [r5, #12]
 80155a8:	059a      	lsls	r2, r3, #22
 80155aa:	d402      	bmi.n	80155b2 <_vfiprintf_r+0x202>
 80155ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80155ae:	f7fe fb34 	bl	8013c1a <__retarget_lock_release_recursive>
 80155b2:	89ab      	ldrh	r3, [r5, #12]
 80155b4:	065b      	lsls	r3, r3, #25
 80155b6:	f53f af1d 	bmi.w	80153f4 <_vfiprintf_r+0x44>
 80155ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155bc:	e71c      	b.n	80153f8 <_vfiprintf_r+0x48>
 80155be:	ab03      	add	r3, sp, #12
 80155c0:	9300      	str	r3, [sp, #0]
 80155c2:	462a      	mov	r2, r5
 80155c4:	4630      	mov	r0, r6
 80155c6:	4b06      	ldr	r3, [pc, #24]	; (80155e0 <_vfiprintf_r+0x230>)
 80155c8:	a904      	add	r1, sp, #16
 80155ca:	f7fd ff61 	bl	8013490 <_printf_i>
 80155ce:	e7e4      	b.n	801559a <_vfiprintf_r+0x1ea>
 80155d0:	0801658c 	.word	0x0801658c
 80155d4:	08016592 	.word	0x08016592
 80155d8:	08016596 	.word	0x08016596
 80155dc:	08012f51 	.word	0x08012f51
 80155e0:	0801538b 	.word	0x0801538b

080155e4 <__sflush_r>:
 80155e4:	898a      	ldrh	r2, [r1, #12]
 80155e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155e8:	4605      	mov	r5, r0
 80155ea:	0710      	lsls	r0, r2, #28
 80155ec:	460c      	mov	r4, r1
 80155ee:	d457      	bmi.n	80156a0 <__sflush_r+0xbc>
 80155f0:	684b      	ldr	r3, [r1, #4]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	dc04      	bgt.n	8015600 <__sflush_r+0x1c>
 80155f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	dc01      	bgt.n	8015600 <__sflush_r+0x1c>
 80155fc:	2000      	movs	r0, #0
 80155fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015602:	2e00      	cmp	r6, #0
 8015604:	d0fa      	beq.n	80155fc <__sflush_r+0x18>
 8015606:	2300      	movs	r3, #0
 8015608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801560c:	682f      	ldr	r7, [r5, #0]
 801560e:	6a21      	ldr	r1, [r4, #32]
 8015610:	602b      	str	r3, [r5, #0]
 8015612:	d032      	beq.n	801567a <__sflush_r+0x96>
 8015614:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015616:	89a3      	ldrh	r3, [r4, #12]
 8015618:	075a      	lsls	r2, r3, #29
 801561a:	d505      	bpl.n	8015628 <__sflush_r+0x44>
 801561c:	6863      	ldr	r3, [r4, #4]
 801561e:	1ac0      	subs	r0, r0, r3
 8015620:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015622:	b10b      	cbz	r3, 8015628 <__sflush_r+0x44>
 8015624:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015626:	1ac0      	subs	r0, r0, r3
 8015628:	2300      	movs	r3, #0
 801562a:	4602      	mov	r2, r0
 801562c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801562e:	4628      	mov	r0, r5
 8015630:	6a21      	ldr	r1, [r4, #32]
 8015632:	47b0      	blx	r6
 8015634:	1c43      	adds	r3, r0, #1
 8015636:	89a3      	ldrh	r3, [r4, #12]
 8015638:	d106      	bne.n	8015648 <__sflush_r+0x64>
 801563a:	6829      	ldr	r1, [r5, #0]
 801563c:	291d      	cmp	r1, #29
 801563e:	d82b      	bhi.n	8015698 <__sflush_r+0xb4>
 8015640:	4a28      	ldr	r2, [pc, #160]	; (80156e4 <__sflush_r+0x100>)
 8015642:	410a      	asrs	r2, r1
 8015644:	07d6      	lsls	r6, r2, #31
 8015646:	d427      	bmi.n	8015698 <__sflush_r+0xb4>
 8015648:	2200      	movs	r2, #0
 801564a:	6062      	str	r2, [r4, #4]
 801564c:	6922      	ldr	r2, [r4, #16]
 801564e:	04d9      	lsls	r1, r3, #19
 8015650:	6022      	str	r2, [r4, #0]
 8015652:	d504      	bpl.n	801565e <__sflush_r+0x7a>
 8015654:	1c42      	adds	r2, r0, #1
 8015656:	d101      	bne.n	801565c <__sflush_r+0x78>
 8015658:	682b      	ldr	r3, [r5, #0]
 801565a:	b903      	cbnz	r3, 801565e <__sflush_r+0x7a>
 801565c:	6560      	str	r0, [r4, #84]	; 0x54
 801565e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015660:	602f      	str	r7, [r5, #0]
 8015662:	2900      	cmp	r1, #0
 8015664:	d0ca      	beq.n	80155fc <__sflush_r+0x18>
 8015666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801566a:	4299      	cmp	r1, r3
 801566c:	d002      	beq.n	8015674 <__sflush_r+0x90>
 801566e:	4628      	mov	r0, r5
 8015670:	f7ff f95e 	bl	8014930 <_free_r>
 8015674:	2000      	movs	r0, #0
 8015676:	6360      	str	r0, [r4, #52]	; 0x34
 8015678:	e7c1      	b.n	80155fe <__sflush_r+0x1a>
 801567a:	2301      	movs	r3, #1
 801567c:	4628      	mov	r0, r5
 801567e:	47b0      	blx	r6
 8015680:	1c41      	adds	r1, r0, #1
 8015682:	d1c8      	bne.n	8015616 <__sflush_r+0x32>
 8015684:	682b      	ldr	r3, [r5, #0]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d0c5      	beq.n	8015616 <__sflush_r+0x32>
 801568a:	2b1d      	cmp	r3, #29
 801568c:	d001      	beq.n	8015692 <__sflush_r+0xae>
 801568e:	2b16      	cmp	r3, #22
 8015690:	d101      	bne.n	8015696 <__sflush_r+0xb2>
 8015692:	602f      	str	r7, [r5, #0]
 8015694:	e7b2      	b.n	80155fc <__sflush_r+0x18>
 8015696:	89a3      	ldrh	r3, [r4, #12]
 8015698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801569c:	81a3      	strh	r3, [r4, #12]
 801569e:	e7ae      	b.n	80155fe <__sflush_r+0x1a>
 80156a0:	690f      	ldr	r7, [r1, #16]
 80156a2:	2f00      	cmp	r7, #0
 80156a4:	d0aa      	beq.n	80155fc <__sflush_r+0x18>
 80156a6:	0793      	lsls	r3, r2, #30
 80156a8:	bf18      	it	ne
 80156aa:	2300      	movne	r3, #0
 80156ac:	680e      	ldr	r6, [r1, #0]
 80156ae:	bf08      	it	eq
 80156b0:	694b      	ldreq	r3, [r1, #20]
 80156b2:	1bf6      	subs	r6, r6, r7
 80156b4:	600f      	str	r7, [r1, #0]
 80156b6:	608b      	str	r3, [r1, #8]
 80156b8:	2e00      	cmp	r6, #0
 80156ba:	dd9f      	ble.n	80155fc <__sflush_r+0x18>
 80156bc:	4633      	mov	r3, r6
 80156be:	463a      	mov	r2, r7
 80156c0:	4628      	mov	r0, r5
 80156c2:	6a21      	ldr	r1, [r4, #32]
 80156c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80156c8:	47e0      	blx	ip
 80156ca:	2800      	cmp	r0, #0
 80156cc:	dc06      	bgt.n	80156dc <__sflush_r+0xf8>
 80156ce:	89a3      	ldrh	r3, [r4, #12]
 80156d0:	f04f 30ff 	mov.w	r0, #4294967295
 80156d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156d8:	81a3      	strh	r3, [r4, #12]
 80156da:	e790      	b.n	80155fe <__sflush_r+0x1a>
 80156dc:	4407      	add	r7, r0
 80156de:	1a36      	subs	r6, r6, r0
 80156e0:	e7ea      	b.n	80156b8 <__sflush_r+0xd4>
 80156e2:	bf00      	nop
 80156e4:	dfbffffe 	.word	0xdfbffffe

080156e8 <_fflush_r>:
 80156e8:	b538      	push	{r3, r4, r5, lr}
 80156ea:	690b      	ldr	r3, [r1, #16]
 80156ec:	4605      	mov	r5, r0
 80156ee:	460c      	mov	r4, r1
 80156f0:	b913      	cbnz	r3, 80156f8 <_fflush_r+0x10>
 80156f2:	2500      	movs	r5, #0
 80156f4:	4628      	mov	r0, r5
 80156f6:	bd38      	pop	{r3, r4, r5, pc}
 80156f8:	b118      	cbz	r0, 8015702 <_fflush_r+0x1a>
 80156fa:	6a03      	ldr	r3, [r0, #32]
 80156fc:	b90b      	cbnz	r3, 8015702 <_fflush_r+0x1a>
 80156fe:	f7fe f863 	bl	80137c8 <__sinit>
 8015702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d0f3      	beq.n	80156f2 <_fflush_r+0xa>
 801570a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801570c:	07d0      	lsls	r0, r2, #31
 801570e:	d404      	bmi.n	801571a <_fflush_r+0x32>
 8015710:	0599      	lsls	r1, r3, #22
 8015712:	d402      	bmi.n	801571a <_fflush_r+0x32>
 8015714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015716:	f7fe fa7f 	bl	8013c18 <__retarget_lock_acquire_recursive>
 801571a:	4628      	mov	r0, r5
 801571c:	4621      	mov	r1, r4
 801571e:	f7ff ff61 	bl	80155e4 <__sflush_r>
 8015722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015724:	4605      	mov	r5, r0
 8015726:	07da      	lsls	r2, r3, #31
 8015728:	d4e4      	bmi.n	80156f4 <_fflush_r+0xc>
 801572a:	89a3      	ldrh	r3, [r4, #12]
 801572c:	059b      	lsls	r3, r3, #22
 801572e:	d4e1      	bmi.n	80156f4 <_fflush_r+0xc>
 8015730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015732:	f7fe fa72 	bl	8013c1a <__retarget_lock_release_recursive>
 8015736:	e7dd      	b.n	80156f4 <_fflush_r+0xc>

08015738 <__swhatbuf_r>:
 8015738:	b570      	push	{r4, r5, r6, lr}
 801573a:	460c      	mov	r4, r1
 801573c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015740:	4615      	mov	r5, r2
 8015742:	2900      	cmp	r1, #0
 8015744:	461e      	mov	r6, r3
 8015746:	b096      	sub	sp, #88	; 0x58
 8015748:	da0c      	bge.n	8015764 <__swhatbuf_r+0x2c>
 801574a:	89a3      	ldrh	r3, [r4, #12]
 801574c:	2100      	movs	r1, #0
 801574e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015752:	bf0c      	ite	eq
 8015754:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015758:	2340      	movne	r3, #64	; 0x40
 801575a:	2000      	movs	r0, #0
 801575c:	6031      	str	r1, [r6, #0]
 801575e:	602b      	str	r3, [r5, #0]
 8015760:	b016      	add	sp, #88	; 0x58
 8015762:	bd70      	pop	{r4, r5, r6, pc}
 8015764:	466a      	mov	r2, sp
 8015766:	f000 f863 	bl	8015830 <_fstat_r>
 801576a:	2800      	cmp	r0, #0
 801576c:	dbed      	blt.n	801574a <__swhatbuf_r+0x12>
 801576e:	9901      	ldr	r1, [sp, #4]
 8015770:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015774:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015778:	4259      	negs	r1, r3
 801577a:	4159      	adcs	r1, r3
 801577c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015780:	e7eb      	b.n	801575a <__swhatbuf_r+0x22>

08015782 <__smakebuf_r>:
 8015782:	898b      	ldrh	r3, [r1, #12]
 8015784:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015786:	079d      	lsls	r5, r3, #30
 8015788:	4606      	mov	r6, r0
 801578a:	460c      	mov	r4, r1
 801578c:	d507      	bpl.n	801579e <__smakebuf_r+0x1c>
 801578e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015792:	6023      	str	r3, [r4, #0]
 8015794:	6123      	str	r3, [r4, #16]
 8015796:	2301      	movs	r3, #1
 8015798:	6163      	str	r3, [r4, #20]
 801579a:	b002      	add	sp, #8
 801579c:	bd70      	pop	{r4, r5, r6, pc}
 801579e:	466a      	mov	r2, sp
 80157a0:	ab01      	add	r3, sp, #4
 80157a2:	f7ff ffc9 	bl	8015738 <__swhatbuf_r>
 80157a6:	9900      	ldr	r1, [sp, #0]
 80157a8:	4605      	mov	r5, r0
 80157aa:	4630      	mov	r0, r6
 80157ac:	f7fd faa8 	bl	8012d00 <_malloc_r>
 80157b0:	b948      	cbnz	r0, 80157c6 <__smakebuf_r+0x44>
 80157b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157b6:	059a      	lsls	r2, r3, #22
 80157b8:	d4ef      	bmi.n	801579a <__smakebuf_r+0x18>
 80157ba:	f023 0303 	bic.w	r3, r3, #3
 80157be:	f043 0302 	orr.w	r3, r3, #2
 80157c2:	81a3      	strh	r3, [r4, #12]
 80157c4:	e7e3      	b.n	801578e <__smakebuf_r+0xc>
 80157c6:	89a3      	ldrh	r3, [r4, #12]
 80157c8:	6020      	str	r0, [r4, #0]
 80157ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157ce:	81a3      	strh	r3, [r4, #12]
 80157d0:	9b00      	ldr	r3, [sp, #0]
 80157d2:	6120      	str	r0, [r4, #16]
 80157d4:	6163      	str	r3, [r4, #20]
 80157d6:	9b01      	ldr	r3, [sp, #4]
 80157d8:	b15b      	cbz	r3, 80157f2 <__smakebuf_r+0x70>
 80157da:	4630      	mov	r0, r6
 80157dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80157e0:	f000 f838 	bl	8015854 <_isatty_r>
 80157e4:	b128      	cbz	r0, 80157f2 <__smakebuf_r+0x70>
 80157e6:	89a3      	ldrh	r3, [r4, #12]
 80157e8:	f023 0303 	bic.w	r3, r3, #3
 80157ec:	f043 0301 	orr.w	r3, r3, #1
 80157f0:	81a3      	strh	r3, [r4, #12]
 80157f2:	89a3      	ldrh	r3, [r4, #12]
 80157f4:	431d      	orrs	r5, r3
 80157f6:	81a5      	strh	r5, [r4, #12]
 80157f8:	e7cf      	b.n	801579a <__smakebuf_r+0x18>

080157fa <memmove>:
 80157fa:	4288      	cmp	r0, r1
 80157fc:	b510      	push	{r4, lr}
 80157fe:	eb01 0402 	add.w	r4, r1, r2
 8015802:	d902      	bls.n	801580a <memmove+0x10>
 8015804:	4284      	cmp	r4, r0
 8015806:	4623      	mov	r3, r4
 8015808:	d807      	bhi.n	801581a <memmove+0x20>
 801580a:	1e43      	subs	r3, r0, #1
 801580c:	42a1      	cmp	r1, r4
 801580e:	d008      	beq.n	8015822 <memmove+0x28>
 8015810:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015814:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015818:	e7f8      	b.n	801580c <memmove+0x12>
 801581a:	4601      	mov	r1, r0
 801581c:	4402      	add	r2, r0
 801581e:	428a      	cmp	r2, r1
 8015820:	d100      	bne.n	8015824 <memmove+0x2a>
 8015822:	bd10      	pop	{r4, pc}
 8015824:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015828:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801582c:	e7f7      	b.n	801581e <memmove+0x24>
	...

08015830 <_fstat_r>:
 8015830:	b538      	push	{r3, r4, r5, lr}
 8015832:	2300      	movs	r3, #0
 8015834:	4d06      	ldr	r5, [pc, #24]	; (8015850 <_fstat_r+0x20>)
 8015836:	4604      	mov	r4, r0
 8015838:	4608      	mov	r0, r1
 801583a:	4611      	mov	r1, r2
 801583c:	602b      	str	r3, [r5, #0]
 801583e:	f7f0 f8a8 	bl	8005992 <_fstat>
 8015842:	1c43      	adds	r3, r0, #1
 8015844:	d102      	bne.n	801584c <_fstat_r+0x1c>
 8015846:	682b      	ldr	r3, [r5, #0]
 8015848:	b103      	cbz	r3, 801584c <_fstat_r+0x1c>
 801584a:	6023      	str	r3, [r4, #0]
 801584c:	bd38      	pop	{r3, r4, r5, pc}
 801584e:	bf00      	nop
 8015850:	20002918 	.word	0x20002918

08015854 <_isatty_r>:
 8015854:	b538      	push	{r3, r4, r5, lr}
 8015856:	2300      	movs	r3, #0
 8015858:	4d05      	ldr	r5, [pc, #20]	; (8015870 <_isatty_r+0x1c>)
 801585a:	4604      	mov	r4, r0
 801585c:	4608      	mov	r0, r1
 801585e:	602b      	str	r3, [r5, #0]
 8015860:	f7f0 f8a6 	bl	80059b0 <_isatty>
 8015864:	1c43      	adds	r3, r0, #1
 8015866:	d102      	bne.n	801586e <_isatty_r+0x1a>
 8015868:	682b      	ldr	r3, [r5, #0]
 801586a:	b103      	cbz	r3, 801586e <_isatty_r+0x1a>
 801586c:	6023      	str	r3, [r4, #0]
 801586e:	bd38      	pop	{r3, r4, r5, pc}
 8015870:	20002918 	.word	0x20002918

08015874 <__assert_func>:
 8015874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015876:	4614      	mov	r4, r2
 8015878:	461a      	mov	r2, r3
 801587a:	4b09      	ldr	r3, [pc, #36]	; (80158a0 <__assert_func+0x2c>)
 801587c:	4605      	mov	r5, r0
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	68d8      	ldr	r0, [r3, #12]
 8015882:	b14c      	cbz	r4, 8015898 <__assert_func+0x24>
 8015884:	4b07      	ldr	r3, [pc, #28]	; (80158a4 <__assert_func+0x30>)
 8015886:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801588a:	9100      	str	r1, [sp, #0]
 801588c:	462b      	mov	r3, r5
 801588e:	4906      	ldr	r1, [pc, #24]	; (80158a8 <__assert_func+0x34>)
 8015890:	f000 f85c 	bl	801594c <fiprintf>
 8015894:	f000 f86c 	bl	8015970 <abort>
 8015898:	4b04      	ldr	r3, [pc, #16]	; (80158ac <__assert_func+0x38>)
 801589a:	461c      	mov	r4, r3
 801589c:	e7f3      	b.n	8015886 <__assert_func+0x12>
 801589e:	bf00      	nop
 80158a0:	20000098 	.word	0x20000098
 80158a4:	080165a7 	.word	0x080165a7
 80158a8:	080165b4 	.word	0x080165b4
 80158ac:	080165e2 	.word	0x080165e2

080158b0 <__ascii_mbtowc>:
 80158b0:	b082      	sub	sp, #8
 80158b2:	b901      	cbnz	r1, 80158b6 <__ascii_mbtowc+0x6>
 80158b4:	a901      	add	r1, sp, #4
 80158b6:	b142      	cbz	r2, 80158ca <__ascii_mbtowc+0x1a>
 80158b8:	b14b      	cbz	r3, 80158ce <__ascii_mbtowc+0x1e>
 80158ba:	7813      	ldrb	r3, [r2, #0]
 80158bc:	600b      	str	r3, [r1, #0]
 80158be:	7812      	ldrb	r2, [r2, #0]
 80158c0:	1e10      	subs	r0, r2, #0
 80158c2:	bf18      	it	ne
 80158c4:	2001      	movne	r0, #1
 80158c6:	b002      	add	sp, #8
 80158c8:	4770      	bx	lr
 80158ca:	4610      	mov	r0, r2
 80158cc:	e7fb      	b.n	80158c6 <__ascii_mbtowc+0x16>
 80158ce:	f06f 0001 	mvn.w	r0, #1
 80158d2:	e7f8      	b.n	80158c6 <__ascii_mbtowc+0x16>

080158d4 <_realloc_r>:
 80158d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158d8:	4680      	mov	r8, r0
 80158da:	4614      	mov	r4, r2
 80158dc:	460e      	mov	r6, r1
 80158de:	b921      	cbnz	r1, 80158ea <_realloc_r+0x16>
 80158e0:	4611      	mov	r1, r2
 80158e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158e6:	f7fd ba0b 	b.w	8012d00 <_malloc_r>
 80158ea:	b92a      	cbnz	r2, 80158f8 <_realloc_r+0x24>
 80158ec:	f7ff f820 	bl	8014930 <_free_r>
 80158f0:	4625      	mov	r5, r4
 80158f2:	4628      	mov	r0, r5
 80158f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158f8:	f000 f841 	bl	801597e <_malloc_usable_size_r>
 80158fc:	4284      	cmp	r4, r0
 80158fe:	4607      	mov	r7, r0
 8015900:	d802      	bhi.n	8015908 <_realloc_r+0x34>
 8015902:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015906:	d812      	bhi.n	801592e <_realloc_r+0x5a>
 8015908:	4621      	mov	r1, r4
 801590a:	4640      	mov	r0, r8
 801590c:	f7fd f9f8 	bl	8012d00 <_malloc_r>
 8015910:	4605      	mov	r5, r0
 8015912:	2800      	cmp	r0, #0
 8015914:	d0ed      	beq.n	80158f2 <_realloc_r+0x1e>
 8015916:	42bc      	cmp	r4, r7
 8015918:	4622      	mov	r2, r4
 801591a:	4631      	mov	r1, r6
 801591c:	bf28      	it	cs
 801591e:	463a      	movcs	r2, r7
 8015920:	f7fe f98a 	bl	8013c38 <memcpy>
 8015924:	4631      	mov	r1, r6
 8015926:	4640      	mov	r0, r8
 8015928:	f7ff f802 	bl	8014930 <_free_r>
 801592c:	e7e1      	b.n	80158f2 <_realloc_r+0x1e>
 801592e:	4635      	mov	r5, r6
 8015930:	e7df      	b.n	80158f2 <_realloc_r+0x1e>

08015932 <__ascii_wctomb>:
 8015932:	4603      	mov	r3, r0
 8015934:	4608      	mov	r0, r1
 8015936:	b141      	cbz	r1, 801594a <__ascii_wctomb+0x18>
 8015938:	2aff      	cmp	r2, #255	; 0xff
 801593a:	d904      	bls.n	8015946 <__ascii_wctomb+0x14>
 801593c:	228a      	movs	r2, #138	; 0x8a
 801593e:	f04f 30ff 	mov.w	r0, #4294967295
 8015942:	601a      	str	r2, [r3, #0]
 8015944:	4770      	bx	lr
 8015946:	2001      	movs	r0, #1
 8015948:	700a      	strb	r2, [r1, #0]
 801594a:	4770      	bx	lr

0801594c <fiprintf>:
 801594c:	b40e      	push	{r1, r2, r3}
 801594e:	b503      	push	{r0, r1, lr}
 8015950:	4601      	mov	r1, r0
 8015952:	ab03      	add	r3, sp, #12
 8015954:	4805      	ldr	r0, [pc, #20]	; (801596c <fiprintf+0x20>)
 8015956:	f853 2b04 	ldr.w	r2, [r3], #4
 801595a:	6800      	ldr	r0, [r0, #0]
 801595c:	9301      	str	r3, [sp, #4]
 801595e:	f7ff fd27 	bl	80153b0 <_vfiprintf_r>
 8015962:	b002      	add	sp, #8
 8015964:	f85d eb04 	ldr.w	lr, [sp], #4
 8015968:	b003      	add	sp, #12
 801596a:	4770      	bx	lr
 801596c:	20000098 	.word	0x20000098

08015970 <abort>:
 8015970:	2006      	movs	r0, #6
 8015972:	b508      	push	{r3, lr}
 8015974:	f000 f834 	bl	80159e0 <raise>
 8015978:	2001      	movs	r0, #1
 801597a:	f7ef ffbc 	bl	80058f6 <_exit>

0801597e <_malloc_usable_size_r>:
 801597e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015982:	1f18      	subs	r0, r3, #4
 8015984:	2b00      	cmp	r3, #0
 8015986:	bfbc      	itt	lt
 8015988:	580b      	ldrlt	r3, [r1, r0]
 801598a:	18c0      	addlt	r0, r0, r3
 801598c:	4770      	bx	lr

0801598e <_raise_r>:
 801598e:	291f      	cmp	r1, #31
 8015990:	b538      	push	{r3, r4, r5, lr}
 8015992:	4604      	mov	r4, r0
 8015994:	460d      	mov	r5, r1
 8015996:	d904      	bls.n	80159a2 <_raise_r+0x14>
 8015998:	2316      	movs	r3, #22
 801599a:	6003      	str	r3, [r0, #0]
 801599c:	f04f 30ff 	mov.w	r0, #4294967295
 80159a0:	bd38      	pop	{r3, r4, r5, pc}
 80159a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80159a4:	b112      	cbz	r2, 80159ac <_raise_r+0x1e>
 80159a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80159aa:	b94b      	cbnz	r3, 80159c0 <_raise_r+0x32>
 80159ac:	4620      	mov	r0, r4
 80159ae:	f000 f831 	bl	8015a14 <_getpid_r>
 80159b2:	462a      	mov	r2, r5
 80159b4:	4601      	mov	r1, r0
 80159b6:	4620      	mov	r0, r4
 80159b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159bc:	f000 b818 	b.w	80159f0 <_kill_r>
 80159c0:	2b01      	cmp	r3, #1
 80159c2:	d00a      	beq.n	80159da <_raise_r+0x4c>
 80159c4:	1c59      	adds	r1, r3, #1
 80159c6:	d103      	bne.n	80159d0 <_raise_r+0x42>
 80159c8:	2316      	movs	r3, #22
 80159ca:	6003      	str	r3, [r0, #0]
 80159cc:	2001      	movs	r0, #1
 80159ce:	e7e7      	b.n	80159a0 <_raise_r+0x12>
 80159d0:	2400      	movs	r4, #0
 80159d2:	4628      	mov	r0, r5
 80159d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80159d8:	4798      	blx	r3
 80159da:	2000      	movs	r0, #0
 80159dc:	e7e0      	b.n	80159a0 <_raise_r+0x12>
	...

080159e0 <raise>:
 80159e0:	4b02      	ldr	r3, [pc, #8]	; (80159ec <raise+0xc>)
 80159e2:	4601      	mov	r1, r0
 80159e4:	6818      	ldr	r0, [r3, #0]
 80159e6:	f7ff bfd2 	b.w	801598e <_raise_r>
 80159ea:	bf00      	nop
 80159ec:	20000098 	.word	0x20000098

080159f0 <_kill_r>:
 80159f0:	b538      	push	{r3, r4, r5, lr}
 80159f2:	2300      	movs	r3, #0
 80159f4:	4d06      	ldr	r5, [pc, #24]	; (8015a10 <_kill_r+0x20>)
 80159f6:	4604      	mov	r4, r0
 80159f8:	4608      	mov	r0, r1
 80159fa:	4611      	mov	r1, r2
 80159fc:	602b      	str	r3, [r5, #0]
 80159fe:	f7ef ff6a 	bl	80058d6 <_kill>
 8015a02:	1c43      	adds	r3, r0, #1
 8015a04:	d102      	bne.n	8015a0c <_kill_r+0x1c>
 8015a06:	682b      	ldr	r3, [r5, #0]
 8015a08:	b103      	cbz	r3, 8015a0c <_kill_r+0x1c>
 8015a0a:	6023      	str	r3, [r4, #0]
 8015a0c:	bd38      	pop	{r3, r4, r5, pc}
 8015a0e:	bf00      	nop
 8015a10:	20002918 	.word	0x20002918

08015a14 <_getpid_r>:
 8015a14:	f7ef bf58 	b.w	80058c8 <_getpid>

08015a18 <_init>:
 8015a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a1a:	bf00      	nop
 8015a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a1e:	bc08      	pop	{r3}
 8015a20:	469e      	mov	lr, r3
 8015a22:	4770      	bx	lr

08015a24 <_fini>:
 8015a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a26:	bf00      	nop
 8015a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a2a:	bc08      	pop	{r3}
 8015a2c:	469e      	mov	lr, r3
 8015a2e:	4770      	bx	lr
